(window.webpackJsonp = window.webpackJsonp || []).push([
  [0],
  {
    1: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__.d(__webpack_exports__, 'z', function() {
        return useForm_useForm;
      }),
        __webpack_require__.d(__webpack_exports__, 'w', function() {
          return useField_useField;
        }),
        __webpack_require__.d(__webpack_exports__, 'x', function() {
          return useFieldApi;
        }),
        __webpack_require__.d(__webpack_exports__, 'y', function() {
          return useFieldState_useFieldState;
        }),
        __webpack_require__.d(__webpack_exports__, 'A', function() {
          return useFormApi;
        }),
        __webpack_require__.d(__webpack_exports__, 'B', function() {
          return useFormState;
        }),
        __webpack_require__.d(__webpack_exports__, 't', function() {
          return useArrayFieldApi;
        }),
        __webpack_require__.d(__webpack_exports__, 'u', function() {
          return useArrayFieldItemApi;
        }),
        __webpack_require__.d(__webpack_exports__, 'v', function() {
          return useArrayFieldItemState;
        }),
        __webpack_require__.d(__webpack_exports__, 'C', function() {
          return useMultistepApi;
        }),
        __webpack_require__.d(__webpack_exports__, 'D', function() {
          return useMultistepState;
        }),
        __webpack_require__.d(__webpack_exports__, 'a', function() {
          return ArrayField_ArrayField;
        }),
        __webpack_require__.d(__webpack_exports__, 'c', function() {
          return Debug_Debug;
        }),
        __webpack_require__.d(__webpack_exports__, 'd', function() {
          return DebugField_DebugField;
        }),
        __webpack_require__.d(__webpack_exports__, 'o', function() {
          return Relevant_Relevant;
        }),
        __webpack_require__.d(__webpack_exports__, 'f', function() {
          return Form_Form;
        }),
        __webpack_require__.d(__webpack_exports__, 'j', function() {
          return Input;
        }),
        __webpack_require__.d(__webpack_exports__, 'r', function() {
          return Select_Select;
        }),
        __webpack_require__.d(__webpack_exports__, 'l', function() {
          return Option_Option;
        }),
        __webpack_require__.d(__webpack_exports__, 'b', function() {
          return Checkbox_Checkbox;
        }),
        __webpack_require__.d(__webpack_exports__, 'n', function() {
          return RadioGroup_RadioGroup;
        }),
        __webpack_require__.d(__webpack_exports__, 'm', function() {
          return Radio_Radio;
        }),
        __webpack_require__.d(__webpack_exports__, 's', function() {
          return TextArea;
        }),
        __webpack_require__.d(__webpack_exports__, 'E', function() {
          return utils_namespaceObject;
        }),
        __webpack_require__.d(__webpack_exports__, 'i', function() {
          return FormStateAccessor_FormStateAccessor;
        }),
        __webpack_require__.d(__webpack_exports__, 'q', function() {
          return Scope_Scope;
        }),
        __webpack_require__.d(__webpack_exports__, 'p', function() {
          return SchemaFields_SchemaFields;
        }),
        __webpack_require__.d(__webpack_exports__, 'g', function() {
          return FormField_FormField;
        }),
        __webpack_require__.d(__webpack_exports__, 'h', function() {
          return FormFields_FormFields;
        }),
        __webpack_require__.d(__webpack_exports__, 'k', function() {
          return Multistep;
        }),
        __webpack_require__.d(__webpack_exports__, 'e', function() {
          return Elon;
        });
      var utils_namespaceObject = {};
      __webpack_require__.r(utils_namespaceObject),
        __webpack_require__.d(utils_namespaceObject, 'uuidv4', function() {
          return uuidv4;
        }),
        __webpack_require__.d(
          utils_namespaceObject,
          'getParentPath',
          function() {
            return getParentPath;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'debounceByName',
          function() {
            return debounceByName;
          }
        ),
        __webpack_require__.d(utils_namespaceObject, 'debounce', function() {
          return debounce;
        }),
        __webpack_require__.d(utils_namespaceObject, 'Elon', function() {
          return Elon;
        }),
        __webpack_require__.d(utils_namespaceObject, 'isChild', function() {
          return isChild;
        }),
        __webpack_require__.d(
          utils_namespaceObject,
          'generateOnChange',
          function() {
            return generateOnChange;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'generateOnBlur',
          function() {
            return generateOnBlur;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'generateOnFocus',
          function() {
            return generateOnFocus;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'generateValue',
          function() {
            return generateValue;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'yupToFormErrors',
          function() {
            return utils_yupToFormErrors;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'validateYupSchema',
          function() {
            return validateYupSchema;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'yupToFormError',
          function() {
            return yupToFormError;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'validateYupField',
          function() {
            return validateYupField;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'validateAjvSchema',
          function() {
            return utils_validateAjvSchema;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'validateRequired',
          function() {
            return validateRequired;
          }
        ),
        __webpack_require__.d(utils_namespaceObject, 'validateMax', function() {
          return validateMax;
        }),
        __webpack_require__.d(utils_namespaceObject, 'validateMin', function() {
          return validateMin;
        }),
        __webpack_require__.d(
          utils_namespaceObject,
          'validateMaxLength',
          function() {
            return validateMaxLength;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'validateMinLength',
          function() {
            return validateMinLength;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'generateValidationFunction',
          function() {
            return generateValidationFunction;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'informedParse',
          function() {
            return informedParse;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'informedFormat',
          function() {
            return informedFormat;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'informedFormatter',
          function() {
            return informedFormatter;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'createIntlNumberFormatter',
          function() {
            return createIntlNumberFormatter;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'getSchemaPathFromJsonPath',
          function() {
            return getSchemaPathFromJsonPath;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'computeFieldFromProperty',
          function() {
            return computeFieldFromProperty;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'computeFieldsFromSchema',
          function() {
            return computeFieldsFromSchema;
          }
        ),
        __webpack_require__.d(
          utils_namespaceObject,
          'checkCondition',
          function() {
            return checkCondition;
          }
        );
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        Context = __webpack_require__(4);
      function useFormController() {
        return Object(react.useContext)(Context.f);
      }
      function _slicedToArray(arr, i) {
        return (
          (function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function _iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o) return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return _arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function _nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function _arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function useStateWithGetter(initial) {
        var ref = Object(react.useRef)(),
          mounted = Object(react.useRef)(!0),
          _useState2 = _slicedToArray(Object(react.useState)(initial), 2),
          state = _useState2[0],
          setState = _useState2[1];
        ref.current = state;
        return (
          Object(react.useEffect)(function() {
            return function() {
              mounted.current = !1;
            };
          }, []),
          [
            state,
            function set(value) {
              (ref.current = value), mounted.current && setState(value);
            },
            function get() {
              return ref.current;
            }
          ]
        );
      }
      var src_debug = __webpack_require__(23);
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      var ObjectMap_debug = Object(src_debug.a)('informed:ObjMap\t'),
        ldtoPath = function ldtoPath() {
          var path =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : '';
          return String.prototype.replace
            .call(path, /\['(.+?)'\]/g, '.$1')
            .split(/[,[\].]+?/)
            .filter(Boolean);
        },
        ldget = function ldget(obj) {
          var path =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : '',
            defaultValue = arguments.length > 2 ? arguments[2] : void 0,
            result = String.prototype.replace
              .call(path, /\['(.+?)'\]/g, '.$1')
              .split(/[,[\].]+?/)
              .filter(Boolean)
              .reduce(function(res, key) {
                return null != res ? res[key] : res;
              }, obj);
          return void 0 === result || result === obj ? defaultValue : result;
        },
        parentPath = function parentPath(path) {
          return '.'
            .concat(path)
            .replace(/(.*)[.[].*/, '$1')
            .replace(/\./, '');
        },
        ldhas = function ldhas(obj, path) {
          var pPath = parentPath(path),
            key = (function pathKey(path) {
              return path.replace(parentPath(path), '').replace(/\./, '');
            })(path),
            parentObj = pPath ? ldget(obj, pPath) : obj;
          return !(
            !parentObj ||
            !Object.hasOwnProperty.call(
              parentObj,
              key.replace(/\[(.*)\]/, '$1')
            )
          );
        },
        ldset = function ldset(obj) {
          var path =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : '',
            val = arguments.length > 2 ? arguments[2] : void 0;
          String.prototype.replace
            .call(path, /\['(.+?)'\]/g, '.$1')
            .split(/[,[\].]+?/)
            .filter(Boolean)
            .reduce(function(res, key, i, arr) {
              return i === arr.length - 1
                ? ((res[key] = val), res[key])
                : 'object' !== _typeof(res[key])
                  ? (Number.isInteger(+arr[i + 1])
                      ? (res[key] = [])
                      : (res[key] = {}),
                    res[key])
                  : (Number.isInteger(+arr[i + 1]) &&
                      !Array.isArray(res[key]) &&
                      (res[key] = []),
                    res[key]);
            }, obj);
        },
        ldunset = function ldunset(obj) {
          var path =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : '',
            found = !1;
          return (
            String.prototype.replace
              .call(path, /\['(.+?)'\]/g, '.$1')
              .split(/[,[\].]+?/)
              .filter(Boolean)
              .reduce(function(res, key, i, arr) {
                return void 0 === res
                  ? res
                  : i === arr.length - 1
                    ? (delete res[key], (found = !0), res[key])
                    : res[key];
              }, obj),
            found
          );
        },
        pathToArrayElem = function pathToArrayElem(path) {
          var pathArray = ldtoPath(path);
          return Number.isInteger(+pathArray[pathArray.length - 1]);
        },
        ObjectMap = (function() {
          function ObjectMap() {
            !(function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor))
                throw new TypeError('Cannot call a class as a function');
            })(this, ObjectMap);
          }
          return (
            (function _createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  _defineProperties(Constructor.prototype, protoProps),
                staticProps && _defineProperties(Constructor, staticProps),
                Constructor
              );
            })(ObjectMap, null, [
              {
                key: 'empty',
                value: function empty(object) {
                  for (var i in object) return !1;
                  return !0;
                }
              },
              {
                key: 'get',
                value: function get(object, path) {
                  return ldget(object, path);
                }
              },
              {
                key: 'has',
                value: function has(object, path) {
                  return ldhas(object, path);
                }
              },
              {
                key: 'set',
                value: function set(object, path, value) {
                  if (void 0 !== value)
                    ObjectMap_debug('Setting', path, value),
                      ldset(object, path, value);
                  else if (
                    pathToArrayElem(path) &&
                    void 0 !== ObjectMap.get(object, path)
                  ) {
                    ObjectMap_debug(
                      'Special case SETTING',
                      path,
                      'to undefined'
                    ),
                      ldset(object, path, void 0);
                    var pathArray = ldtoPath(path);
                    cleanup(
                      object,
                      (pathArray = pathArray.slice(0, pathArray.length - 1))
                    );
                  } else
                    pathToArrayElem(path) ||
                      void 0 === ObjectMap.get(object, path) ||
                      (ObjectMap_debug(
                        'Special case REMOVING',
                        path,
                        'from object completley'
                      ),
                      ObjectMap.delete(object, path));
                }
              },
              {
                key: 'delete',
                value: function _delete(object, path) {
                  ObjectMap_debug('DELETE', path),
                    pathToArrayElem(path)
                      ? (ObjectMap_debug('ARRAY PATH', path),
                        this.pullOut(object, path))
                      : ldunset(object, path);
                  var pathArray = ldtoPath(path);
                  cleanup(
                    object,
                    (pathArray = pathArray.slice(0, pathArray.length - 1))
                  ),
                    ObjectMap_debug('DELETED', path);
                }
              },
              {
                key: 'pullOut',
                value: function pullOut(object, path) {
                  var pathArray = ldtoPath(path),
                    index = pathArray[pathArray.length - 1];
                  (pathArray = pathArray.slice(0, pathArray.length - 1)),
                    ObjectMap_debug('Pulling out:', pathArray, 'index', index);
                  var arr = ldget(object, pathArray);
                  ObjectMap_debug('Array Before', arr),
                    Array.isArray(arr) &&
                      (function ldpullAt(obj) {
                        var pulled,
                          path =
                            arguments.length > 1 && void 0 !== arguments[1]
                              ? arguments[1]
                              : '';
                        String.prototype.replace
                          .call(path, /\['(.+?)'\]/g, '.$1')
                          .split(/[,[\].]+?/)
                          .filter(Boolean)
                          .reduce(function(res, key, i, arr) {
                            return void 0 === res
                              ? res
                              : i === arr.length - 1 && Array.isArray(res)
                                ? ((pulled = res.splice(key, 1)), res[key])
                                : res[key];
                          }, obj);
                      })(arr, index),
                    ObjectMap_debug('Array After', arr),
                    cleanup(object, pathArray);
                }
              },
              {
                key: 'purge',
                value: function purge(obj) {
                  var newObj = Array.isArray(obj) ? [] : {};
                  return (
                    Object.keys(obj).forEach(function(key) {
                      'object' === _typeof(obj[key])
                        ? ((newObj[key] = ObjectMap.purge(obj[key])),
                          0 === Object.keys(newObj[key]).length &&
                            delete newObj[key])
                        : void 0 !== obj[key] && (newObj[key] = obj[key]);
                    }),
                    newObj
                  );
                }
              },
              {
                key: 'swap',
                value: function swap(object, path, i, j) {
                  console.log('Swaping out out:', path, i, j);
                  var arr = ldget(object, path);
                  console.log('Array', arr),
                    Array.isArray(arr) &&
                      (function ldSwap(arr, a, b) {
                        if (arr[a] && arr[b]) {
                          var oldA = arr[a],
                            oldB = arr[b];
                          (arr[a] = oldB), (arr[b] = oldA);
                        } else
                          console.warn(
                            'Attempted to swap '
                              .concat(a, ' with ')
                              .concat(b, ' but one of them does not exist :(')
                          );
                      })(arr, i, j);
                }
              }
            ]),
            ObjectMap
          );
        })();
      function cleanup(obj, path) {
        if (0 !== path.length) {
          var object = ldget(obj, path);
          (Array.isArray(object)
            ? object.every(function(e) {
                return null == e;
              })
            : '{}' === JSON.stringify(object)) && ldunset(obj, path),
            cleanup(obj, path.slice(0, path.length - 1));
        }
      }
      function utils_slicedToArray(arr, i) {
        return (
          (function utils_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function utils_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          utils_unsupportedIterableToArray(arr, i) ||
          (function utils_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ownKeys(Object(source), !0).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function _toConsumableArray(arr) {
        return (
          (function _arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return utils_arrayLikeToArray(arr);
          })(arr) ||
          (function _iterableToArray(iter) {
            if (
              ('undefined' != typeof Symbol && null != iter[Symbol.iterator]) ||
              null != iter['@@iterator']
            )
              return Array.from(iter);
          })(arr) ||
          utils_unsupportedIterableToArray(arr) ||
          (function _nonIterableSpread() {
            throw new TypeError(
              'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function utils_typeof(obj) {
        return (
          (utils_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          utils_typeof(obj)
        );
      }
      function utils_unsupportedIterableToArray(o, minLen) {
        if (o) {
          if ('string' == typeof o) return utils_arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          return (
            'Object' === n && o.constructor && (n = o.constructor.name),
            'Map' === n || 'Set' === n
              ? Array.from(o)
              : 'Arguments' === n ||
                /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                ? utils_arrayLikeToArray(o, minLen)
                : void 0
          );
        }
      }
      function utils_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function utils_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      var uuidv4 = function uuidv4() {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(
            /[xy]/g,
            function(c) {
              var r = (16 * Math.random()) | 0;
              return ('x' == c ? r : (3 & r) | 8).toString(16);
            }
          );
        },
        getParentPath = function getParentPath(name) {
          return name.replace(/(.*)[.[].*/, '$1');
        };
      function debounceByName(func) {
        var _this = this,
          timeout =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : 300,
          timers = {};
        return function() {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          )
            args[_key] = arguments[_key];
          var name = args[0];
          clearTimeout(timers[name]),
            (timers[name] = setTimeout(function() {
              func.apply(_this, args);
            }, timeout));
        };
      }
      function debounce(func) {
        var timer,
          _this2 = this,
          timeout =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : 300;
        return function() {
          for (
            var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
            _key2 < _len2;
            _key2++
          )
            args[_key2] = arguments[_key2];
          clearTimeout(timer),
            (timer = setTimeout(function() {
              func.apply(_this2, args);
            }, timeout));
        };
      }
      var Elon = (function() {
          function Elon() {
            !(function utils_classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor))
                throw new TypeError('Cannot call a class as a function');
            })(this, Elon);
          }
          return (
            (function utils_createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  utils_defineProperties(Constructor.prototype, protoProps),
                staticProps && utils_defineProperties(Constructor, staticProps),
                Constructor
              );
            })(Elon, null, [
              {
                key: 'inspect',
                value: function inspect(validators) {
                  return function(value, values) {
                    for (var i = 0; i < validators.length; i++) {
                      var res = (0, validators[i])(value, values);
                      if (res) return res;
                    }
                  };
                }
              }
            ]),
            Elon
          );
        })(),
        isChild = function isChild(parent, child) {
          return (
            !(parent.length < child.length) &&
            child.slice(0, parent.length) === parent
          );
        },
        generateOnChange = function generateOnChange(_ref) {
          var fieldType = _ref.fieldType,
            setValue = _ref.setValue,
            multiple = _ref.multiple,
            ref = _ref.ref,
            setter = function setter(e) {
              return setValue(e);
            };
          return (
            ('text' !== fieldType &&
              'textArea' !== fieldType &&
              'number' !== fieldType) ||
              (setter = function setter(e) {
                setValue(e.target.value, e);
              }),
            'select' === fieldType &&
              (setter = function setter(e) {
                var selected = Array.from(ref.current)
                  .filter(function(option) {
                    return option.selected;
                  })
                  .map(function(option) {
                    return option.value;
                  });
                setValue(multiple ? selected : selected[0] || '', e);
              }),
            'checkbox' === fieldType &&
              (setter = function setter(e) {
                setValue(e.target.checked, e);
              }),
            function(e) {
              setter(e);
            }
          );
        },
        generateOnBlur = function generateOnBlur(_ref2) {
          var setTouched = _ref2.setTouched;
          return function(e) {
            setTouched(!0, e);
          };
        },
        generateOnFocus = function generateOnFocus(_ref3) {
          var setFocused = _ref3.setFocused;
          return function(e) {
            setFocused(!0, e);
          };
        },
        generateValue = function generateValue(_ref4) {
          var fieldType = _ref4.fieldType,
            maskedValue = _ref4.maskedValue,
            multiple = _ref4.multiple,
            value = _ref4.value;
          switch (fieldType) {
            case 'text':
            case 'number':
              return maskedValue || 0 === maskedValue ? maskedValue : '';
            case 'textArea':
              return maskedValue || '';
            case 'select':
              return value || (multiple ? [] : '');
            case 'checkbox':
              return !!value;
            default:
              return value;
          }
        },
        utils_yupToFormErrors = function yupToFormErrors(yupError) {
          var errors = {};
          if (yupError.inner) {
            if (0 === yupError.inner.length)
              return void ObjectMap.set(
                errors,
                yupError.path,
                yupError.message
              );
            var _step,
              _iterator = (function _createForOfIteratorHelper(
                o,
                allowArrayLike
              ) {
                var it =
                  ('undefined' != typeof Symbol && o[Symbol.iterator]) ||
                  o['@@iterator'];
                if (!it) {
                  if (
                    Array.isArray(o) ||
                    (it = utils_unsupportedIterableToArray(o)) ||
                    (allowArrayLike && o && 'number' == typeof o.length)
                  ) {
                    it && (o = it);
                    var i = 0,
                      F = function F() {};
                    return {
                      s: F,
                      n: function n() {
                        return i >= o.length
                          ? { done: !0 }
                          : { done: !1, value: o[i++] };
                      },
                      e: function e(_e2) {
                        throw _e2;
                      },
                      f: F
                    };
                  }
                  throw new TypeError(
                    'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
                  );
                }
                var err,
                  normalCompletion = !0,
                  didErr = !1;
                return {
                  s: function s() {
                    it = it.call(o);
                  },
                  n: function n() {
                    var step = it.next();
                    return (normalCompletion = step.done), step;
                  },
                  e: function e(_e3) {
                    (didErr = !0), (err = _e3);
                  },
                  f: function f() {
                    try {
                      normalCompletion || null == it.return || it.return();
                    } finally {
                      if (didErr) throw err;
                    }
                  }
                };
              })(yupError.inner);
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var err = _step.value;
                ObjectMap.get(errors, err.path) ||
                  ObjectMap.set(errors, err.path, err.message);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
          return errors;
        },
        validateYupSchema = function validateYupSchema(schema, values) {
          try {
            schema.validateSync(values, { abortEarly: !1 });
          } catch (e) {
            return utils_yupToFormErrors(e);
          }
        },
        yupToFormError = function yupToFormError(yupError) {
          if (yupError.inner) {
            if (0 === yupError.inner.length) return;
            return yupError.inner[0].message;
          }
        },
        validateYupField = function validateYupField(schema, value) {
          try {
            schema.validateSync(value, { abortEarly: !1 });
          } catch (e) {
            return yupToFormError(e);
          }
        },
        utils_validateAjvSchema = function validateAjvSchema(validate, data) {
          validate(data);
          var errors = {};
          return (
            validate.errors &&
              validate.errors.forEach(function(_ref5) {
                var message = _ref5.message,
                  dataPath = _ref5.dataPath,
                  keyword = _ref5.keyword,
                  params = _ref5.params,
                  path = dataPath;
                'required' === keyword &&
                  (path = ''.concat(path, '.').concat(params.missingProperty)),
                  (path = path.replace('.', '')),
                  ObjectMap.set(errors, path, message);
              }),
            errors
          );
        },
        validateRequired = function validateRequired(
          value,
          required,
          getErrorMessage
        ) {
          if (required && (null == value || '' === value))
            return 'string' == typeof required
              ? required
              : getErrorMessage('required') || 'This field is required';
        },
        validateMax = function validateMax(value, max, getErrorMessage) {
          if (null != max && value > max)
            return (
              getErrorMessage('maximum') ||
              'This field should NOT be more than '.concat(max)
            );
        },
        validateMin = function validateMin(value, min, getErrorMessage) {
          if (null != min && value < min)
            return (
              getErrorMessage('minimum') ||
              'This field should NOT be less than '.concat(min)
            );
        },
        validateMaxLength = function validateMaxLength(
          value,
          maxLength,
          getErrorMessage
        ) {
          if (
            null != maxLength &&
            (null == value ? void 0 : value.length) > maxLength
          )
            return (
              getErrorMessage('maxLength') ||
              'This field should NOT be more than '.concat(
                maxLength,
                ' characters'
              )
            );
        },
        validateMinLength = function validateMinLength(
          value,
          minLength,
          getErrorMessage
        ) {
          if (
            null != minLength &&
            (null == value ? void 0 : value.length) < minLength
          )
            return (
              getErrorMessage('minLength') ||
              'This field should NOT be shorter than '.concat(
                minLength,
                ' characters'
              )
            );
        },
        generateValidationFunction = function generateValidationFunction(
          validationFunc,
          yupSchema,
          _ref6
        ) {
          var required = _ref6.required,
            minimum = _ref6.minimum,
            maximum = _ref6.maximum,
            minLength = _ref6.minLength,
            maxLength = _ref6.maxLength,
            pattern = _ref6.pattern,
            getErrorMessage = _ref6.getErrorMessage;
          return function(val, values) {
            var error;
            return (
              (required &&
                void 0 !==
                  (error = validateRequired(val, required, getErrorMessage))) ||
                (minimum &&
                  void 0 !==
                    (error = validateMin(val, minimum, getErrorMessage))) ||
                (maximum &&
                  void 0 !==
                    (error = validateMax(val, maximum, getErrorMessage))) ||
                (minLength &&
                  void 0 !==
                    (error = validateMinLength(
                      val,
                      minLength,
                      getErrorMessage
                    ))) ||
                (maxLength &&
                  void 0 !==
                    (error = validateMaxLength(
                      val,
                      maxLength,
                      getErrorMessage
                    ))) ||
                (pattern &&
                  ((error = (function validatePattern(
                    value,
                    pattern,
                    getErrorMessage
                  ) {
                    if (
                      null != pattern &&
                      !new RegExp(pattern).test(value) &&
                      value
                    )
                      return (
                        getErrorMessage('pattern') ||
                        'This field should match pattern "'.concat(
                          pattern,
                          '";'
                        )
                      );
                  })(val, pattern, getErrorMessage)),
                  void 0 !== error)) ||
                (yupSchema &&
                  void 0 !== (error = validateYupField(yupSchema, val))) ||
                (validationFunc && (error = validationFunc(val, values))),
              error
            );
          };
        },
        formatterFromString = function formatterFromString(formatter) {
          return formatter.split('').map(function(_char) {
            return '#' === _char ? /\d/ : '*' === _char ? /[\w]/ : _char;
          });
        },
        informedParse = function informedParse(val, parser) {
          if ('object' === utils_typeof(parser) && !Array.isArray(parser)) {
            var parsedVal = {};
            return (
              Object.keys(val).forEach(function(key) {
                if (parser[key]) {
                  var value = parser[key](val[key]);
                  parsedVal[key] = value;
                } else parsedVal[key] = val[key];
              }),
              parsedVal
            );
          }
          return parser(val);
        },
        informedFormat = function informedFormat(val, frmtr) {
          if ('object' === utils_typeof(frmtr) && !Array.isArray(frmtr)) {
            var formattedVal = {},
              formattedOffset = {};
            return (
              Object.keys(val).forEach(function(key) {
                if (frmtr[key]) {
                  var _informedFormatter = informedFormatter(
                      val[key],
                      frmtr[key]
                    ),
                    value = _informedFormatter.value,
                    offset = _informedFormatter.offset;
                  (formattedVal[key] = value), (formattedOffset[key] = offset);
                } else (formattedVal[key] = val[key]), (formattedOffset[key] = 0);
              }),
              { value: formattedVal, offset: formattedOffset }
            );
          }
          return informedFormatter(val, frmtr);
        },
        informedFormatter = function informedFormatter(val, frmtr) {
          if (!val) return { value: val, offset: 0 };
          var value = ''.concat(val),
            formatter = (function getFormatter(formatter, value) {
              if ('string' == typeof formatter)
                return formatterFromString(formatter);
              if ('function' == typeof formatter) {
                var frmtr = formatter(value);
                return 'string' == typeof frmtr
                  ? formatterFromString(frmtr)
                  : frmtr;
              }
              if (Array.isArray(formatter)) return formatter;
              throw new Error('Formatter must be string, array, or function');
            })(frmtr, value),
            prefixLength = formatter.findIndex(function(v) {
              return 'string' != typeof v;
            }),
            suffixStart =
              formatter.length -
              _toConsumableArray(formatter)
                .reverse()
                .findIndex(function(v) {
                  return 'string' != typeof v;
                }),
            formatted = [],
            chars = value.split(''),
            vIndex = 0,
            start = 0,
            matchIndex = (function matchingIndex(a, b) {
              for (
                var i = 0, mi = -1, matching = !0;
                matching && i < a.length;

              )
                a[i] == b[i] ? (mi = i) : (matching = !1), (i += 1);
              return mi;
            })(formatter.slice(0, prefixLength), chars.slice(0, prefixLength));
          matchIndex > -1 &&
            ((vIndex = matchIndex + 1),
            (formatted = formatted.concat(formatter.slice(0, matchIndex + 1))),
            (start = matchIndex + 1)),
            matchIndex < 0 &&
              ((formatted = formatted.concat(formatter.slice(0, prefixLength))),
              (start = prefixLength));
          for (var pastPrefix = !1, i = start; i < formatter.length; i++) {
            var matcher = formatter[i];
            if (
              (pastPrefix || 'string' == typeof matcher || (pastPrefix = !0),
              vIndex != chars.length)
            ) {
              var curChar = chars[vIndex];
              if ('function' == typeof matcher)
                formatted.push(matcher(curChar)), (vIndex += 1);
              else {
                var match =
                  'string' == typeof matcher
                    ? matcher === curChar
                    : matcher.test(curChar);
                match && 'string' == typeof matcher
                  ? (formatted.push(matcher), (vIndex += 1))
                  : match || 'string' != typeof matcher
                    ? match && 'string' != typeof matcher
                      ? (formatted.push(curChar), (vIndex += 1))
                      : match ||
                        'string' == typeof matcher ||
                        ((vIndex += 1), (i -= 1))
                    : vIndex != chars.length && formatted.push(matcher);
              }
            } else {
              if (!('string' == typeof matcher && i >= suffixStart)) break;
              formatted.push(matcher);
            }
          }
          return {
            value: formatted.join(''),
            offset: value ? formatted.length - value.length : 0
          };
        },
        createIntlNumberFormatter = function createIntlNumberFormatter(
          locale,
          opts
        ) {
          var _numberFormatterWitho,
            _numberFormatterWitho2,
            numberFormatter = new Intl.NumberFormat(locale, opts),
            decimalChar =
              null !==
                (_numberFormatterWitho =
                  null ===
                    (_numberFormatterWitho2 = new Intl.NumberFormat(locale)
                      .formatToParts(0.1)
                      .find(function(_ref7) {
                        return 'decimal' === _ref7.type;
                      })) || void 0 === _numberFormatterWitho2
                    ? void 0
                    : _numberFormatterWitho2.value) &&
              void 0 !== _numberFormatterWitho
                ? _numberFormatterWitho
                : '.';
          function toNumberString(str) {
            return ''
              .concat(str)
              .split(decimalChar)
              .map(function(splitStr) {
                return (function stripNonNumeric(str) {
                  return ''.concat(str).replace(/\D/g, '');
                })(splitStr);
              })
              .join('.');
          }
          return {
            formatter: function mask(value) {
              var _float2 = toNumberString(value),
                fraction = ''.concat(_float2).split('.')[1],
                numberParts = numberFormatter.formatToParts(Number(_float2));
              '0' === fraction &&
                numberParts.push(
                  { type: 'decimal', value: decimalChar },
                  { type: 'fraction', value: fraction }
                );
              var maskArray = numberParts.reduce(function(pv, _ref8) {
                  var type = _ref8.type,
                    partValue = _ref8.value;
                  return ['decimal', 'fraction'].includes(type) &&
                    null == fraction
                    ? pv
                    : ['integer', 'fraction'].includes(type)
                      ? [].concat(
                          _toConsumableArray(pv),
                          _toConsumableArray(
                            partValue
                              .split('')
                              .filter(function(_, index) {
                                return (
                                  'fraction' !== type || index < fraction.length
                                );
                              })
                              .map(function() {
                                return /\d/;
                              })
                          )
                        )
                      : [].concat(
                          _toConsumableArray(pv),
                          'currency' === type
                            ? _toConsumableArray(partValue.split(''))
                            : [partValue]
                        );
                }, []),
                lastDigitIndex = (function findLastIndex(arr, predicate) {
                  for (var l = arr.length; l--; )
                    if (predicate(arr[l])) return l;
                  return -1;
                })(maskArray, function(maskChar) {
                  return (function isRegexEqual(x, y) {
                    return (
                      x instanceof RegExp &&
                      y instanceof RegExp &&
                      x.source === y.source &&
                      x.global === y.global &&
                      x.ignoreCase === y.ignoreCase &&
                      x.multiline === y.multiline
                    );
                  })(maskChar, /\d/);
                });
              -1 === maskArray.indexOf(decimalChar) &&
                -1 !== ''.concat(value).indexOf(decimalChar) &&
                ((maskArray = (function insert(arr, index, value) {
                  var nextArr = _toConsumableArray(arr);
                  return (
                    Array.isArray(value)
                      ? nextArr.splice.apply(
                          nextArr,
                          [index, 0].concat(_toConsumableArray(value))
                        )
                      : nextArr.splice(index, 0, value),
                    nextArr
                  );
                })(maskArray, lastDigitIndex + 1, [decimalChar, '[]'])),
                (lastDigitIndex += 2));
              var endOfMask = maskArray.slice(lastDigitIndex + 1).join('');
              return (maskArray = [].concat(
                _toConsumableArray(maskArray.slice(0, lastDigitIndex + 1)),
                [endOfMask]
              ));
            },
            parser: function parser(value) {
              if (null != value)
                return (function toFloat(str) {
                  if ('number' == typeof str) return str;
                  var _float = parseFloat(toNumberString(str));
                  return Number.isNaN(_float) ? void 0 : _float;
                })(value);
            }
          };
        },
        getSchemaPathFromJsonPath = function getSchemaPathFromJsonPath(
          jsonPath
        ) {
          var schemaPath = jsonPath
            .replace(/\./g, '.properties.')
            .replace(/\[\d+\]/g, '.items');
          return (schemaPath = 'properties.'.concat(schemaPath));
        },
        computeFieldFromProperty = function computeFieldFromProperty(
          propertyName,
          property,
          prefix
        ) {
          var uiControl = property['ui:control'],
            inputProps = property['ui:props'],
            uiBefore = property['ui:before'],
            uiAfter = property['ui:after'],
            oneOf = property.oneOf,
            items = property.items,
            schemaEnum = property.enum,
            label = property.title,
            minimum = property.minimum,
            maximum = property.maximum,
            minLength = property.minLength,
            maxLength = property.maxLength,
            pattern = property.pattern,
            required = property.required,
            type = property.type,
            subProperties = property.properties,
            allOf = property.allOf,
            id = uuidv4();
          inputProps && inputProps.id && (id = inputProps.id);
          var field = {
            componentType: null != uiControl ? uiControl : type,
            name: prefix
              ? ''.concat(prefix, '.').concat(propertyName)
              : propertyName,
            type: type,
            uiBefore: uiBefore,
            uiAfter: uiAfter,
            properties: 'object' === type ? subProperties : void 0,
            allOf: 'object' === type ? allOf : void 0,
            items: 'array' === type ? items : void 0,
            propertyName: propertyName,
            required: required,
            props: _objectSpread(
              {
                label: label,
                id: id,
                minimum: minimum,
                maximum: maximum,
                minLength: minLength,
                maxLength: maxLength,
                pattern: pattern
              },
              inputProps
            )
          };
          if (oneOf) {
            var options = property.oneOf.map(function(option) {
              var _option$uiProps = option['ui:props'],
                inputProps = void 0 === _option$uiProps ? {} : _option$uiProps;
              return _objectSpread(
                { value: option.const, label: option.title },
                inputProps
              );
            });
            field.props.options = options;
          }
          if (schemaEnum) {
            var _options = property.enum.map(function(val) {
              return { value: val, label: val };
            });
            field.props.options = _options;
          }
          if (items && items.oneOf) {
            var _options2 = items.oneOf.map(function(option) {
              var _option$uiProps2 = option['ui:props'],
                inputProps =
                  void 0 === _option$uiProps2 ? {} : _option$uiProps2;
              return _objectSpread(
                { value: option.const, label: option.title },
                inputProps
              );
            });
            field.props.options = _options2;
          }
          return field;
        },
        computeFieldsFromSchema = function computeFieldsFromSchema(
          schema,
          onlyValidateSchema
        ) {
          if (!schema || onlyValidateSchema)
            return { properties: [], conditions: [], components: [] };
          var _schema$properties = schema.properties,
            properties =
              void 0 === _schema$properties ? {} : _schema$properties,
            allOf = schema.allOf;
          if (Object.keys(properties).length > 0) {
            var fields = Object.keys(properties).map(function(propertyName) {
                return propertyName;
              }),
              conditions = [],
              components = [];
            return (
              allOf &&
                allOf.forEach(function(item) {
                  if (item.if) {
                    var newItem = _objectSpread({}, item);
                    (newItem.then = { properties: {} }),
                      (newItem.thenProps = {}),
                      Object.keys(item.then.properties).forEach(function(name) {
                        fields.includes(name)
                          ? (newItem.thenProps[name] =
                              item.then.properties[name])
                          : (newItem.then.properties[name] =
                              item.then.properties[name]);
                      }),
                      conditions.push(newItem);
                  } else components.push(item);
                }),
              {
                properties: fields,
                conditions: conditions,
                components: components
              }
            );
          }
          return { properties: [], conditions: [], components: [] };
        };
      function checkCondition(condition, propertyValue) {
        return Object.entries(condition).every(function(_ref9) {
          var _ref10 = utils_slicedToArray(_ref9, 2),
            keyword = _ref10[0],
            value = _ref10[1];
          switch (keyword) {
            case 'const':
              return propertyValue === value;
            case 'minimum':
              return propertyValue >= value;
            case 'exclusiveMinimum':
              return propertyValue > value;
            case 'maximum':
              return propertyValue <= value;
            case 'exclusiveMaximum':
              return propertyValue < value;
            case 'enum':
              return !!Array.isArray(value) && value.includes(propertyValue);
            case 'pattern':
              return new RegExp(value).test(propertyValue);
            case 'not':
              return propertyValue !== value;
            default:
              return !1;
          }
        });
      }
      function useScoper() {
        var scope = Object(react.useContext)(Context.m);
        return Object(react.useCallback)(
          function(name) {
            return scope === name
              ? name
              : scope && name
                ? ''.concat(scope, '.').concat(name)
                : name;
          },
          [scope]
        );
      }
      var useFieldSubscription_debug = Object(src_debug.a)(
          'informed:useFieldSubscription\t'
        ),
        useFieldSubscription_useFieldSubscription = function useFieldSubscription(
          event,
          fields,
          cb
        ) {
          var scoped =
              !(arguments.length > 3 && void 0 !== arguments[3]) ||
              arguments[3],
            scope = useScoper(),
            scopedFields = Object(react.useMemo)(
              function() {
                return scoped
                  ? fields.map(function(field) {
                      return scope(field);
                    })
                  : fields;
              },
              [fields]
            ),
            formController = useFormController();
          Object(react.useEffect)(
            function() {
              var listener = function listener(target) {
                ('_ALL_' === target ||
                  scopedFields.includes(target) ||
                  (target &&
                    scopedFields.some(function(field) {
                      return isChild(field, target);
                    }))) &&
                  (useFieldSubscription_debug(
                    'subscription '
                      .concat(event, ' triggered with target ')
                      .concat(target, ' for'),
                    scopedFields
                  ),
                  cb(target));
              };
              return (
                formController.emitter.on(event, listener),
                function() {
                  formController.emitter.removeListener(event, listener);
                }
              );
            },
            [fields]
          );
        };
      function useRelevance_toConsumableArray(arr) {
        return (
          (function useRelevance_arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return useRelevance_arrayLikeToArray(arr);
          })(arr) ||
          (function useRelevance_iterableToArray(iter) {
            if (
              ('undefined' != typeof Symbol && null != iter[Symbol.iterator]) ||
              null != iter['@@iterator']
            )
              return Array.from(iter);
          })(arr) ||
          useRelevance_unsupportedIterableToArray(arr) ||
          (function useRelevance_nonIterableSpread() {
            throw new TypeError(
              'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useRelevance_slicedToArray(arr, i) {
        return (
          (function useRelevance_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function useRelevance_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          useRelevance_unsupportedIterableToArray(arr, i) ||
          (function useRelevance_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useRelevance_unsupportedIterableToArray(o, minLen) {
        if (o) {
          if ('string' == typeof o)
            return useRelevance_arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          return (
            'Object' === n && o.constructor && (n = o.constructor.name),
            'Map' === n || 'Set' === n
              ? Array.from(o)
              : 'Arguments' === n ||
                /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                ? useRelevance_arrayLikeToArray(o, minLen)
                : void 0
          );
        }
      }
      function useRelevance_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var logger = Object(src_debug.a)('informed:useRelevance\t'),
        useRelevance_useRelevance = function useRelevance(_ref) {
          var name = _ref.name,
            relevant = _ref.relevant,
            _ref$relevanceWhen = _ref.relevanceWhen,
            relevanceWhen =
              void 0 === _ref$relevanceWhen ? [] : _ref$relevanceWhen,
            _ref$relevanceDeps = _ref.relevanceDeps,
            relevanceDeps =
              void 0 === _ref$relevanceDeps ? [] : _ref$relevanceDeps,
            formController = useFormController(),
            scope = Object(react.useContext)(Context.m),
            scopeRef = Object(react.useRef)(scope);
          scopeRef.current = scope;
          var _useStateWithGetter2 = useRelevance_slicedToArray(
              useStateWithGetter(function() {
                return (
                  !relevant ||
                  relevant({
                    formState: formController.getFormState(),
                    formApi: formController.getFormApi(),
                    scope: scope,
                    relevanceDeps: relevanceDeps
                  })
                );
              }),
              3
            ),
            isRelevant = _useStateWithGetter2[0],
            setIsRelevant = _useStateWithGetter2[1],
            getIsRelevant = _useStateWithGetter2[2],
            check = 'function' == typeof relevanceWhen ? [] : relevanceWhen,
            fields = Object(react.useMemo)(function() {
              return 'function' == typeof relevanceWhen
                ? relevanceWhen(scope)
                : relevanceWhen;
            }, [].concat(useRelevance_toConsumableArray(check), [scope]));
          return (
            useFieldSubscription_useFieldSubscription(
              'field-value',
              fields,
              function(target) {
                logger(
                  're-evaluating relevance for '
                    .concat(name, ' because of ')
                    .concat(target)
                );
                var rel = relevant({
                  formState: formController.getFormState(),
                  formApi: formController.getFormApi(),
                  scope: scopeRef.current,
                  relevanceDeps: relevanceDeps
                });
                getIsRelevant() != rel && setIsRelevant(rel);
              },
              !('function' == typeof relevanceWhen)
            ),
            Object(react.useEffect)(function() {
              if (
                relevant &&
                'function' != typeof relevanceWhen &&
                0 === relevanceWhen.length
              ) {
                var listener = function listener(target) {
                  logger(
                    're-evaluating relevance for '
                      .concat(name, ' because of ')
                      .concat(target)
                  );
                  var rel = relevant({
                    formState: formController.getFormState(),
                    formApi: formController.getFormApi(),
                    scope: scopeRef.current,
                    relevanceDeps: relevanceDeps
                  });
                  getIsRelevant() != rel && setIsRelevant(rel);
                };
                return (
                  formController.emitter.on('field', listener),
                  function() {
                    formController.emitter.removeListener('field', listener);
                  }
                );
              }
            }, []),
            Object(react.useEffect)(function() {
              relevant &&
                setIsRelevant(
                  relevant({
                    formState: formController.getFormState(),
                    formApi: formController.getFormApi(),
                    scope: scope,
                    relevanceDeps: relevanceDeps
                  })
                );
            }, [name].concat(useRelevance_toConsumableArray(relevanceDeps))),
            isRelevant
          );
        },
        Relevant_Relevant = function Relevant(_ref) {
          var when = _ref.when,
            relevanceWhen = _ref.relevanceWhen,
            relevanceDeps = _ref.relevanceDeps,
            children = _ref.children,
            formController = useFormController(),
            scope = Object(react.useContext)(Context.m),
            isRelevant = useRelevance_useRelevance({
              relevant: when,
              relevanceWhen: relevanceWhen,
              relevanceDeps: relevanceDeps
            }),
            relevantContext = Object(react.useMemo)(
              function() {
                return {
                  isRelevant: isRelevant,
                  relevant: function relevant() {
                    return when({
                      formState: formController.getFormState(),
                      formApi: formController.getFormApi(),
                      scope: scope,
                      relevanceDeps: relevanceDeps
                    });
                  }
                };
              },
              [isRelevant, scope, relevanceDeps]
            );
          return react_default.a.createElement(
            Context.l.Provider,
            { value: relevantContext },
            isRelevant ? children : null
          );
        };
      function useFormApi() {
        return Object(react.useContext)(Context.e);
      }
      function useScope(name) {
        var scope = Object(react.useContext)(Context.m);
        return scope === name
          ? name
          : scope && name
            ? ''.concat(scope, '.').concat(name)
            : name;
      }
      (Relevant_Relevant.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Relevant'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/Relevant.js'] = {
            name: 'Relevant',
            docgenInfo: Relevant_Relevant.__docgenInfo,
            path: 'src/components/Relevant.js'
          });
      var buildFieldApi = function buildFieldApi(formApi, name) {
        return {
          getValue: function getValue() {
            return formApi.getValue(name);
          },
          setValue: function setValue(value, e, key) {
            return formApi.setValue(name, value, e, key);
          },
          getTouched: function getTouched() {
            return formApi.getTouched(name);
          },
          setTouched: function setTouched(value, e) {
            return formApi.setTouched(name, value, e);
          },
          getError: function getError() {
            return formApi.getError(name);
          },
          setError: function setError(value) {
            return formApi.setError(name, value);
          },
          getFocused: function getFocused() {
            return formApi.getFocused(name);
          },
          setFocused: function setFocused(value, e) {
            return formApi.setFocused(name, value, e);
          },
          reset: function reset() {
            return formApi.resetField(name);
          },
          validate: function validate() {
            return formApi.validateField(name);
          },
          getDirty: function getDirty() {
            return formApi.getDirty(name);
          },
          getPristine: function getPristine() {
            return formApi.getPristine(name);
          },
          getMaskedValue: function getMaskedValue() {
            return formApi.getMaskedValue(name);
          }
        };
      };
      function useFieldApi(n) {
        var scoped =
            !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
          formApi = useFormApi(),
          name = scoped ? useScope(n) : n,
          fieldApi = Object(react.useMemo)(
            function() {
              return buildFieldApi(formApi, name);
            },
            [name]
          );
        return fieldApi;
      }
      function useArrayField_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function useArrayField_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? useArrayField_ownKeys(Object(source), !0).forEach(function(key) {
                useArrayField_defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : useArrayField_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function useArrayField_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function useArrayField_toConsumableArray(arr) {
        return (
          (function useArrayField_arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return useArrayField_arrayLikeToArray(arr);
          })(arr) ||
          (function useArrayField_iterableToArray(iter) {
            if (
              ('undefined' != typeof Symbol && null != iter[Symbol.iterator]) ||
              null != iter['@@iterator']
            )
              return Array.from(iter);
          })(arr) ||
          useArrayField_unsupportedIterableToArray(arr) ||
          (function useArrayField_nonIterableSpread() {
            throw new TypeError(
              'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useArrayField_slicedToArray(arr, i) {
        return (
          (function useArrayField_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function useArrayField_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          useArrayField_unsupportedIterableToArray(arr, i) ||
          (function useArrayField_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useArrayField_unsupportedIterableToArray(o, minLen) {
        if (o) {
          if ('string' == typeof o)
            return useArrayField_arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          return (
            'Object' === n && o.constructor && (n = o.constructor.name),
            'Map' === n || 'Set' === n
              ? Array.from(o)
              : 'Arguments' === n ||
                /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                ? useArrayField_arrayLikeToArray(o, minLen)
                : void 0
          );
        }
      }
      function useArrayField_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var useArrayField_logger = Object(src_debug.a)(
          'informed:useArrayField\t'
        ),
        useArrayField_useArrayField = function useArrayField(_ref) {
          var userName = _ref.name,
            initialValue = _ref.initialValue,
            arrayFieldApiRef = _ref.arrayFieldApiRef,
            name = useScope(userName),
            formController = Object(react.useContext)(Context.f),
            fieldApi = useFieldApi(name),
            fieldsMap = useArrayField_slicedToArray(
              Object(react.useState)(function() {
                return new Map();
              }),
              1
            )[0],
            _useStateWithGetter2 = useArrayField_slicedToArray(
              useStateWithGetter(function() {
                return formController.getValue(name)
                  ? formController.getValue(name)
                  : initialValue || formController.getInitialValue(name) || [];
              }),
              3
            ),
            initialValues = _useStateWithGetter2[0],
            setInitialValues = _useStateWithGetter2[1],
            getInitialValues = _useStateWithGetter2[2],
            _useStateWithGetter4 = useArrayField_slicedToArray(
              useStateWithGetter(
                initialValues
                  ? initialValues.map(function() {
                      return uuidv4();
                    })
                  : []
              ),
              3
            ),
            keys = _useStateWithGetter4[0],
            setKeys = _useStateWithGetter4[1],
            getKeys = _useStateWithGetter4[2],
            swap = function swap(a, b) {
              useArrayField_logger(
                'Swapping',
                ''
                  .concat(name, '[')
                  .concat(a, '] and ')
                  .concat(name, '[')
                  .concat(b, ']')
              ),
                formController.swap(name, a, b);
              var ks = getKeys(),
                newKeys = useArrayField_toConsumableArray(ks);
              ks[a] && ks[b]
                ? ((newKeys[a] = ks[b]), (newKeys[b] = ks[a]))
                : console.warn(
                    'Attempted to swap '
                      .concat(a, ' with ')
                      .concat(b, ' but one of them does not exist :(')
                  ),
                setKeys(newKeys);
            },
            add = function add() {
              var ks = getKeys();
              ks.push(uuidv4()), setKeys(useArrayField_toConsumableArray(ks));
            },
            addWithInitialValue = function addWithInitialValue(initialValue) {
              var ks = getKeys();
              ks.push(uuidv4()), setKeys(useArrayField_toConsumableArray(ks));
              var newInitialValues = useArrayField_toConsumableArray(
                getInitialValues()
              );
              (newInitialValues[ks.length - 1] = initialValue),
                setInitialValues(newInitialValues);
            },
            reset = function reset() {
              formController.remove(name);
              var initVals =
                initialValue || formController.getInitialValue(name) || [];
              setInitialValues(initVals);
              var resetKeys = initVals
                ? initVals.map(function() {
                    return uuidv4();
                  })
                : [];
              setKeys(resetKeys);
            },
            meta = {
              name: name,
              initialValue: initialValue,
              fieldApi: useArrayField_objectSpread(
                useArrayField_objectSpread({}, fieldApi),
                {},
                { reset: reset }
              )
            },
            metaRef = Object(react.useRef)(meta);
          (metaRef.current = meta),
            Object(react.useEffect)(
              function() {
                return (
                  formController.register(name, metaRef),
                  function() {
                    formController.deregister(name);
                  }
                );
              },
              [name]
            );
          var fields = keys.map(function(key, i) {
              var arrayFieldItemApi = {
                remove: function remove() {
                  return (function remove(i) {
                    var ks = getKeys();
                    formController.lockRemoval({
                      index: ks.length - 1,
                      name: name
                    });
                    var newKeys = ks
                      .slice(0, i)
                      .concat(ks.slice(i + 1, ks.length));
                    setKeys(newKeys);
                    var initVals = getInitialValues(),
                      newInitialValues = initVals
                        .slice(0, i)
                        .concat(initVals.slice(i + 1, initVals.length));
                    setInitialValues(newInitialValues),
                      formController.pullOut(
                        ''.concat(name, '[').concat(i, ']')
                      );
                  })(i);
                }
              };
              return {
                arrayFieldItemApi: arrayFieldItemApi,
                arrayFieldItemState: {
                  initialValue: initialValues && initialValues[i],
                  key: key,
                  name: ''.concat(name, '[').concat(i, ']'),
                  index: i,
                  parent: name
                }
              };
            }),
            arrayFieldApi = Object(react.useMemo)(function() {
              return {
                add: add,
                swap: swap,
                addWithInitialValue: addWithInitialValue,
                reset: reset
              };
            }, []);
          arrayFieldApiRef && (arrayFieldApiRef.current = arrayFieldApi);
          var arrayFieldState = { fields: fields, name: name },
            wrappedController = Object(react.useMemo)(
              function() {
                return useArrayField_objectSpread(
                  useArrayField_objectSpread({}, formController),
                  {},
                  {
                    register: function register(n, m) {
                      fieldsMap.set(n, m), formController.register(n, m);
                    },
                    deregister: function deregister(n, m) {
                      fieldsMap.delete(n), formController.deregister(n, m);
                    },
                    getInitialValue: function getInitialValue(fieldName) {
                      if (
                        RegExp(''.concat(name, '\\[[0-9]+\\]')).test(fieldName)
                      ) {
                        var path = fieldName.replace(name, ''),
                          v = ObjectMap.get(getInitialValues(), path);
                        return (
                          useArrayField_logger(
                            'Resetting '.concat(path, ' to ').concat(v)
                          ),
                          v
                        );
                      }
                      return formController.getInitialValue(fieldName);
                    }
                  }
                );
              },
              [name]
            );
          return {
            render: function render(children) {
              return react_default.a.createElement(
                Context.f.Provider,
                { value: wrappedController },
                react_default.a.createElement(
                  Context.a.Provider,
                  { value: arrayFieldApi },
                  react_default.a.createElement(
                    Context.d.Provider,
                    { value: arrayFieldState },
                    children
                  )
                )
              );
            },
            arrayFieldState: arrayFieldState,
            arrayFieldApi: arrayFieldApi
          };
        };
      function useForceUpdate_slicedToArray(arr, i) {
        return (
          (function useForceUpdate_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function useForceUpdate_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function useForceUpdate_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o)
              return useForceUpdate_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return useForceUpdate_arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function useForceUpdate_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useForceUpdate_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var useForceUpdate_useForceUpdate = function useForceUpdate() {
          var updateState = useForceUpdate_slicedToArray(
            react_default.a.useState(),
            2
          )[1];
          return react_default.a.useCallback(function() {
            return updateState({});
          }, []);
        },
        useFieldState_debug = Object(src_debug.a)('informed:useFieldState\t'),
        useFieldState_useFieldState = function useFieldState(n) {
          var scoped =
              !(arguments.length > 1 && void 0 !== arguments[1]) ||
              arguments[1],
            name = scoped ? useScope(n) : n,
            formController = useFormController(),
            forceUpdate = useForceUpdate_useForceUpdate();
          return (
            Object(react.useEffect)(
              function() {
                var listener = function listener(target) {
                  ('_ALL_' === target ||
                    target === name ||
                    (target && isChild(name, target))) &&
                    (useFieldState_debug('Updating', name), forceUpdate());
                };
                return (
                  formController.emitter.on('field', listener),
                  forceUpdate(),
                  function() {
                    formController.emitter.removeListener('field', listener);
                  }
                );
              },
              [name]
            ),
            formController.getFieldState(name)
          );
        };
      var _excluded = ['relevant', 'relevanceWhen', 'relevanceDeps', 'name'],
        _excluded2 = ['children'];
      function ArrayField_slicedToArray(arr, i) {
        return (
          (function ArrayField_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function ArrayField_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function ArrayField_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o)
              return ArrayField_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return ArrayField_arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function ArrayField_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function ArrayField_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function ArrayField_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function ArrayField_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ArrayField_ownKeys(Object(source), !0).forEach(function(key) {
                ArrayField_defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : ArrayField_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function ArrayField_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function _extends() {
        return (
          (_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          _extends.apply(this, arguments)
        );
      }
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var ArrayField_debug = Object(src_debug.a)('informed:ArrayField\t'),
        ArrayField_ArrayField = function ArrayField(_ref) {
          var relevant = _ref.relevant,
            relevanceWhen = _ref.relevanceWhen,
            relevanceDeps = _ref.relevanceDeps,
            name = _ref.name,
            props = _objectWithoutProperties(_ref, _excluded);
          return relevant
            ? react_default.a.createElement(
                Relevant_Relevant,
                {
                  when: relevant,
                  relevanceWhen: relevanceWhen,
                  relevanceDeps: relevanceDeps
                },
                react_default.a.createElement(
                  ArrayField_ArrayFieldWrapper,
                  _extends({ name: name }, props)
                )
              )
            : react_default.a.createElement(
                ArrayField_ArrayFieldWrapper,
                _extends({ name: name }, props)
              );
        },
        ArrayField_ArrayFieldWrapper = function ArrayFieldWrapper(_ref2) {
          var children = _ref2.children,
            props = _objectWithoutProperties(_ref2, _excluded2),
            _useArrayField = useArrayField_useArrayField(props),
            render = _useArrayField.render,
            arrayFieldState = _useArrayField.arrayFieldState,
            arrayFieldApi = _useArrayField.arrayFieldApi;
          return render(
            'function' == typeof children
              ? children(
                  ArrayField_objectSpread(
                    ArrayField_objectSpread(
                      {
                        arrayFieldApi: arrayFieldApi,
                        arrayFieldState: arrayFieldState
                      },
                      arrayFieldApi
                    ),
                    arrayFieldState
                  )
                )
              : children
          );
        },
        ArrayField_ArrayFieldItem = function ArrayFieldItem(_ref3) {
          var arrayFieldItemState = _ref3.arrayFieldItemState,
            arrayFieldItemApi = _ref3.arrayFieldItemApi,
            children = _ref3.children,
            formController = useFormController(),
            fieldsMap = ArrayField_slicedToArray(
              Object(react.useState)(function() {
                return new Map();
              }),
              1
            )[0],
            subState = useFieldState_useFieldState(arrayFieldItemState.name),
            itemApi = (function useScopedApi(scope) {
              var formApi = useFormApi(),
                scopedFormApi = Object(react.useMemo)(
                  function() {
                    return (function buildScopedFormApi(scope, formApi) {
                      return {
                        getValue: function getValue(field) {
                          return formApi.getValue(
                            ''.concat(scope, '.').concat(field)
                          );
                        },
                        setValue: function setValue(field, value, e, key) {
                          return formApi.setValue(
                            ''.concat(scope, '.').concat(field),
                            value,
                            e,
                            key
                          );
                        },
                        getTouched: function getTouched(field) {
                          return formApi.getTouched(
                            ''.concat(scope, '.').concat(field)
                          );
                        },
                        setTouched: function setTouched(field, value) {
                          return formApi.setTouched(
                            ''.concat(scope, '.').concat(field),
                            value
                          );
                        },
                        getFocused: function getFocused(field) {
                          return formApi.getFocused(
                            ''.concat(scope, '.').concat(field)
                          );
                        },
                        setFocused: function setFocused(field, value) {
                          return formApi.setFocused(
                            ''.concat(scope, '.').concat(field),
                            value
                          );
                        },
                        getError: function getError(field) {
                          return formApi.getError(
                            ''.concat(scope, '.').concat(field)
                          );
                        },
                        setError: function setError(field, value) {
                          return formApi.setError(
                            ''.concat(scope, '.').concat(field),
                            value
                          );
                        },
                        resetField: function resetField(field) {
                          return formApi.resetField(
                            ''.concat(scope, '.').concat(field)
                          );
                        },
                        validate: function validate(field) {
                          return formApi.validate(
                            ''.concat(scope, '.').concat(field)
                          );
                        },
                        getDirty: function getDirty(field) {
                          return formApi.getDirty(
                            ''.concat(scope, '.').concat(field)
                          );
                        },
                        getPristine: function getPristine(field) {
                          return formApi.getPristine(
                            ''.concat(scope, '.').concat(field)
                          );
                        },
                        getMaskedValue: function getMaskedValue(field) {
                          return formApi.getMaskedValue(
                            ''.concat(scope, '.').concat(field)
                          );
                        }
                      };
                    })(scope, formApi);
                  },
                  [scope]
                );
              return scopedFormApi;
            })(arrayFieldItemState.name),
            wrappedController = Object(react.useMemo)(
              function() {
                return ArrayField_objectSpread(
                  ArrayField_objectSpread({}, formController),
                  {},
                  {
                    register: function register(n, m) {
                      fieldsMap.set(n, m), formController.register(n, m);
                    },
                    deregister: function deregister(n, m) {
                      fieldsMap.delete(n), formController.deregister(n, m);
                      var lockedUntil = formController.getRemovalLocked();
                      ArrayField_debug(
                        'DEREGISTER',
                        n,
                        'SIZE',
                        fieldsMap.size,
                        'INDEX',
                        arrayFieldItemState.index,
                        'LOCKEDUNTIL',
                        lockedUntil
                      ),
                        null == lockedUntil ||
                          lockedUntil.index !== arrayFieldItemState.index ||
                          lockedUntil.name !== arrayFieldItemState.parent ||
                          Array.from(fieldsMap.keys()).some(function(k) {
                            return k.includes(
                              ''
                                .concat(arrayFieldItemState.parent, '[')
                                .concat(lockedUntil.index, ']')
                            );
                          }) ||
                          (ArrayField_debug('UNLOCKING'),
                          formController.unlockRemoval());
                    }
                  }
                );
              },
              [arrayFieldItemState.index]
            ),
            reset = Object(react.useCallback)(
              function() {
                fieldsMap.forEach(function(fieldMeta) {
                  fieldMeta.current.fieldApi.reset();
                });
              },
              [arrayFieldItemState.name, arrayFieldItemState.index]
            ),
            arrayFieldStateValue = ArrayField_objectSpread(
              ArrayField_objectSpread({}, arrayFieldItemState),
              {},
              {
                values: subState.value,
                errors: subState.error,
                touched: subState.touched
              }
            ),
            arrayFieldItemApiValue = Object(react.useMemo)(
              function() {
                return ArrayField_objectSpread(
                  ArrayField_objectSpread(
                    ArrayField_objectSpread({}, arrayFieldItemApi),
                    itemApi
                  ),
                  {},
                  { reset: reset }
                );
              },
              [arrayFieldItemState.name, arrayFieldItemState.index]
            ),
            memoizedChildren = Object(react.useMemo)(
              function() {
                return (
                  ArrayField_debug('Rendering'),
                  children(
                    ArrayField_objectSpread(
                      ArrayField_objectSpread({}, arrayFieldItemApiValue),
                      {},
                      {
                        name: arrayFieldItemState.name,
                        index: arrayFieldItemState.index
                      }
                    )
                  )
                );
              },
              [arrayFieldItemState.name, arrayFieldItemState.index]
            );
          return 'function' == typeof children
            ? react_default.a.createElement(
                Context.f.Provider,
                { value: wrappedController },
                react_default.a.createElement(
                  Context.b.Provider,
                  { value: arrayFieldItemApiValue },
                  react_default.a.createElement(
                    Context.c.Provider,
                    { value: arrayFieldStateValue },
                    react_default.a.createElement(
                      Context.m.Provider,
                      { value: arrayFieldItemState.name },
                      memoizedChildren
                    )
                  )
                )
              )
            : react_default.a.createElement(
                Context.f.Provider,
                { value: wrappedController },
                react_default.a.createElement(
                  Context.b.Provider,
                  { value: arrayFieldItemApi },
                  react_default.a.createElement(
                    Context.c.Provider,
                    { value: arrayFieldItemState },
                    react_default.a.createElement(
                      Context.m.Provider,
                      { value: arrayFieldItemState.name },
                      children
                    )
                  )
                )
              );
        };
      function useFormState() {
        return Object(react.useContext)(Context.g);
      }
      (ArrayField_ArrayField.Items = function(_ref4) {
        var children = _ref4.children;
        return Object(react.useContext)(Context.d).fields.map(function(_ref5) {
          var arrayFieldItemState = _ref5.arrayFieldItemState,
            arrayFieldItemApi = _ref5.arrayFieldItemApi,
            key = arrayFieldItemState.key;
          return react_default.a.createElement(
            ArrayField_ArrayFieldItem,
            {
              key: key,
              arrayFieldItemApi: arrayFieldItemApi,
              arrayFieldItemState: arrayFieldItemState
            },
            children
          );
        });
      }),
        (ArrayField_ArrayField.__docgenInfo = {
          description: '',
          methods: [
            {
              name: 'Items',
              docblock: null,
              modifiers: ['static'],
              params: [{ name: '{ children }', type: null }],
              returns: null
            }
          ],
          displayName: 'ArrayField'
        }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/ArrayField.js'] = {
            name: 'ArrayField',
            docgenInfo: ArrayField_ArrayField.__docgenInfo,
            path: 'src/components/ArrayField.js'
          });
      var Debug_Debug = function Debug(props) {
        var formState = useFormState(),
          displayState = {};
        return (
          Object.keys(props).length > 0
            ? Object.keys(props).forEach(function(key) {
                displayState[key] = formState[key];
              })
            : (displayState = formState),
          react_default.a.createElement(
            'pre',
            null,
            react_default.a.createElement(
              'code',
              null,
              JSON.stringify(displayState, null, 2)
            )
          )
        );
      };
      (Debug_Debug.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Debug'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/Debug.js'] = {
            name: 'Debug',
            docgenInfo: Debug_Debug.__docgenInfo,
            path: 'src/components/Debug.js'
          });
      var DebugField_excluded = ['name'];
      function DebugField_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function DebugField_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var DebugField_DebugField = function DebugField(_ref) {
        var name = _ref.name,
          props = DebugField_objectWithoutProperties(_ref, DebugField_excluded),
          fieldState = useFieldState_useFieldState(name),
          displayState = {};
        return (
          Object.keys(props).length > 0
            ? Object.keys(props).forEach(function(key) {
                displayState[key] = fieldState[key];
              })
            : (displayState = fieldState),
          react_default.a.createElement(
            'pre',
            null,
            react_default.a.createElement(
              'code',
              null,
              JSON.stringify(displayState, null, 2)
            )
          )
        );
      };
      (DebugField_DebugField.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'DebugField'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/DebugField.js'] = {
            name: 'DebugField',
            docgenInfo: DebugField_DebugField.__docgenInfo,
            path: 'src/components/DebugField.js'
          });
      var Scope_Scope = function Scope(_ref) {
        var newScope,
          scope = _ref.scope,
          children = _ref.children,
          parentScope = Object(react.useContext)(Context.m);
        return (
          (newScope = parentScope
            ? ''.concat(parentScope, '.').concat(scope)
            : scope),
          react_default.a.createElement(
            Context.m.Provider,
            { value: newScope },
            children
          )
        );
      };
      function useCursorPosition_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function useCursorPosition_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? useCursorPosition_ownKeys(Object(source), !0).forEach(function(
                key
              ) {
                useCursorPosition_defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : useCursorPosition_ownKeys(Object(source)).forEach(function(
                  key
                ) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function useCursorPosition_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function useCursorPosition_slicedToArray(arr, i) {
        return (
          (function useCursorPosition_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function useCursorPosition_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function useCursorPosition_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o)
              return useCursorPosition_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return useCursorPosition_arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function useCursorPosition_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useCursorPosition_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      (Scope_Scope.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Scope'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/Scope.js'] = {
            name: 'Scope',
            docgenInfo: Scope_Scope.__docgenInfo,
            path: 'src/components/Scope.js'
          });
      var useUpdateEffect_useUpdateEffect = function useUpdateEffect(
          effect,
          deps
        ) {
          var firstRef = Object(react.useRef)(!0),
            isFirstMount = firstRef.current;
          Object(react.useEffect)(function() {
            if (!isFirstMount) return effect();
            firstRef.current = !1;
          }, deps);
        },
        useField_excluded = [
          'id',
          'type',
          'name',
          'onBlur',
          'onChange',
          'onFocus',
          'validate',
          'asyncValidate',
          'yupSchema',
          'multiple',
          'field',
          'keepState',
          'keepStateIfRelevant',
          'debug',
          'inputRef',
          'inputRefs',
          'relevant',
          'defaultValue',
          'initialValue',
          'autocomplete',
          'showErrorIfError',
          'showErrorIfTouched',
          'showErrorIfDirty',
          'formatter',
          'parser',
          'maintainCursor',
          'required',
          'minimum',
          'maximum',
          'minLength',
          'maxLength',
          'pattern',
          'validateOnMount',
          'validateOn',
          'validateWhen',
          'formatterDependencies',
          'formController',
          'initialize',
          'errorMessage',
          'initializeValueIfPristine',
          'relevanceWhen',
          'relevanceDeps'
        ];
      function useField_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function useField_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function useField_toConsumableArray(arr) {
        return (
          (function useField_arrayWithoutHoles(arr) {
            if (Array.isArray(arr)) return useField_arrayLikeToArray(arr);
          })(arr) ||
          (function useField_iterableToArray(iter) {
            if (
              ('undefined' != typeof Symbol && null != iter[Symbol.iterator]) ||
              null != iter['@@iterator']
            )
              return Array.from(iter);
          })(arr) ||
          useField_unsupportedIterableToArray(arr) ||
          (function useField_nonIterableSpread() {
            throw new TypeError(
              'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useField_slicedToArray(arr, i) {
        return (
          (function useField_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function useField_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          useField_unsupportedIterableToArray(arr, i) ||
          (function useField_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useField_unsupportedIterableToArray(o, minLen) {
        if (o) {
          if ('string' == typeof o) return useField_arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          return (
            'Object' === n && o.constructor && (n = o.constructor.name),
            'Map' === n || 'Set' === n
              ? Array.from(o)
              : 'Arguments' === n ||
                /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                ? useField_arrayLikeToArray(o, minLen)
                : void 0
          );
        }
      }
      function useField_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function useField_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function useField_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var useField_logger = Object(src_debug.a)('informed:useField\t'),
        useField_useField = function useField(_ref) {
          var id = _ref.id,
            type = _ref.type,
            userName = _ref.name,
            onBlur = _ref.onBlur,
            onChange = _ref.onChange,
            onFocus = _ref.onFocus,
            validationFunc = _ref.validate,
            asyncValidate = _ref.asyncValidate,
            yupSchema = _ref.yupSchema,
            multiple = _ref.multiple,
            field = _ref.field,
            keepState = _ref.keepState,
            keepStateIfRelevant = _ref.keepStateIfRelevant,
            debug = _ref.debug,
            inputRef = _ref.inputRef,
            inputRefs = _ref.inputRefs,
            relevant = _ref.relevant,
            defaultValue = _ref.defaultValue,
            userInitialValue = _ref.initialValue,
            userAutocomplete = _ref.autocomplete,
            userShowErrorIfError = _ref.showErrorIfError,
            userShowErrorIfTouched = _ref.showErrorIfTouched,
            userShowErrorIfDirty = _ref.showErrorIfDirty,
            formatter = _ref.formatter,
            parser = _ref.parser,
            userMaintainCursor = _ref.maintainCursor,
            required = _ref.required,
            minimum = _ref.minimum,
            maximum = _ref.maximum,
            minLength = _ref.minLength,
            maxLength = _ref.maxLength,
            pattern = _ref.pattern,
            userValidateOnMount = _ref.validateOnMount,
            userValidateOn = _ref.validateOn,
            _ref$validateWhen = _ref.validateWhen,
            validateWhen =
              void 0 === _ref$validateWhen ? [] : _ref$validateWhen,
            _ref$formatterDepende = _ref.formatterDependencies,
            formatterDependencies =
              void 0 === _ref$formatterDepende ? [] : _ref$formatterDepende,
            userFormController = _ref.formController,
            initialize = _ref.initialize,
            errorMessage = _ref.errorMessage,
            initializeValueIfPristine = _ref.initializeValueIfPristine,
            _ref$relevanceWhen = _ref.relevanceWhen,
            relevanceWhen =
              void 0 === _ref$relevanceWhen ? [] : _ref$relevanceWhen,
            _ref$relevanceDeps = _ref.relevanceDeps,
            relevanceDeps =
              void 0 === _ref$relevanceDeps ? [] : _ref$relevanceDeps,
            userProps = useField_objectWithoutProperties(
              _ref,
              useField_excluded
            ),
            name = useScope(null != userName ? userName : field);
          name || console.warn('name is a required prop!!!!');
          var maintainCursor =
              null != userMaintainCursor ? userMaintainCursor : !!formatter,
            formController =
              null != userFormController
                ? userFormController
                : useFormController(),
            autocomplete =
              null != userAutocomplete
                ? userAutocomplete
                : formController.options.current.autocomplete,
            showErrorIfError =
              null != userShowErrorIfError
                ? userShowErrorIfError
                : formController.options.current.showErrorIfError,
            showErrorIfTouched =
              null != userShowErrorIfTouched
                ? userShowErrorIfTouched
                : formController.options.current.showErrorIfTouched,
            showErrorIfDirty =
              null != userShowErrorIfDirty
                ? userShowErrorIfDirty
                : formController.options.current.showErrorIfDirty,
            validateOnMount =
              null != userValidateOnMount
                ? userValidateOnMount
                : formController.options.current.validateOnMount,
            validateOn =
              null != userValidateOn
                ? userValidateOn
                : formController.options.current.validateOn,
            getInitialValue = function getInitialValue() {
              var _ref2;
              return null !==
                (_ref2 =
                  null != userInitialValue
                    ? userInitialValue
                    : formController.getInitialValue(name)) && void 0 !== _ref2
                ? _ref2
                : defaultValue;
            },
            initialValue = useField_slicedToArray(
              Object(react.useState)(function() {
                return getInitialValue();
              }),
              1
            )[0],
            fieldState = useFieldState_useFieldState(name, !1),
            fieldApi = useFieldApi(name, !1),
            inMultistep = Object(react.useContext)(Context.j),
            isRelevant = useRelevance_useRelevance({
              name: name,
              relevant: relevant,
              relevanceWhen: relevanceWhen,
              relevanceDeps: relevanceDeps
            }),
            relevantContext = Object(react.useContext)(Context.l),
            internalRef = Object(react.useRef)(null),
            ref = react_default.a.useMemo(function() {
              return inputRef || internalRef;
            }, []),
            fieldId = useField_slicedToArray(
              Object(react.useState)(function() {
                return id || uuidv4();
              }),
              1
            )[0],
            _useCursorPosition = (function useCursorPosition(_ref) {
              var value = _ref.value,
                inputRef = _ref.inputRef,
                inputRefs = _ref.inputRefs,
                _ref$maintainCursor = _ref.maintainCursor,
                maintainCursor =
                  void 0 !== _ref$maintainCursor && _ref$maintainCursor,
                initialCursor = Object(react.useMemo)(function() {
                  if (!inputRefs) return 0;
                  var initOffset = {};
                  Object.keys(inputRefs).forEach(function(key) {
                    return (initOffset[key] = 0);
                  });
                }, []),
                _useStateWithGetter2 = useCursorPosition_slicedToArray(
                  useStateWithGetter(initialCursor),
                  3
                ),
                cursor = _useStateWithGetter2[0],
                setCursor = _useStateWithGetter2[1],
                getCursor = _useStateWithGetter2[2],
                _useStateWithGetter4 = useCursorPosition_slicedToArray(
                  useStateWithGetter(initialCursor),
                  3
                ),
                cursorOffset = _useStateWithGetter4[0],
                setCursorOffset = _useStateWithGetter4[1],
                getCursorOffset = _useStateWithGetter4[2],
                setCursorCallback = Object(react.useCallback)(function(c, key) {
                  if (key) {
                    var newCursor = useCursorPosition_objectSpread(
                      {},
                      getCursor()
                    );
                    (newCursor[key] = c), setCursor(newCursor);
                  } else setCursor(c);
                }, []),
                setCursorOffsetCallback = Object(react.useCallback)(function(
                  c,
                  key
                ) {
                  if (key) {
                    var newCursor = useCursorPosition_objectSpread(
                      {},
                      getCursor()
                    );
                    (newCursor[key] = c[key]), setCursorOffset(newCursor);
                  } else setCursorOffset(c);
                },
                []);
              return (
                Object(react.useEffect)(
                  function() {
                    if (!inputRefs && null != inputRef.current && getCursor()) {
                      var cursorLoc = getCursor() + getCursorOffset();
                      0 != getCursorOffset() && maintainCursor
                        ? inputRef.current.setSelectionRange(
                            cursorLoc + 1,
                            cursorLoc + 1
                          )
                        : maintainCursor &&
                          inputRef.current.setSelectionRange(
                            cursorLoc,
                            cursorLoc
                          );
                    }
                    inputRefs &&
                      getCursor() &&
                      Object.keys(inputRefs).forEach(function(key) {
                        var cursorLoc =
                          getCursor()[key] + getCursorOffset()[key];
                        0 != getCursorOffset()[key] && maintainCursor
                          ? inputRefs[key].current.setSelectionRange(
                              cursorLoc + 1,
                              cursorLoc + 1
                            )
                          : maintainCursor &&
                            inputRefs[key].current.setSelectionRange(
                              cursorLoc,
                              cursorLoc
                            );
                      });
                  },
                  [value]
                ),
                {
                  setCursorOffset: setCursorOffsetCallback,
                  setCursor: setCursorCallback,
                  cursor: cursor,
                  getCursor: getCursor,
                  cursorOffset: cursorOffset
                }
              );
            })({
              value: fieldState.value,
              inputRef: ref,
              maintainCursor: maintainCursor,
              inputRefs: inputRefs
            }),
            setCursor = _useCursorPosition.setCursor,
            setCursorOffset = _useCursorPosition.setCursorOffset,
            validate = Object(react.useMemo)(function() {
              return generateValidationFunction(validationFunc, yupSchema, {
                required: required,
                minimum: minimum,
                maximum: maximum,
                minLength: minLength,
                maxLength: maxLength,
                pattern: pattern,
                getErrorMessage: function getErrorMessage(key) {
                  return formController.getErrorMessage(key, name);
                }
              });
            }, []),
            meta = {
              name: name,
              type: type,
              onBlur: onBlur,
              onChange: onChange,
              onFocus: onFocus,
              initialValue: initialValue,
              keepState: keepState,
              keepStateIfRelevant: keepStateIfRelevant,
              initializeValueIfPristine: initializeValueIfPristine,
              fieldApi: fieldApi,
              getInitialValue: getInitialValue,
              formatter: formatter,
              parser: parser,
              setCursorOffset: setCursorOffset,
              setCursor: setCursor,
              validate: validate,
              yupSchema: yupSchema,
              validateOn: null != validateOn ? validateOn : 'blur',
              validateOnMount: validateOnMount,
              validateWhen: validateWhen,
              showErrorIfError: showErrorIfError,
              showErrorIfTouched: showErrorIfTouched,
              showErrorIfDirty: showErrorIfDirty,
              asyncValidate: asyncValidate,
              initialize: initialize,
              errorMessage: errorMessage
            },
            metaRef = Object(react.useRef)(meta);
          (metaRef.current = meta),
            Object(react.useEffect)(
              function() {
                return (
                  useField_logger('Register', name, metaRef.current),
                  formController.register(name, metaRef),
                  function() {
                    useField_logger('De-Register', name, metaRef.current),
                      formController.deregister(name);
                  }
                );
              },
              [name]
            ),
            Object(react.useEffect)(
              function() {
                var metaInfo = metaRef.current;
                isRelevant ||
                  keepState ||
                  (useField_logger('RELEVANT REMOVING', metaInfo.name),
                  formController.remove(metaInfo.name)),
                  isRelevant &&
                    (useField_logger('RELEVANT Initialize', metaInfo.name),
                    formController.initialize(name, metaRef));
              },
              [isRelevant]
            ),
            Object(react.useEffect)(function() {
              return function() {
                var keepIt = !1,
                  metaInfo = metaRef.current;
                useField_logger('CLEANUP REMOVING', metaInfo.name),
                  metaInfo.keepState
                    ? (keepIt = !0)
                    : relevantContext && !relevantContext.relevant()
                      ? (keepIt = !1)
                      : (keepStateIfRelevant || inMultistep) && (keepIt = !0),
                  keepIt || formController.remove(metaInfo.name);
              };
            }, []),
            useUpdateEffect_useUpdateEffect(function() {
              formController.reformat(metaRef.current.name);
            }, useField_toConsumableArray(formatterDependencies)),
            useFieldSubscription_useFieldSubscription(
              'field-value',
              validateWhen,
              function(target) {
                useField_logger(
                  'revalidating for '
                    .concat(metaRef.current.name, ' because of ')
                    .concat(target)
                ),
                  formController.validateField(metaRef.current.name);
              }
            ),
            Object(react.useLayoutEffect)(function() {
              debug &&
                ref &&
                ref.current &&
                ((ref.current.style.background = 'orange'),
                setTimeout(function() {
                  ref.current && (ref.current.style.background = 'grey');
                }, 300));
            });
          var changeHandler = generateOnChange({
              fieldType: type,
              setValue: fieldApi.setValue,
              multiple: multiple,
              ref: ref
            }),
            blurHandler = generateOnBlur({ setTouched: fieldApi.setTouched }),
            focusHandler = generateOnFocus({ setFocused: fieldApi.setFocused }),
            hookedValue = generateValue({
              fieldType: type,
              maskedValue: fieldState.maskedValue,
              multiple: userProps.multiple,
              value: fieldState.value
            }),
            recombinedUserProps = (function useField_objectSpread(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = null != arguments[i] ? arguments[i] : {};
                i % 2
                  ? useField_ownKeys(Object(source), !0).forEach(function(key) {
                      useField_defineProperty(target, key, source[key]);
                    })
                  : Object.getOwnPropertyDescriptors
                    ? Object.defineProperties(
                        target,
                        Object.getOwnPropertyDescriptors(source)
                      )
                    : useField_ownKeys(Object(source)).forEach(function(key) {
                        Object.defineProperty(
                          target,
                          key,
                          Object.getOwnPropertyDescriptor(source, key)
                        );
                      });
              }
              return target;
            })(
              {
                id: fieldId,
                name: name,
                type: type,
                multiple: multiple,
                autoComplete: autocomplete,
                required: required,
                min: minimum,
                max: maximum,
                minLength: minLength,
                maxLength: maxLength,
                pattern: pattern
              },
              userProps
            );
          return {
            fieldState: fieldState,
            fieldApi: fieldApi,
            userProps: recombinedUserProps,
            informed: {
              onChange: changeHandler,
              onBlur: blurHandler,
              onFocus: focusHandler,
              value: hookedValue
            },
            ref: ref,
            render: function render(children) {
              return isRelevant ? children : null;
            }
          };
        },
        Input_excluded = ['label', 'id'];
      function Input_extends() {
        return (
          (Input_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          Input_extends.apply(this, arguments)
        );
      }
      function Input_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function Input_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var Input = react_default.a.memo(function(props) {
        var _useField = useField_useField(props),
          render = _useField.render,
          userProps = _useField.userProps,
          ref = _useField.ref,
          fieldState = _useField.fieldState,
          fieldApi = _useField.fieldApi,
          setValue = fieldApi.setValue,
          setTouched = fieldApi.setTouched,
          setFocused = fieldApi.setFocused,
          maskedValue = fieldState.maskedValue,
          showError = fieldState.showError,
          error = fieldState.error,
          label = userProps.label,
          id = userProps.id,
          rest = Input_objectWithoutProperties(userProps, Input_excluded);
        return render(
          react_default.a.createElement(
            react_default.a.Fragment,
            null,
            label
              ? react_default.a.createElement('label', { htmlFor: id }, label)
              : null,
            react_default.a.createElement(
              'input',
              Input_extends({ ref: ref, id: id }, rest, {
                value: maskedValue || 0 === maskedValue ? maskedValue : '',
                onChange: function onChange(e) {
                  setValue(e.target.value, e);
                },
                onBlur: function onBlur(e) {
                  setTouched(!0, e);
                },
                onFocus: function onFocus(e) {
                  setFocused(!0, e);
                },
                'aria-invalid': !!showError,
                'aria-describedby': ''.concat(id, '-error')
              })
            ),
            showError
              ? react_default.a.createElement(
                  'small',
                  { role: 'alert', id: ''.concat(id, '-error') },
                  error
                )
              : null
          )
        );
      });
      function TextArea_extends() {
        return (
          (TextArea_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          TextArea_extends.apply(this, arguments)
        );
      }
      var TextArea = react_default.a.memo(function(props) {
          var _useField = useField_useField(props),
            render = _useField.render,
            userProps = _useField.userProps,
            ref = _useField.ref,
            fieldState = _useField.fieldState,
            fieldApi = _useField.fieldApi,
            setValue = fieldApi.setValue,
            setTouched = fieldApi.setTouched,
            setFocused = fieldApi.setFocused,
            maskedValue = fieldState.maskedValue,
            showError = fieldState.showError,
            error = fieldState.error,
            label = userProps.label,
            id = userProps.id;
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              label
                ? react_default.a.createElement('label', { htmlFor: id }, label)
                : null,
              react_default.a.createElement(
                'textarea',
                TextArea_extends({ ref: ref }, userProps, {
                  value: maskedValue || '',
                  onChange: function onChange(e) {
                    setValue(e.target.value, e);
                  },
                  onBlur: function onBlur(e) {
                    setTouched(!0, e);
                  },
                  onFocus: function onFocus(e) {
                    setFocused(!0, e);
                  },
                  'aria-invalid': !!showError,
                  'aria-describedby': ''.concat(id, '-error')
                })
              ),
              showError
                ? react_default.a.createElement(
                    'small',
                    { role: 'alert', id: ''.concat(id, '-error') },
                    error
                  )
                : null
            )
          );
        }),
        Select_excluded = [
          'id',
          'onBlur',
          'onChange',
          'multiple',
          'label',
          'options',
          'children'
        ];
      function Select_extends() {
        return (
          (Select_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          Select_extends.apply(this, arguments)
        );
      }
      function Select_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function Select_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var Select_Select = function Select(props) {
          var _useField = useField_useField(props),
            render = _useField.render,
            userProps = _useField.userProps,
            fieldState = _useField.fieldState,
            fieldApi = _useField.fieldApi,
            ref = _useField.ref,
            setValue = fieldApi.setValue,
            setTouched = fieldApi.setTouched,
            value = fieldState.value,
            showError = fieldState.showError,
            error = fieldState.error,
            id = userProps.id,
            _onBlur = userProps.onBlur,
            onChange = userProps.onChange,
            multiple = userProps.multiple,
            label = userProps.label,
            options = userProps.options,
            children = userProps.children,
            rest = Select_objectWithoutProperties(userProps, Select_excluded);
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              label
                ? react_default.a.createElement(
                    'label',
                    { htmlFor: id },
                    ' ',
                    label,
                    ' '
                  )
                : null,
              react_default.a.createElement(
                'select',
                Select_extends({}, rest, {
                  id: id,
                  multiple: multiple,
                  ref: ref,
                  value: value || (multiple ? [] : ''),
                  'aria-invalid': !!showError,
                  'aria-describedby': ''.concat(id, '-error'),
                  onChange: function handleChange(e) {
                    var selected = Array.from(ref.current)
                      .filter(function(option) {
                        return option.selected;
                      })
                      .map(function(option) {
                        return option.value;
                      });
                    setValue(multiple ? selected : selected[0] || ''),
                      onChange && e && onChange(e);
                  },
                  onBlur: function onBlur(e) {
                    setTouched(!0), _onBlur && _onBlur(e);
                  }
                }),
                options
                  ? options.map(function(option) {
                      return react_default.a.createElement(
                        'option',
                        {
                          key: option.value,
                          value: option.value,
                          disabled: option.disabled
                        },
                        option.label
                      );
                    })
                  : children
              ),
              showError
                ? react_default.a.createElement(
                    'small',
                    { role: 'alert', id: ''.concat(id, '-error') },
                    error
                  )
                : null
            )
          );
        },
        Checkbox_excluded = ['onBlur', 'onChange', 'id', 'label'];
      function Checkbox_extends() {
        return (
          (Checkbox_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          Checkbox_extends.apply(this, arguments)
        );
      }
      function Checkbox_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function Checkbox_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var Checkbox_Checkbox = function Checkbox(props) {
        var _useField = useField_useField(props),
          render = _useField.render,
          userProps = _useField.userProps,
          fieldState = _useField.fieldState,
          fieldApi = _useField.fieldApi,
          setValue = fieldApi.setValue,
          setTouched = fieldApi.setTouched,
          value = fieldState.value,
          error = fieldState.error,
          showError = fieldState.showError,
          _onBlur = userProps.onBlur,
          _onChange = userProps.onChange,
          id = userProps.id,
          label = userProps.label,
          rest = Checkbox_objectWithoutProperties(userProps, Checkbox_excluded);
        return render(
          react_default.a.createElement(
            react_default.a.Fragment,
            null,
            label
              ? react_default.a.createElement('label', { htmlFor: id }, label)
              : null,
            react_default.a.createElement(
              'input',
              Checkbox_extends({}, rest, {
                id: id,
                checked: !!value,
                'aria-invalid': !!showError,
                'aria-describedby': ''.concat(id, '-error'),
                onChange: function onChange(e) {
                  setValue(e.target.checked), _onChange && _onChange(e);
                },
                onBlur: function onBlur(e) {
                  setTouched(!0), _onBlur && _onBlur(e);
                },
                type: 'checkbox'
              })
            ),
            showError
              ? react_default.a.createElement(
                  'small',
                  { role: 'alert', id: ''.concat(id, '-error') },
                  error
                )
              : null
          )
        );
      };
      var Radio_excluded = ['label', 'value', 'onChange', 'onBlur'];
      function Radio_extends() {
        return (
          (Radio_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          Radio_extends.apply(this, arguments)
        );
      }
      function Radio_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function Radio_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var Radio_Radio = function Radio(_ref) {
        var label = _ref.label,
          value = _ref.value,
          _onChange = _ref.onChange,
          _onBlur = _ref.onBlur,
          props = Radio_objectWithoutProperties(_ref, Radio_excluded),
          _useRadioGroup = (function useRadioGroup() {
            return Object(react.useContext)(Context.k);
          })(),
          radioGroupApi = _useRadioGroup.radioGroupApi,
          radioGroupState = _useRadioGroup.radioGroupState,
          groupOnChange = _useRadioGroup.onChange,
          groupOnBlur = _useRadioGroup.onBlur,
          setValue = radioGroupApi.setValue,
          setTouched = radioGroupApi.setTouched,
          groupValue = radioGroupState.value,
          showError = radioGroupState.showError;
        return react_default.a.createElement(
          'label',
          null,
          label,
          react_default.a.createElement(
            'input',
            Radio_extends({}, props, {
              'aria-invalid': !!showError,
              value: value,
              checked: groupValue === value,
              onChange: function onChange(e) {
                e.target.checked &&
                  (setValue(value),
                  _onChange && _onChange(e),
                  groupOnChange && groupOnChange(e));
              },
              onBlur: function onBlur(e) {
                setTouched(!0),
                  _onBlur && _onBlur(e),
                  groupOnBlur && groupOnBlur(e);
              },
              type: 'radio'
            })
          )
        );
      };
      function RadioGroup_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function RadioGroup_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      (Radio_Radio.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Radio'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/form-fields/Radio.js'] = {
            name: 'Radio',
            docgenInfo: Radio_Radio.__docgenInfo,
            path: 'src/components/form-fields/Radio.js'
          });
      var RadioGroup_RadioGroup = function RadioGroup(props) {
        var _useField = useField_useField(props),
          fieldApi = _useField.fieldApi,
          fieldState = _useField.fieldState,
          userProps = _useField.userProps,
          groupContext = (function RadioGroup_objectSpread(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = null != arguments[i] ? arguments[i] : {};
              i % 2
                ? RadioGroup_ownKeys(Object(source), !0).forEach(function(key) {
                    RadioGroup_defineProperty(target, key, source[key]);
                  })
                : Object.getOwnPropertyDescriptors
                  ? Object.defineProperties(
                      target,
                      Object.getOwnPropertyDescriptors(source)
                    )
                  : RadioGroup_ownKeys(Object(source)).forEach(function(key) {
                      Object.defineProperty(
                        target,
                        key,
                        Object.getOwnPropertyDescriptor(source, key)
                      );
                    });
            }
            return target;
          })({ radioGroupApi: fieldApi, radioGroupState: fieldState }, props),
          label = userProps.label,
          id = userProps.id,
          options = userProps.options,
          children = userProps.children,
          showError = fieldState.showError,
          error = fieldState.error;
        return react_default.a.createElement(
          Context.k.Provider,
          { value: groupContext },
          react_default.a.createElement(
            'fieldset',
            { 'aria-describedby': ''.concat(id, '-error') },
            label ? react_default.a.createElement('legend', null, label) : null,
            options
              ? options.map(function(option) {
                  return react_default.a.createElement(
                    'label',
                    { key: option.value },
                    option.label,
                    ' ',
                    react_default.a.createElement(Radio_Radio, {
                      value: option.value
                    })
                  );
                })
              : children,
            showError
              ? react_default.a.createElement(
                  'small',
                  { role: 'alert', id: ''.concat(id, '-error') },
                  error
                )
              : null
          )
        );
      };
      function useArrayFieldApi() {
        return Object(react.useContext)(Context.a);
      }
      (RadioGroup_RadioGroup.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'RadioGroup'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES[
            'src/components/form-fields/RadioGroup.js'
          ] = {
            name: 'RadioGroup',
            docgenInfo: RadioGroup_RadioGroup.__docgenInfo,
            path: 'src/components/form-fields/RadioGroup.js'
          });
      var AddButton_AddButton = function AddButton(_ref) {
        var text = _ref.text,
          add = useArrayFieldApi().add;
        return react_default.a.createElement(
          'button',
          {
            onClick: function onClick() {
              add();
            },
            type: 'button'
          },
          text || 'Add'
        );
      };
      function useArrayFieldItemApi() {
        return Object(react.useContext)(Context.b);
      }
      (AddButton_AddButton.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'AddButton'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES[
            'src/components/form-fields/AddButton.js'
          ] = {
            name: 'AddButton',
            docgenInfo: AddButton_AddButton.__docgenInfo,
            path: 'src/components/form-fields/AddButton.js'
          });
      var RemoveButton_RemoveButton = function RemoveButton(_ref) {
        var text = _ref.text,
          remove = useArrayFieldItemApi().remove;
        return react_default.a.createElement(
          'button',
          {
            onClick: function onClick() {
              remove();
            },
            type: 'button'
          },
          text || 'Remove'
        );
      };
      function FormComponents_extends() {
        return (
          (FormComponents_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          FormComponents_extends.apply(this, arguments)
        );
      }
      (RemoveButton_RemoveButton.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'RemoveButton'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES[
            'src/components/form-fields/RemoveButton.js'
          ] = {
            name: 'RemoveButton',
            docgenInfo: RemoveButton_RemoveButton.__docgenInfo,
            path: 'src/components/form-fields/RemoveButton.js'
          });
      var FormComponents_FormComponents = function FormComponents(_ref) {
        var components = _ref.components,
          fieldMap = useFormController().fieldMap;
        return components
          ? components.map(function(comp, i) {
              var componentType = comp['ui:control'],
                props = comp['ui:props'],
                Component = fieldMap[componentType];
              return react_default.a.createElement(
                Component,
                FormComponents_extends({ key: 'ui-comp-'.concat(i) }, props)
              );
            })
          : null;
      };
      function FormField_extends() {
        return (
          (FormField_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          FormField_extends.apply(this, arguments)
        );
      }
      function FormField_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function FormField_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? FormField_ownKeys(Object(source), !0).forEach(function(key) {
                FormField_defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : FormField_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function FormField_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function FormField_slicedToArray(arr, i) {
        return (
          (function FormField_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function FormField_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function FormField_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o)
              return FormField_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return FormField_arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function FormField_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function FormField_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var FormField_logger = Object(src_debug.a)('informed:FormField\t'),
        FormField_FormField = function FormField(_ref) {
          var _fieldMap$componentTy,
            name = _ref.name,
            schema = _ref.schema,
            required = _ref.required,
            _useFormController = useFormController(),
            fieldMap = _useFormController.fieldMap,
            getOptions = _useFormController.getOptions,
            emitter = _useFormController.emitter,
            fullName = useScope(name),
            options = getOptions(),
            _useState2 = FormField_slicedToArray(Object(react.useState)({}), 2),
            condProp = _useState2[0],
            setCondProp = _useState2[1],
            lookupName = schema ? name : fullName,
            lookupSchema = null != schema ? schema : options.schema,
            path = getSchemaPathFromJsonPath(lookupName),
            property = ObjectMap.get(lookupSchema, path);
          if (!property) return null;
          var schemaField = Object(react.useMemo)(
              function() {
                return computeFieldFromProperty(name, property);
              },
              [name]
            ),
            schemaProps = schemaField.props,
            type = schemaField.type,
            properties = schemaField.properties,
            items = schemaField.items,
            componentType = schemaField.componentType,
            uiBefore = schemaField.uiBefore,
            uiAfter = schemaField.uiAfter;
          Object(react.useEffect)(
            function() {
              var updater = function updater(target, property) {
                  target === name &&
                    (FormField_logger('Updating field props for', target),
                    setCondProp(computeFieldFromProperty(name, property)));
                },
                remover = function remover(target) {
                  target === name && setCondProp({});
                };
              return (
                emitter.on('update-combine', updater),
                emitter.on('update-remove', remover),
                function() {
                  emitter.removeListener('update-combine', updater),
                    emitter.removeListener('update-remove', remover);
                }
              );
            },
            [name]
          );
          var props = Object(react.useMemo)(
              function() {
                var condProps = condProp.props,
                  newProps = FormField_objectSpread(
                    FormField_objectSpread(
                      FormField_objectSpread({}, schemaProps),
                      condProps
                    ),
                    {},
                    { required: required }
                  );
                return (
                  FormField_logger('New Props for '.concat(name), condProps),
                  newProps
                );
              },
              [condProp]
            ),
            Component =
              null !== (_fieldMap$componentTy = fieldMap[componentType]) &&
              void 0 !== _fieldMap$componentTy
                ? _fieldMap$componentTy
                : options.components
                  ? options.components[componentType]
                  : null;
          return (
            schemaProps.options &&
              fieldMap.withOptions &&
              !items &&
              (Component = fieldMap.withOptions[componentType] || Component),
            FormField_logger('Rendering Field', name, schemaField),
            !Component && 'object' === type && properties
              ? react_default.a.createElement(
                  Context.m.Provider,
                  { value: name },
                  react_default.a.createElement(FormFields_FormFields, {
                    schema: schemaField
                  })
                )
              : Component && 'object' === type && properties
                ? react_default.a.createElement(
                    Context.m.Provider,
                    { value: name },
                    react_default.a.createElement(
                      Component,
                      props,
                      react_default.a.createElement(FormFields_FormFields, {
                        schema: schemaField
                      })
                    )
                  )
                : !Component && 'array' === type && items
                  ? react_default.a.createElement(
                      ArrayField,
                      FormField_extends(
                        {
                          name: name,
                          items: items,
                          uiBefore: uiBefore,
                          uiAfter: uiAfter
                        },
                        props
                      )
                    )
                  : Component &&
                    'array' === componentType &&
                    items &&
                    'array' === type
                    ? react_default.a.createElement(
                        Component,
                        FormField_extends(
                          {
                            name: name,
                            items: items,
                            uiBefore: uiBefore,
                            uiAfter: uiAfter
                          },
                          props
                        )
                      )
                    : Component
                      ? react_default.a.createElement(
                          Component,
                          FormField_extends({ name: name }, props)
                        )
                      : null
          );
        };
      function UpdateFields_slicedToArray(arr, i) {
        return (
          (function UpdateFields_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function UpdateFields_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function UpdateFields_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o)
              return UpdateFields_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return UpdateFields_arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function UpdateFields_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function UpdateFields_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      (FormField_FormField.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'FormField'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/FormField.js'] = {
            name: 'FormField',
            docgenInfo: FormField_FormField.__docgenInfo,
            path: 'src/components/FormField.js'
          });
      var UpdateFields_logger = Object(src_debug.a)('informed:FormField\t'),
        UpdateFields_UpdateFields = function UpdateFields(_ref) {
          var schema = _ref.schema,
            formController = useFormController();
          return (
            Object(react.useEffect)(function() {
              return (
                Object.entries(schema).forEach(function(_ref2) {
                  var _ref3 = UpdateFields_slicedToArray(_ref2, 2),
                    key = _ref3[0],
                    value = _ref3[1];
                  UpdateFields_logger('update-combine '.concat(key), value),
                    formController.emitter.emit('update-combine', key, value);
                }),
                function() {
                  Object.entries(schema).forEach(function(_ref4) {
                    var key = UpdateFields_slicedToArray(_ref4, 1)[0];
                    UpdateFields_logger('update-remove '.concat(key)),
                      formController.emitter.emit('update-remove', key);
                  });
                }
              );
            }, []),
            null
          );
        };
      function FormFields_slicedToArray(arr, i) {
        return (
          (function FormFields_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function FormFields_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function FormFields_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o)
              return FormFields_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return FormFields_arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function FormFields_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function FormFields_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var FormFields_FormFields = function FormFields(_ref) {
          var schema = _ref.schema,
            onlyValidateSchema = _ref.onlyValidateSchema,
            componentsMap = (0, useFormController().getOptions)().components;
          return Object(react.useMemo)(
            function() {
              var _computeFieldsFromSch = computeFieldsFromSchema(
                  schema,
                  onlyValidateSchema
                ),
                properties = _computeFieldsFromSch.properties,
                conditions = _computeFieldsFromSch.conditions,
                components = _computeFieldsFromSch.components,
                mappedProperties = properties.map(function(name, i) {
                  if (name.includes('ui:') && 3 !== name.split(':').length)
                    return { $id: name.split('ui:')[1] };
                  var required =
                    !(!schema.required || !schema.required.includes(name)) ||
                    void 0;
                  return {
                    Component: react_default.a.createElement(
                      FormField_FormField,
                      {
                        name: name,
                        schema: schema,
                        key: 'schema-field-'.concat(name, '-').concat(i),
                        required: required
                      }
                    )
                  };
                }),
                mappedComponents = components.map(function(component) {
                  if (component['ui:control']) {
                    var RenderedComponent =
                      componentsMap[component['ui:control']];
                    return {
                      Component: react_default.a.createElement(
                        RenderedComponent,
                        null,
                        react_default.a.createElement(FormFields, {
                          schema: component
                        })
                      ),
                      $id: component.$id
                    };
                  }
                }),
                mappedConditionals = conditions.map(function(conditional, j) {
                  var subSchema = conditional.then,
                    $id = conditional.$id,
                    thenProps = conditional.thenProps,
                    conditions = conditional.if.properties;
                  return {
                    Component: react_default.a.createElement(
                      Relevant_Relevant,
                      {
                        key: 'Conditional-ScheamField-'.concat(j),
                        when: function when(_ref2) {
                          var formApi = _ref2.formApi,
                            scope = _ref2.scope;
                          return Object.entries(conditions).every(function(
                            _ref3
                          ) {
                            var _ref4 = FormFields_slicedToArray(_ref3, 2),
                              propertyName = _ref4[0];
                            return checkCondition(
                              _ref4[1],
                              formApi.getValue(
                                scope
                                  ? ''.concat(scope, '.').concat(propertyName)
                                  : propertyName
                              )
                            );
                          });
                        }
                      },
                      subSchema
                        ? react_default.a.createElement(FormFields, {
                            schema: subSchema
                          })
                        : null,
                      thenProps
                        ? react_default.a.createElement(
                            UpdateFields_UpdateFields,
                            { schema: thenProps }
                          )
                        : null
                    ),
                    $id: $id
                  };
                }),
                mappedFields = [];
              return (
                mappedProperties.forEach(function(_ref5) {
                  var $id = _ref5.$id,
                    Component = _ref5.Component;
                  if (Component) mappedFields.push(Component);
                  else {
                    if (!$id)
                      throw new Error(
                        'Found property with no ID or component...'
                      );
                    var conditional = mappedConditionals.find(function(c) {
                        return c.$id === $id;
                      }),
                      component = mappedComponents.find(function(c) {
                        return c.$id === $id;
                      });
                    if (conditional) {
                      mappedFields.push(conditional.Component);
                      var index = mappedConditionals.findIndex(function(c) {
                        return c.$id === $id;
                      });
                      mappedConditionals.splice(index, 1);
                    } else {
                      if (!component)
                        throw (console.log(
                          'MappedConditionals',
                          mappedConditionals
                        ),
                        new Error('Unable to find mapping for '.concat($id)));
                      mappedFields.push(component.Component);
                    }
                  }
                }),
                mappedConditionals.forEach(function(_ref6) {
                  var Component = _ref6.Component;
                  mappedFields.push(Component);
                }),
                mappedFields
              );
            },
            [schema]
          );
        },
        ArrayField_excluded = ['name', 'items', 'uiBefore', 'uiAfter'];
      function ArrayField_extends() {
        return (
          (ArrayField_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          ArrayField_extends.apply(this, arguments)
        );
      }
      function ArrayField_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function ArrayField_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var form_fields_ArrayField_ArrayField = function ArrayField(_ref) {
        var name = _ref.name,
          items = _ref.items,
          uiBefore = _ref.uiBefore,
          uiAfter = _ref.uiAfter,
          props = ArrayField_objectWithoutProperties(_ref, ArrayField_excluded);
        return react_default.a.createElement(
          ArrayField_ArrayField,
          ArrayField_extends({ name: name }, props),
          react_default.a.createElement(FormComponents_FormComponents, {
            components: uiBefore
          }),
          react_default.a.createElement(
            ArrayField_ArrayField.Items,
            null,
            function() {
              return react_default.a.createElement(
                react_default.a.Fragment,
                null,
                react_default.a.createElement(FormFields_FormFields, {
                  schema: items
                })
              );
            }
          ),
          react_default.a.createElement(FormComponents_FormComponents, {
            components: uiAfter
          })
        );
      };
      (form_fields_ArrayField_ArrayField.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'ArrayField'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES[
            'src/components/form-fields/ArrayField.js'
          ] = {
            name: 'ArrayField',
            docgenInfo: form_fields_ArrayField_ArrayField.__docgenInfo,
            path: 'src/components/form-fields/ArrayField.js'
          });
      var FieldMap = {
        string: Input,
        number: Input,
        boolean: Checkbox_Checkbox,
        select: Select_Select,
        input: Input,
        textarea: TextArea,
        checkbox: Checkbox_Checkbox,
        radio: RadioGroup_RadioGroup,
        add: AddButton_AddButton,
        remove: RemoveButton_RemoveButton,
        array: form_fields_ArrayField_ArrayField,
        withOptions: { string: Select_Select }
      };
      function FormController_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function FormController_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? FormController_ownKeys(Object(source), !0).forEach(function(key) {
                FormController_defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : FormController_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function FormController_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function FormController_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      var FormController_debug = Object(src_debug.a)(
          'informed:FormController\t'
        ),
        FormController_initializeValue = function initializeValue(value, _ref) {
          var formatter = _ref.formatter,
            parser = _ref.parser,
            initialize = _ref.initialize;
          if (null != value)
            return initialize && !parser
              ? initialize(value)
              : formatter && !parser
                ? informedFormat(value, formatter).value
                : value;
        },
        FormController_initializeMask = function initializeMask(value, _ref2) {
          var formatter = _ref2.formatter,
            initialize = _ref2.initialize;
          return initialize
            ? initialize(value)
            : formatter
              ? informedFormat(value, formatter).value
              : value;
        },
        FormController_FormController = (function() {
          function FormController(options) {
            !(function FormController_classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor))
                throw new TypeError('Cannot call a class as a function');
            })(this, FormController),
              (this.options = options),
              (this.subscriptions = new Map());
            var _options$current = options.current,
              ajv = _options$current.ajv,
              schema = _options$current.schema,
              fieldMap = _options$current.fieldMap,
              adapter = _options$current.adapter;
            (this.ajv = ajv ? new ajv({ allErrors: !0 }) : null),
              (this.ajvValidate = ajv ? this.ajv.compile(schema) : null),
              (this.fieldMap = adapter || fieldMap || FieldMap),
              (this.emitter = this),
              (this.fieldsMap = new Map()),
              (this.validationRequests = new Map()),
              (this.removalLocked = void 0),
              (this.state = {
                pristine: !0,
                dirty: !1,
                submitted: !1,
                invalid: !1,
                valid: !0,
                submitting: !1,
                validating: 0,
                values: {},
                errors: {},
                touched: {},
                maskedValues: {},
                dirt: {},
                focused: {},
                initialValues: this.options.current.initialValues || {}
              }),
              (this.getValue = this.getValue.bind(this)),
              (this.setValue = this.setValue.bind(this)),
              (this.setValues = this.setValues.bind(this)),
              (this.setTheseValues = this.setTheseValues.bind(this)),
              (this.getMaskedValue = this.getMaskedValue.bind(this)),
              (this.setMaskedValue = this.setMaskedValue.bind(this)),
              (this.getTouched = this.getTouched.bind(this)),
              (this.setTouched = this.setTouched.bind(this)),
              (this.getFocused = this.getFocused.bind(this)),
              (this.setFocused = this.setFocused.bind(this)),
              (this.getError = this.getError.bind(this)),
              (this.setError = this.setError.bind(this)),
              (this.reset = this.reset.bind(this)),
              (this.validate = this.validate.bind(this)),
              (this.asyncValidate = this.asyncValidate.bind(this)),
              (this.getDirty = this.getDirty.bind(this)),
              (this.getPristine = this.getPristine.bind(this)),
              (this.getFormState = this.getFormState.bind(this)),
              (this.getFormApi = this.getFormApi.bind(this)),
              (this.getFieldState = this.getFieldState.bind(this)),
              (this.getValid = this.getValid.bind(this)),
              (this.on = this.on.bind(this)),
              (this.emit = this.emit.bind(this)),
              (this.removeListener = this.removeListener.bind(this)),
              (this.remove = this.remove.bind(this)),
              (this.swap = this.swap.bind(this)),
              (this.register = this.register.bind(this)),
              (this.deregister = this.deregister.bind(this)),
              (this.getInitialValue = this.getInitialValue.bind(this)),
              (this.initialize = this.initialize.bind(this)),
              (this.reformat = this.reformat.bind(this)),
              (this.lockRemoval = this.lockRemoval.bind(this)),
              (this.unlockRemoval = this.unlockRemoval.bind(this)),
              (this.resetField = this.resetField.bind(this)),
              (this.getRemovalLocked = this.getRemovalLocked.bind(this)),
              (this.isRemovalLocked = this.isRemovalLocked.bind(this)),
              (this.submitForm = this.submitForm.bind(this)),
              (this.touchAllFields = this.touchAllFields.bind(this)),
              (this.keyDown = this.keyDown.bind(this)),
              (this.validateAsync = this.validateAsync.bind(this)),
              (this.validated = this.validated.bind(this)),
              (this.debouncedValidateAsync = debounceByName(
                this.validateAsync
              )),
              (this.getOptions = this.getOptions.bind(this)),
              (this.validateField = this.validateField.bind(this)),
              (this.getErrorMessage = this.getErrorMessage.bind(this));
          }
          return (
            (function FormController_createClass(
              Constructor,
              protoProps,
              staticProps
            ) {
              return (
                protoProps &&
                  FormController_defineProperties(
                    Constructor.prototype,
                    protoProps
                  ),
                staticProps &&
                  FormController_defineProperties(Constructor, staticProps),
                Constructor
              );
            })(FormController, [
              {
                key: 'getOptions',
                value: function getOptions() {
                  return this.options.current;
                }
              },
              {
                key: 'getValue',
                value: function getValue(name) {
                  return ObjectMap.get(this.state.values, name);
                }
              },
              {
                key: 'getMaskedValue',
                value: function getMaskedValue(name) {
                  return ObjectMap.get(this.state.maskedValues, name);
                }
              },
              {
                key: 'setMaskedValue',
                value: function setMaskedValue(name, value) {
                  return ObjectMap.set(this.state.maskedValues, name, value);
                }
              },
              {
                key: 'setValues',
                value: function setValues(values) {
                  this.fieldsMap.forEach(function(fieldMeta) {
                    var val = ObjectMap.get(values, fieldMeta.current.name);
                    fieldMeta.current.fieldApi.setValue(val);
                  });
                }
              },
              {
                key: 'setTheseValues',
                value: function setTheseValues(values) {
                  this.fieldsMap.forEach(function(fieldMeta) {
                    var val = ObjectMap.get(values, fieldMeta.current.name);
                    null != val && fieldMeta.current.fieldApi.setValue(val);
                  });
                }
              },
              {
                key: 'setValue',
                value: function setValue(name, value, e, key) {
                  var _this$fieldsMap$get,
                    meta =
                      (null ===
                        (_this$fieldsMap$get = this.fieldsMap.get(name)) ||
                      void 0 === _this$fieldsMap$get
                        ? void 0
                        : _this$fieldsMap$get.current) || {};
                  if (
                    (e &&
                      e.target &&
                      e.target.selectionStart &&
                      meta.setCursor(e.target.selectionStart, key),
                    '' === value)
                  )
                    FormController_debug(
                      'Setting '.concat(name, "'s value to undefiend")
                    ),
                      ObjectMap.set(this.state.values, name, void 0),
                      ObjectMap.set(this.state.maskedValues, name, void 0);
                  else if (
                    'number' === (null == meta ? void 0 : meta.type) &&
                    void 0 !== value
                  )
                    FormController_debug(
                      'Setting '.concat(name, "'s value to ").concat(+value)
                    ),
                      ObjectMap.set(this.state.values, name, +value),
                      ObjectMap.set(this.state.maskedValues, name, +value);
                  else {
                    var val = value,
                      maskedVal = value;
                    if (meta.formatter) {
                      var res = informedFormat(val, meta.formatter);
                      meta.setCursorOffset(res.offset, key),
                        (val = maskedVal = res.value);
                    }
                    meta.parser &&
                      (val =
                        null != val ? informedParse(val, meta.parser) : val),
                      FormController_debug(
                        'Setting '.concat(name, "'s value to ").concat(val)
                      ),
                      ObjectMap.set(this.state.values, name, val),
                      FormController_debug(
                        'Setting '
                          .concat(name, "'s maskedValue to ")
                          .concat(maskedVal)
                      ),
                      ObjectMap.set(this.state.maskedValues, name, maskedVal);
                  }
                  if (meta.validate && meta.validateOn.includes('change')) {
                    var _val = ObjectMap.get(this.state.values, name);
                    FormController_debug(
                      'Validating after change '.concat(name, ' ').concat(_val)
                    ),
                      ObjectMap.set(
                        this.state.errors,
                        name,
                        meta.validate(_val, this.state.values)
                      );
                  }
                  if (
                    meta.yupSchema &&
                    meta.validateOn.includes('change') &&
                    void 0 === this.getError(name)
                  ) {
                    var _val2 = ObjectMap.get(this.state.values, name);
                    FormController_debug(
                      'Validating YUP after change '
                        .concat(name, ' ')
                        .concat(_val2)
                    ),
                      ObjectMap.set(
                        this.state.errors,
                        name,
                        validateYupField(meta.yupSchema, _val2)
                      );
                  }
                  if (
                    (meta.asyncValidate &&
                      'change' === meta.validateOn &&
                      void 0 === this.getError(name) &&
                      this.debouncedValidateAsync(name),
                    (this.state.pristine = !1),
                    (this.state.dirty = !this.state.pristine),
                    ObjectMap.set(this.state.dirt, name, !0),
                    (this.state.valid = ObjectMap.empty(this.state.errors)),
                    (this.state.invalid = !this.state.valid),
                    meta.onChange)
                  ) {
                    var fieldState = this.getFieldState(name);
                    meta.onChange(fieldState, e);
                  }
                  this.emit('field', name), this.emit('field-value', name);
                }
              },
              {
                key: 'validateField',
                value: function validateField(name) {
                  var _this$fieldsMap$get2,
                    meta =
                      null ===
                        (_this$fieldsMap$get2 = this.fieldsMap.get(name)) ||
                      void 0 === _this$fieldsMap$get2
                        ? void 0
                        : _this$fieldsMap$get2.current;
                  if (meta.validate) {
                    var val = ObjectMap.get(this.state.values, name);
                    FormController_debug(
                      'Validating field '
                        .concat(name, ' via validateField with value ')
                        .concat(val)
                    ),
                      ObjectMap.set(
                        this.state.errors,
                        name,
                        meta.validate(val, this.state.values)
                      );
                  }
                  if (meta.yupSchema && void 0 === this.getError(name)) {
                    var _val3 = ObjectMap.get(this.state.values, name);
                    FormController_debug(
                      'Validating YUP field via validateField '
                        .concat(name, ' ')
                        .concat(_val3)
                    ),
                      ObjectMap.set(
                        this.state.errors,
                        name,
                        validateYupField(meta.yupSchema, _val3)
                      );
                  }
                  (this.state.valid = ObjectMap.empty(this.state.errors)),
                    (this.state.invalid = !this.state.valid),
                    this.emit('field', name);
                }
              },
              {
                key: 'getFocused',
                value: function getFocused(name) {
                  return ObjectMap.get(this.state.focused, name);
                }
              },
              {
                key: 'setFocused',
                value: function setFocused(name, value, e) {
                  var _this$fieldsMap$get3;
                  FormController_debug(
                    'Setting '.concat(name, "'s focused to ").concat(value)
                  );
                  var meta =
                    null ===
                      (_this$fieldsMap$get3 = this.fieldsMap.get(name)) ||
                    void 0 === _this$fieldsMap$get3
                      ? void 0
                      : _this$fieldsMap$get3.current;
                  if (
                    (ObjectMap.set(this.state.focused, name, value),
                    meta.onFocus)
                  ) {
                    var fieldState = this.getFieldState(name);
                    meta.onFocus(fieldState, e);
                  }
                  this.emit('field', name);
                }
              },
              {
                key: 'getTouched',
                value: function getTouched(name) {
                  return ObjectMap.get(this.state.touched, name);
                }
              },
              {
                key: 'setTouched',
                value: function setTouched(name, value, e) {
                  var _this$fieldsMap$get4;
                  FormController_debug(
                    'Setting '.concat(name, "'s touched to ").concat(value)
                  );
                  var meta =
                    null ===
                      (_this$fieldsMap$get4 = this.fieldsMap.get(name)) ||
                    void 0 === _this$fieldsMap$get4
                      ? void 0
                      : _this$fieldsMap$get4.current;
                  if (
                    (ObjectMap.set(this.state.touched, name, value),
                    meta.validate &&
                      (meta.validateOn.includes('blur') ||
                        meta.validateOn.includes('change')))
                  ) {
                    var val = ObjectMap.get(this.state.values, name);
                    FormController_debug(
                      'Validating after blur '.concat(name, ' ').concat(val)
                    ),
                      ObjectMap.set(
                        this.state.errors,
                        name,
                        meta.validate(val, this.state.values)
                      );
                  }
                  if (
                    (!meta.asyncValidate ||
                      ('blur' !== meta.validateOn &&
                        'change-blur' !== meta.validateOn &&
                        'change' !== meta.validateOn) ||
                      (void 0 === this.getError(name) &&
                        this.validateAsync(name)),
                    (this.state.valid = ObjectMap.empty(this.state.errors)),
                    (this.state.invalid = !this.state.valid),
                    meta.onBlur)
                  ) {
                    var fieldState = this.getFieldState(name);
                    meta.onBlur(fieldState, e);
                  }
                  this.emit('field', name);
                }
              },
              {
                key: 'getError',
                value: function getError(name) {
                  return ObjectMap.get(this.state.errors, name);
                }
              },
              {
                key: 'setError',
                value: function setError(name, value) {
                  FormController_debug(
                    'Setting '.concat(name, "'s error to ").concat(value)
                  ),
                    ObjectMap.set(this.state.errors, name, value),
                    this.emit('field', name);
                }
              },
              {
                key: 'getInitialValue',
                value: function getInitialValue(name) {
                  return ObjectMap.get(this.state.initialValues, name);
                }
              },
              {
                key: 'getDirty',
                value: function getDirty(name) {
                  return !!ObjectMap.get(this.state.dirt, name);
                }
              },
              {
                key: 'getPristine',
                value: function getPristine(name) {
                  return !this.getDirty(name);
                }
              },
              {
                key: 'getValid',
                value: function getValid(name) {
                  return void 0 === ObjectMap.get(this.state.errors, name);
                }
              },
              {
                key: 'getFormState',
                value: function getFormState() {
                  return this.state;
                }
              },
              {
                key: 'getFormApi',
                value: function getFormApi() {
                  return {
                    getValue: this.getValue,
                    setValue: this.setValue,
                    getMaskedValue: this.getMaskedValue,
                    setMaskedValue: this.setMaskedValue,
                    getTouched: this.getTouched,
                    setTouched: this.setTouched,
                    getError: this.getError,
                    setError: this.setError,
                    getFocused: this.getFocused,
                    setFocused: this.setFocused,
                    resetField: this.resetField,
                    reset: this.reset,
                    getFormState: this.getFormState,
                    getPristine: this.getPristine,
                    getDirty: this.getDirty,
                    validateField: this.validateField,
                    getFieldState: this.getFieldState,
                    getInitialValue: this.getInitialValue,
                    touchAllFields: this.touchAllFields,
                    validate: this.validate,
                    setValues: this.setValues,
                    setTheseValues: this.setTheseValues
                  };
                }
              },
              {
                key: 'getFieldState',
                value: function getFieldState(name) {
                  var _this$fieldsMap$get5,
                    meta =
                      (null ===
                        (_this$fieldsMap$get5 = this.fieldsMap.get(name)) ||
                      void 0 === _this$fieldsMap$get5
                        ? void 0
                        : _this$fieldsMap$get5.current) || {},
                    error = this.getError(name),
                    focused = !!this.getFocused(name),
                    dirty = this.getDirty(name),
                    valid = this.getValid(name),
                    touched = !!this.getTouched(name),
                    pristine = !dirty,
                    validating = !!this.validationRequests.get(name),
                    showError = !1;
                  return (
                    (showError =
                      meta && meta.showErrorIfError
                        ? void 0 !== error
                        : meta && meta.showErrorIfDirty
                          ? void 0 !== error && dirty
                          : void 0 !== error && touched),
                    {
                      value: this.getValue(name),
                      maskedValue: this.getMaskedValue(name),
                      touched: touched,
                      error: this.getError(name),
                      pristine: pristine,
                      dirty: dirty,
                      valid: valid,
                      invalid: !valid,
                      showError: showError,
                      validating: validating,
                      focused: focused
                    }
                  );
                }
              },
              {
                key: 'remove',
                value: function remove(name) {
                  FormController_debug('Remove', name),
                    this.removalLocked
                      ? FormController_debug(
                          'Removal locked so NOT removing',
                          name
                        )
                      : (FormController_debug('Delete Value', name),
                        ObjectMap.delete(this.state.values, name),
                        FormController_debug('Delete Masked', name),
                        ObjectMap.delete(this.state.maskedValues, name),
                        FormController_debug('Delete Touched', name),
                        ObjectMap.delete(this.state.touched, name),
                        FormController_debug('Delete Errors', name),
                        ObjectMap.delete(this.state.errors, name),
                        FormController_debug('Delete Dirt', name),
                        ObjectMap.delete(this.state.dirt, name),
                        FormController_debug('Delete Focused', name),
                        ObjectMap.delete(this.state.focused, name),
                        (this.state.valid = ObjectMap.empty(this.state.errors)),
                        (this.state.invalid = !this.state.valid),
                        this.emit('field', name),
                        this.emit('field-value', name));
                }
              },
              {
                key: 'swap',
                value: function swap(name, a, b) {
                  FormController_debug('Swap', name, a, b),
                    ObjectMap.swap(this.state.values, name, a, b),
                    ObjectMap.swap(this.state.maskedValues, name, a, b),
                    ObjectMap.swap(this.state.touched, name, a, b),
                    ObjectMap.swap(this.state.errors, name, a, b),
                    ObjectMap.swap(this.state.dirt, name, a, b),
                    ObjectMap.swap(this.state.focused, name, a, b);
                }
              },
              {
                key: 'pullOut',
                value: function pullOut(name) {
                  FormController_debug('Pull', name),
                    ObjectMap.delete(this.state.values, name),
                    ObjectMap.delete(this.state.maskedValues, name),
                    ObjectMap.delete(this.state.touched, name),
                    ObjectMap.delete(this.state.errors, name),
                    ObjectMap.delete(this.state.dirt, name),
                    ObjectMap.delete(this.state.focused, name);
                }
              },
              {
                key: 'register',
                value: function register(name, meta) {
                  FormController_debug('Register', name, meta),
                    this.fieldsMap.set(name, meta),
                    this.emit('field', name);
                }
              },
              {
                key: 'deregister',
                value: function deregister(name) {
                  FormController_debug('De-Register', name),
                    this.fieldsMap.delete(name),
                    this.emit('field', name);
                }
              },
              {
                key: 'initialize',
                value: function initialize(name, meta) {
                  if (
                    (FormController_debug('Initialize', name, this.state),
                    this.getValue(name))
                  )
                    this.emit('field', name);
                  else {
                    if (
                      null != meta.current.initialValue &&
                      (!meta.current.initializeValueIfPristine ||
                        this.state.pristine)
                    ) {
                      var _meta$current = meta.current,
                        formatter = _meta$current.formatter,
                        parser = _meta$current.parser,
                        initialize = _meta$current.initialize,
                        initialValue = FormController_initializeValue(
                          meta.current.initialValue,
                          {
                            formatter: formatter,
                            parser: parser,
                            initialize: initialize
                          }
                        ),
                        initialMask = FormController_initializeMask(
                          meta.current.initialValue,
                          { formatter: formatter, initialize: initialize }
                        );
                      FormController_debug(
                        'Initializing '
                          .concat(name, "'s value to ")
                          .concat(initialValue)
                      ),
                        ObjectMap.set(this.state.values, name, initialValue),
                        FormController_debug(
                          'Initializing '
                            .concat(name, "'s maskedValue to ")
                            .concat(initialMask)
                        ),
                        ObjectMap.set(
                          this.state.maskedValues,
                          name,
                          initialMask
                        );
                    }
                    if (meta.current.validate && meta.current.validateOnMount) {
                      var val = ObjectMap.get(this.state.values, name);
                      FormController_debug(
                        'Validating on mount '.concat(name, ' ').concat(val),
                        this.state
                      ),
                        ObjectMap.set(
                          this.state.errors,
                          name,
                          meta.current.validate(val, this.state.values)
                        );
                    }
                    meta.current.asyncValidate &&
                      !0 === meta.current.validateOnMount &&
                      void 0 === this.getError(name) &&
                      this.validateAsync(name),
                      (this.state.valid = ObjectMap.empty(this.state.errors)),
                      (this.state.invalid = !this.state.valid),
                      this.emit('field', name),
                      this.emit('field-value', name);
                  }
                }
              },
              {
                key: 'validated',
                value: function validated(name, res) {
                  if (
                    (FormController_debug(
                      'Setting '
                        .concat(name, "'s error to ")
                        .concat(res, ' with ')
                        .concat(this.state.validating, ' validations left')
                    ),
                    ObjectMap.set(this.state.errors, name, res),
                    (this.state.valid = ObjectMap.empty(this.state.errors)),
                    (this.state.invalid = !this.state.valid),
                    this.validationRequests.delete(name),
                    this.state.validating > 0)
                  )
                    return (
                      FormController_debug(
                        'Still validating '.concat(
                          this.state.validating,
                          ' others so just update state.'
                        )
                      ),
                      void this.emit('field', name)
                    );
                  this.state.submitting &&
                    (this.valid()
                      ? (FormController_debug('Submit', this.state),
                        this.emit('field', name),
                        this.emit('submit'))
                      : (FormController_debug('Submit', this.state),
                        this.emit('field', name),
                        this.emit('failure')),
                    (this.state.submitting = !1)),
                    this.done &&
                      (this.valid() && this.done(), (this.done = void 0)),
                    this.emit('field', name);
                }
              },
              {
                key: 'validateAsync',
                value: function validateAsync(name) {
                  var _this$fieldsMap$get6,
                    _this = this;
                  FormController_debug('VALIDATING ASYNC', name);
                  var meta =
                      null ===
                        (_this$fieldsMap$get6 = this.fieldsMap.get(name)) ||
                      void 0 === _this$fieldsMap$get6
                        ? void 0
                        : _this$fieldsMap$get6.current,
                    value = this.getValue(name);
                  if (meta && meta.asyncValidate) {
                    this.state.validating = this.state.validating + 1;
                    var uuid = uuidv4();
                    FormController_debug('REQUEST', uuid),
                      this.validationRequests.set(name, {
                        uuid: uuid,
                        value: value
                      }),
                      this.emit('field', name),
                      meta
                        .asyncValidate(value, this.state.values)
                        .then(function(res) {
                          _this.state.validating = _this.state.validating - 1;
                          var stale =
                              _this.validationRequests.get(name).uuid !== uuid,
                            invalid =
                              _this.validationRequests.get(name).value !==
                              _this.getValue(name);
                          stale || invalid
                            ? FormController_debug(
                                ''.concat(stale ? 'STALE' : 'INVALID', ' THEN'),
                                uuid,
                                value,
                                _this.getValue(name)
                              )
                            : (FormController_debug('FINISH', uuid),
                              _this.validated(name, res));
                        })
                        .catch(function(err) {
                          _this.state.validating = _this.state.validating - 1;
                          var stale =
                              _this.validationRequests.get(name).uuid !== uuid,
                            invalid =
                              _this.validationRequests.get(name).value !==
                              _this.getValue(name);
                          stale || invalid
                            ? FormController_debug(
                                ''.concat(stale ? 'STALE' : 'INVALID', ' THEN'),
                                uuid,
                                value,
                                _this.getValue(name)
                              )
                            : (FormController_debug('FINISH', uuid),
                              _this.validated(name, err.message));
                        });
                  }
                }
              },
              {
                key: 'reset',
                value: function reset() {
                  (this.state = {
                    pristine: !0,
                    dirty: !1,
                    submitted: !1,
                    invalid: !1,
                    valid: !0,
                    submitting: !1,
                    validating: 0,
                    values: {},
                    errors: {},
                    touched: {},
                    maskedValues: {},
                    dirt: {},
                    focused: {},
                    initialValues: this.options.current.initialValues || {}
                  }),
                    this.fieldsMap.forEach(function(fieldMeta) {
                      fieldMeta.current.fieldApi.reset();
                    }),
                    this.emit('reset');
                }
              },
              {
                key: 'resetField',
                value: function resetField(name) {
                  var _this$fieldsMap$get7;
                  FormController_debug('Resetting', name);
                  var meta =
                      (null ===
                        (_this$fieldsMap$get7 = this.fieldsMap.get(name)) ||
                      void 0 === _this$fieldsMap$get7
                        ? void 0
                        : _this$fieldsMap$get7.current) || {},
                    formatter = meta.formatter,
                    parser = meta.parser,
                    initialize = meta.initialize,
                    initialValue = FormController_initializeValue(
                      meta.getInitialValue && meta.getInitialValue(),
                      {
                        formatter: formatter,
                        parser: parser,
                        initialize: initialize
                      }
                    ),
                    initialMask = FormController_initializeMask(
                      meta.getInitialValue && meta.getInitialValue(),
                      { formatter: formatter, initialize: initialize }
                    );
                  FormController_debug(
                    'Resetting '
                      .concat(name, "'s value to ")
                      .concat(initialValue)
                  ),
                    ObjectMap.set(this.state.values, name, initialValue),
                    FormController_debug(
                      'Resetting '
                        .concat(name, "'s maskedValue to ")
                        .concat(initialMask)
                    ),
                    ObjectMap.set(this.state.maskedValues, name, initialMask),
                    FormController_debug('Resetting '.concat(name, "'s error")),
                    ObjectMap.delete(this.state.errors, name),
                    FormController_debug(
                      'Resetting '.concat(name, "'s touched")
                    ),
                    ObjectMap.delete(this.state.touched, name),
                    FormController_debug('Resetting '.concat(name, "'s dirt")),
                    ObjectMap.delete(this.state.dirt, name),
                    (this.state.valid = ObjectMap.empty(this.state.errors)),
                    (this.state.invalid = !this.state.valid),
                    this.emit('field', name),
                    this.emit('field-value', name);
                }
              },
              {
                key: 'reformat',
                value: function reformat(name) {
                  var _this$fieldsMap$get8;
                  FormController_debug('Reformatting', name);
                  var meta =
                      null ===
                        (_this$fieldsMap$get8 = this.fieldsMap.get(name)) ||
                      void 0 === _this$fieldsMap$get8
                        ? void 0
                        : _this$fieldsMap$get8.current,
                    currentValue = ObjectMap.get(this.state.values, name),
                    formatter = meta.formatter,
                    parser = meta.parser,
                    initialize = meta.initialize,
                    newValue = FormController_initializeValue(currentValue, {
                      formatter: formatter,
                      parser: parser,
                      initialize: initialize
                    }),
                    newMaskedValue = FormController_initializeMask(
                      currentValue,
                      { formatter: formatter }
                    );
                  FormController_debug(
                    'Reformatting '
                      .concat(name, "'s value to ")
                      .concat(newValue)
                  ),
                    ObjectMap.set(this.state.values, name, newValue),
                    FormController_debug(
                      'Reformatting '
                        .concat(name, "'s maskedValue to ")
                        .concat(newMaskedValue)
                    ),
                    ObjectMap.set(
                      this.state.maskedValues,
                      name,
                      newMaskedValue
                    ),
                    this.emit('field', name),
                    this.emit('field-value', name);
                }
              },
              {
                key: 'lockRemoval',
                value: function lockRemoval(i) {
                  FormController_debug('LOCKREMOVAL', i),
                    (this.removalLocked = i);
                }
              },
              {
                key: 'unlockRemoval',
                value: function unlockRemoval() {
                  FormController_debug('UNLOCK REMOVAL'),
                    (this.removalLocked = void 0);
                }
              },
              {
                key: 'getRemovalLocked',
                value: function getRemovalLocked() {
                  return this.removalLocked;
                }
              },
              {
                key: 'isRemovalLocked',
                value: function isRemovalLocked() {
                  return null != this.removalLocked;
                }
              },
              {
                key: 'valid',
                value: function valid() {
                  var errors = this.state.errors;
                  return !!ObjectMap.empty(errors);
                }
              },
              {
                key: 'keyDown',
                value: function keyDown(e) {
                  if (13 == e.keyCode && this.options.current.preventEnter)
                    return e.preventDefault(e), !1;
                }
              },
              {
                key: 'validate',
                value: function validate() {
                  var _this2 = this;
                  FormController_debug('Validating all fields');
                  var values = this.state.values,
                    errors = {};
                  if (this.options.current.yupSchema) {
                    var yupErrors = validateYupSchema(
                      this.options.current.yupSchema,
                      values
                    );
                    errors = FormController_objectSpread(
                      FormController_objectSpread({}, errors),
                      yupErrors
                    );
                  }
                  if (this.options.current.schema && this.options.current.ajv) {
                    var ajvErrors = utils_validateAjvSchema(
                      this.ajvValidate,
                      values
                    );
                    errors = FormController_objectSpread(
                      FormController_objectSpread({}, errors),
                      ajvErrors
                    );
                  }
                  if (this.options.current.validateFields) {
                    var fieldErrors = this.options.current.validateFields(
                      values
                    );
                    (errors = FormController_objectSpread(
                      FormController_objectSpread({}, errors),
                      fieldErrors
                    )),
                      (errors = ObjectMap.purge(errors));
                  }
                  this.fieldsMap.forEach(function(fieldMeta) {
                    var meta = fieldMeta.current,
                      value = _this2.getValue(meta.name),
                      error = meta.validate
                        ? meta.validate(value, values)
                        : void 0;
                    error && ObjectMap.set(errors, meta.name, error);
                  }),
                    (this.state.errors = errors),
                    (this.state.valid = ObjectMap.empty(this.state.errors)),
                    (this.state.invalid = !this.state.valid),
                    this.emit('field', '_ALL_');
                }
              },
              {
                key: 'asyncValidate',
                value: function asyncValidate(done) {
                  var _this3 = this;
                  FormController_debug('Async Validating all fields'),
                    (this.done = done),
                    this.fieldsMap.forEach(function(meta) {
                      var name = meta.current.name;
                      void 0 === _this3.getError(name) &&
                        _this3.validateAsync(name);
                    });
                }
              },
              {
                key: 'getErrorMessage',
                value: function getErrorMessage(key, n) {
                  var _this$fieldsMap$get9;
                  FormController_debug(
                    'Getting '
                      .concat(key, ' error message for ')
                      .concat(n, ' Validating all fields')
                  );
                  var name = n;
                  if (this.options.current.schema) {
                    for (
                      FormController_debug(
                        'We have schema so looking in there for error message'
                      );
                      '' !== name;

                    ) {
                      FormController_debug(
                        'Looking for message at '.concat(name)
                      );
                      var path = getSchemaPathFromJsonPath(name),
                        _property = ObjectMap.get(
                          this.options.current.schema,
                          path
                        );
                      if (_property.errorMessage) {
                        var message =
                          'string' == typeof _property.errorMessage
                            ? _property.errorMessage
                            : _property.errorMessage[key];
                        if (message) return message;
                      }
                      FormController_debug(
                        'Did not find message in schema for '.concat(path),
                        _property
                      ),
                        (name = name.substring(0, name.lastIndexOf('.')));
                    }
                    var property = this.options.current.schema;
                    if (property.errorMessage) {
                      var _message =
                        'string' == typeof property.errorMessage
                          ? property.errorMessage
                          : property.errorMessage[key];
                      if (_message) return _message;
                    }
                  }
                  var meta =
                    null ===
                      (_this$fieldsMap$get9 = this.fieldsMap.get(name)) ||
                    void 0 === _this$fieldsMap$get9
                      ? void 0
                      : _this$fieldsMap$get9.current;
                  if (meta && meta.errorMessage) {
                    var _message2 =
                      'string' == typeof meta.errorMessage
                        ? meta.errorMessage
                        : meta.errorMessage[key];
                    if (_message2) return _message2;
                  }
                  if (this.options.current.errorMessage) {
                    var _message3 =
                      'string' == typeof this.options.current.errorMessage
                        ? this.options.current.errorMessage
                        : this.options.current.errorMessage[key];
                    if (_message3) return _message3;
                  }
                }
              },
              {
                key: 'touchAllFields',
                value: function touchAllFields() {
                  var _this4 = this;
                  this.fieldsMap.forEach(function(meta) {
                    FormController_debug(
                      'Submit - setting '.concat(
                        meta.current.name,
                        "'s touched to true"
                      )
                    ),
                      ObjectMap.set(
                        _this4.state.touched,
                        meta.current.name,
                        !0
                      );
                  });
                }
              },
              {
                key: 'submitForm',
                value: function submitForm(e) {
                  var _this5 = this;
                  (this.state.submitting = !0),
                    !this.options.current.dontPreventDefault &&
                      e &&
                      e.preventDefault(e),
                    this.validate(),
                    this.fieldsMap.forEach(function(meta) {
                      FormController_debug(
                        'Submit - setting '.concat(
                          meta.current.name,
                          "'s touched to true"
                        )
                      ),
                        ObjectMap.set(
                          _this5.state.touched,
                          meta.current.name,
                          !0
                        );
                    }),
                    this.emit('field', '_ALL_'),
                    this.asyncValidate(),
                    this.valid() && 0 === this.state.validating
                      ? (FormController_debug('Submit', this.state),
                        (this.state.submitted = !0),
                        this.emit('submit'))
                      : (FormController_debug('Fail', this.state),
                        this.emit('failure')),
                    0 === this.state.validating && (this.state.submitting = !1),
                    this.emit('field');
                }
              },
              {
                key: 'emit',
                value: function emit(event) {
                  for (
                    var _len = arguments.length,
                      args = new Array(_len > 1 ? _len - 1 : 0),
                      _key = 1;
                    _key < _len;
                    _key++
                  )
                    args[_key - 1] = arguments[_key];
                  var listeners = this.subscriptions.get(event);
                  listeners &&
                    listeners.forEach(function(listener) {
                      return listener.apply(void 0, args);
                    });
                }
              },
              {
                key: 'on',
                value: function on(event, listener) {
                  this.subscriptions.get(event) ||
                    this.subscriptions.set(event, new Set()),
                    this.subscriptions.get(event).add(listener);
                }
              },
              {
                key: 'removeListener',
                value: function removeListener(event, listener) {
                  this.subscriptions.get(event).delete(listener);
                }
              }
            ]),
            FormController
          );
        })(),
        useForm_excluded = [
          'onSubmit',
          'onReset',
          'onChange',
          'onSubmitFailure',
          'initialValues',
          'validateFields',
          'autocomplete',
          'showErrorIfError',
          'showErrorIfDirty',
          'validateOn',
          'validateOnMount',
          'formApiRef',
          'dontPreventDefault',
          'yupSchema',
          'allowEmptyStrings',
          'preventEnter',
          'schema',
          'ajv',
          'ajvErrors',
          'components',
          'errorMessage',
          'fieldMap',
          'adapter'
        ];
      function useForm_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function useForm_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? useForm_ownKeys(Object(source), !0).forEach(function(key) {
                useForm_defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : useForm_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function useForm_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function useForm_slicedToArray(arr, i) {
        return (
          (function useForm_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function useForm_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function useForm_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o)
              return useForm_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return useForm_arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function useForm_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useForm_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function useForm_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function useForm_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var useForm_useForm = function useForm(_ref) {
          var onSubmit = _ref.onSubmit,
            onReset = _ref.onReset,
            onChange = _ref.onChange,
            onSubmitFailure = _ref.onSubmitFailure,
            initialValues = _ref.initialValues,
            validateFields = _ref.validateFields,
            autocomplete = _ref.autocomplete,
            showErrorIfError = _ref.showErrorIfError,
            showErrorIfDirty = _ref.showErrorIfDirty,
            validateOn = _ref.validateOn,
            validateOnMount = _ref.validateOnMount,
            formApiRef = _ref.formApiRef,
            dontPreventDefault = _ref.dontPreventDefault,
            yupSchema = _ref.yupSchema,
            allowEmptyStrings = _ref.allowEmptyStrings,
            preventEnter = _ref.preventEnter,
            schema = _ref.schema,
            ajv = _ref.ajv,
            ajvErrors = _ref.ajvErrors,
            components = _ref.components,
            errorMessage = _ref.errorMessage,
            fieldMap = _ref.fieldMap,
            adapter = _ref.adapter,
            userProps = useForm_objectWithoutProperties(_ref, useForm_excluded),
            formControllerOptions = {
              initialValues: initialValues,
              validateFields: validateFields,
              autocomplete: autocomplete,
              showErrorIfError: showErrorIfError,
              showErrorIfDirty: showErrorIfDirty,
              validateOn: validateOn,
              validateOnMount: validateOnMount,
              dontPreventDefault: dontPreventDefault,
              yupSchema: yupSchema,
              allowEmptyStrings: allowEmptyStrings,
              preventEnter: preventEnter,
              schema: schema,
              ajv: ajv,
              ajvErrors: ajvErrors,
              components: components,
              errorMessage: errorMessage,
              fieldMap: fieldMap,
              adapter: adapter
            },
            optionsRef = Object(react.useRef)();
          optionsRef.current = formControllerOptions;
          var formController = useForm_slicedToArray(
            Object(react.useState)(function() {
              return new FormController_FormController(optionsRef);
            }),
            1
          )[0];
          Object(react.useEffect)(
            function() {
              var onChangeHandler = function onChangeHandler() {
                  return onChange && onChange(formController.getFormState());
                },
                onResetHandler = function onResetHandler() {
                  return onReset && onReset(formController.getFormState());
                },
                onSubmitHandler = function onSubmitHandler() {
                  return onSubmit && onSubmit(formController.getFormState());
                },
                onFailureHandler = function onFailureHandler() {
                  return (
                    onSubmitFailure &&
                    onSubmitFailure(formController.getFormState())
                  );
                };
              return (
                formController.on('field', onChangeHandler),
                formController.on('reset', onResetHandler),
                formController.on('submit', onSubmitHandler),
                formController.on('failure', onFailureHandler),
                function() {
                  formController.removeListener('field', onChangeHandler),
                    formController.removeListener('reset', onResetHandler),
                    formController.removeListener('submit', onSubmitHandler),
                    formController.removeListener('failure', onFailureHandler);
                }
              );
            },
            [onChange, onReset, onSubmit, onSubmitFailure]
          );
          var _useState4 = useForm_slicedToArray(
              Object(react.useState)(function() {
                return formController.getFormState();
              }),
              2
            ),
            formState = _useState4[0],
            setFormState = _useState4[1];
          Object(react.useEffect)(function() {
            var listener = function listener() {
              setFormState(
                useForm_objectSpread({}, formController.getFormState())
              );
            };
            return (
              formController.emitter.on('field', listener),
              setFormState(
                useForm_objectSpread({}, formController.getFormState())
              ),
              function() {
                formController.emitter.removeListener('field', listener);
              }
            );
          }, []);
          var formApi = Object(react.useMemo)(function() {
            return (
              formApiRef && (formApiRef.current = formController.getFormApi()),
              formController.getFormApi()
            );
          }, []);
          useUpdateEffect_useUpdateEffect(
            function() {
              formApi.getFormState().pristine && formApi.reset();
            },
            [initialValues]
          );
          return {
            formApi: formApi,
            formState: formState,
            formController: formController,
            render: function render(children) {
              return react_default.a.createElement(
                Context.f.Provider,
                { value: formController },
                react_default.a.createElement(
                  Context.e.Provider,
                  { value: formApi },
                  react_default.a.createElement(
                    Context.g.Provider,
                    { value: formState },
                    children
                  )
                )
              );
            },
            userProps: userProps
          };
        },
        Form_excluded = ['children'];
      function Form_extends() {
        return (
          (Form_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          Form_extends.apply(this, arguments)
        );
      }
      function Form_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function Form_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var Form_debug = Object(src_debug.a)('informed:Form\t\t'),
        Form_Form = function Form(_ref) {
          var children = _ref.children,
            rest = Form_objectWithoutProperties(_ref, Form_excluded);
          Form_debug('Render FORM');
          var _useForm = useForm_useForm(rest),
            formApi = _useForm.formApi,
            formController = _useForm.formController,
            formState = _useForm.formState,
            render = _useForm.render,
            userProps = _useForm.userProps;
          return render(
            react_default.a.createElement(
              'form',
              Form_extends({}, userProps, {
                noValidate: !0,
                onReset: formController.reset,
                onSubmit: formController.submitForm,
                onKeyDown: formController.keyDown
              }),
              (function getContent() {
                return 'function' == typeof children
                  ? children({ formState: formState, formApi: formApi })
                  : children;
              })()
            )
          );
        },
        Option_excluded = ['value', 'forwardedRef', 'children'];
      function Option_extends() {
        return (
          (Option_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          Option_extends.apply(this, arguments)
        );
      }
      function Option_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function Option_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var Option_Option = function Option(_ref) {
        var value = _ref.value,
          forwardedRef = _ref.forwardedRef,
          children = _ref.children,
          rest = Option_objectWithoutProperties(_ref, Option_excluded);
        return react_default.a.createElement(
          'option',
          Option_extends({ ref: forwardedRef, value: value, key: value }, rest),
          children
        );
      };
      (Option_Option.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Option'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/form-fields/Option.js'] = {
            name: 'Option',
            docgenInfo: Option_Option.__docgenInfo,
            path: 'src/components/form-fields/Option.js'
          });
      var SchemaFields_SchemaFields = function SchemaFields() {
        var schema = (0, useFormController().getOptions)().schema;
        return react_default.a.createElement(FormFields_FormFields, {
          schema: schema
        });
      };
      function useMultistep_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function useMultistep_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? useMultistep_ownKeys(Object(source), !0).forEach(function(key) {
                useMultistep_defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : useMultistep_ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function useMultistep_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function useMultistep_slicedToArray(arr, i) {
        return (
          (function useMultistep_arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function useMultistep_iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function useMultistep_unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o)
              return useMultistep_arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return useMultistep_arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function useMultistep_nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function useMultistep_arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      (SchemaFields_SchemaFields.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'SchemaFields'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['src/components/SchemaFields.js'] = {
            name: 'SchemaFields',
            docgenInfo: SchemaFields_SchemaFields.__docgenInfo,
            path: 'src/components/SchemaFields.js'
          });
      function useMultistepState() {
        return Object(react.useContext)(Context.i);
      }
      function useMultistepApi() {
        return Object(react.useContext)(Context.h);
      }
      var useMultistepStep_logger = Object(src_debug.a)(
          'informed:useMultistepStep\t'
        ),
        Multistep_excluded = ['children'],
        Multistep_excluded2 = ['render'],
        _excluded3 = ['children'];
      function Multistep_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function Multistep_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      function Multistep(_ref) {
        var children = _ref.children,
          _useMultistep = (function useMultistep(_ref) {
            var initialStep = _ref.initialStep,
              multistepApiRef = _ref.multistepApiRef,
              _useFormController = useFormController(),
              validate = _useFormController.validate,
              asyncValidate = _useFormController.asyncValidate,
              getFormState = _useFormController.getFormState,
              getFieldState = _useFormController.getFieldState,
              emitter = _useFormController.emitter,
              formApi = useFormApi(),
              scope = Object(react.useContext)(Context.m),
              nSteps = Object(react.useRef)(0),
              currentStep = Object(react.useRef)(),
              steps = useMultistep_slicedToArray(
                Object(react.useState)(function() {
                  return [];
                }),
                1
              )[0],
              stepsMap = useMultistep_slicedToArray(
                Object(react.useState)(function() {
                  return new Map();
                }),
                1
              )[0],
              _useState6 = useMultistep_slicedToArray(
                Object(react.useState)({ steps: [], goal: null }),
                2
              ),
              multistepState = _useState6[0],
              setState = _useState6[1],
              multistepApi = Object(react.useMemo)(function() {
                var getNexStep = function getNexStep() {
                    for (
                      var nextStep,
                        i = stepsMap.get(currentStep.current).index + 1;
                      i < steps.length;
                      i++
                    ) {
                      nextStep = steps[i];
                      var formState = getFormState();
                      if (
                        !nextStep.relevant ||
                        nextStep.relevant({
                          formState: formState,
                          formApi: formApi,
                          scope: scope
                        })
                      )
                        return nextStep.name;
                    }
                  },
                  getPreviousStep = function getPreviousStep() {
                    for (
                      var previousStep,
                        i = stepsMap.get(currentStep.current).index - 1;
                      i >= 0;
                      i--
                    ) {
                      previousStep = steps[i];
                      var formState = getFormState();
                      if (
                        !previousStep.relevant ||
                        previousStep.relevant({
                          formState: formState,
                          formApi: formApi,
                          scope: scope
                        })
                      )
                        return previousStep.name;
                    }
                  },
                  proceed = function proceed(nextStep, cb) {
                    if (cb && 'function' == typeof cb) {
                      var fieldState = getFieldState(currentStep.current);
                      cb(
                        useMultistep_objectSpread(
                          useMultistep_objectSpread({}, fieldState),
                          {},
                          { values: fieldState.value, errors: fieldState.error }
                        )
                      )
                        .then(function() {
                          (currentStep.current = nextStep),
                            setState(function(prev) {
                              return useMultistep_objectSpread(
                                useMultistep_objectSpread({}, prev),
                                {},
                                { current: nextStep }
                              );
                            });
                        })
                        .catch(function() {});
                    } else
                      (currentStep.current = nextStep),
                        setState(function(prev) {
                          return useMultistep_objectSpread(
                            useMultistep_objectSpread({}, prev),
                            {},
                            { current: nextStep }
                          );
                        });
                  },
                  api = {
                    register: function register(name, step) {
                      var stepMeta = useMultistep_objectSpread(
                        useMultistep_objectSpread({}, step),
                        {},
                        { index: nSteps.current }
                      );
                      steps.push(stepMeta),
                        stepsMap.set(name, stepMeta),
                        (nSteps.current = nSteps.current + 1);
                      var initialGoal = null,
                        startingStep = null;
                      initialStep
                        ? initialStep &&
                          name === initialStep &&
                          ((initialGoal = initialStep),
                          (startingStep = steps[0].name))
                        : (startingStep = steps[0].name),
                        setState(function(prev) {
                          return (
                            !prev.current &&
                              startingStep &&
                              (currentStep.current = startingStep),
                            useMultistep_objectSpread(
                              useMultistep_objectSpread({}, prev),
                              {},
                              {
                                steps: steps,
                                goal: prev.goal || initialGoal,
                                current: prev.current || startingStep
                              }
                            )
                          );
                        });
                    },
                    next: function next(cb) {
                      var nextStep = getNexStep();
                      nextStep &&
                        (formApi.touchAllFields(),
                        validate(),
                        asyncValidate(function() {
                          return proceed(nextStep, cb);
                        }),
                        getFormState().valid &&
                          0 === getFormState().validating &&
                          proceed(nextStep, cb));
                    },
                    previous: function previous() {
                      var previousStep = getPreviousStep();
                      previousStep &&
                        ((currentStep.current = previousStep),
                        setState(function(prev) {
                          return useMultistep_objectSpread(
                            useMultistep_objectSpread({}, prev),
                            {},
                            { current: previousStep }
                          );
                        }));
                    },
                    getNexStep: getNexStep,
                    getPreviousStep: getPreviousStep,
                    setCurrent: function setCurrent(step) {
                      stepsMap.get(step).index <
                      stepsMap.get(currentStep.current).index
                        ? ((currentStep.current = step),
                          setState(function(prev) {
                            return useMultistep_objectSpread(
                              useMultistep_objectSpread({}, prev),
                              {},
                              { current: step }
                            );
                          }))
                        : setState(function(prev) {
                            return useMultistep_objectSpread(
                              useMultistep_objectSpread({}, prev),
                              {},
                              { goal: step }
                            );
                          });
                    },
                    metGoal: function metGoal() {
                      setState(function(prev) {
                        return useMultistep_objectSpread(
                          useMultistep_objectSpread({}, prev),
                          {},
                          { goal: null }
                        );
                      });
                    }
                  };
                return multistepApiRef && (multistepApiRef.current = api), api;
              }, []);
            return (
              Object(react.useEffect)(function() {
                var listener = function listener() {
                  setState(function(prev) {
                    return useMultistep_objectSpread(
                      useMultistep_objectSpread({}, prev),
                      {},
                      {
                        nextStep: multistepApi.getNexStep(),
                        previousStep: multistepApi.getPreviousStep()
                      }
                    );
                  });
                };
                return (
                  emitter.on('multistep-relevance', listener),
                  function() {
                    emitter.removeListener('multistep-relevance', listener);
                  }
                );
              }, []),
              useMultistep_objectSpread(
                useMultistep_objectSpread(
                  useMultistep_objectSpread({}, multistepApi),
                  multistepState
                ),
                {},
                {
                  render: function render(children) {
                    return react_default.a.createElement(
                      Context.h.Provider,
                      { value: multistepApi },
                      react_default.a.createElement(
                        Context.i.Provider,
                        { value: multistepState },
                        children
                      )
                    );
                  }
                }
              )
            );
          })(Multistep_objectWithoutProperties(_ref, Multistep_excluded)),
          render = _useMultistep.render,
          context = Multistep_objectWithoutProperties(
            _useMultistep,
            Multistep_excluded2
          );
        return render(
          'function' == typeof children ? children(context) : children
        );
      }
      Multistep.Step = function MultistepStep(_ref2) {
        var children = _ref2.children,
          _useMultistepStep = (function useMultistepStep(_ref) {
            var step = _ref.step,
              relevant = _ref.relevant,
              keepState = _ref.keepState,
              _ref$relevanceWhen = _ref.relevanceWhen,
              relevanceWhen =
                void 0 === _ref$relevanceWhen ? [] : _ref$relevanceWhen,
              formController = useFormController(),
              _useMultistepState = useMultistepState(),
              current = _useMultistepState.current,
              goal = _useMultistepState.goal,
              _useMultistepApi = useMultistepApi(),
              register = _useMultistepApi.register,
              next = _useMultistepApi.next,
              metGoal = _useMultistepApi.metGoal,
              active = step === current;
            Object(react.useEffect)(function() {
              register(step, { name: step, relevant: relevant });
            }, []);
            var isRelevant = useRelevance_useRelevance({
              name: step,
              relevant: relevant,
              relevanceWhen: relevanceWhen
            });
            return (
              Object(react.useEffect)(
                function() {
                  isRelevant ||
                    keepState ||
                    (useMultistepStep_logger(
                      'MULTISTEP RELEVNAT REMOVING',
                      step
                    ),
                    formController.remove(step)),
                    formController.emitter.emit('multistep-relevance');
                },
                [isRelevant]
              ),
              Object(react.useEffect)(
                function() {
                  goal &&
                    active &&
                    goal !== step &&
                    (useMultistepStep_logger('GOAL', goal, 'STEP', step),
                    useMultistepStep_logger('GOING TO NEXT STEP'),
                    next()),
                    goal && active && goal === step && metGoal();
                },
                [goal, active]
              ),
              {
                active: active,
                step: step,
                render: function render(children) {
                  return react_default.a.createElement(
                    Context.j.Provider,
                    { value: active },
                    react_default.a.createElement(
                      Scope_Scope,
                      { scope: step },
                      active ? children : null
                    )
                  );
                },
                relevant: isRelevant
              }
            );
          })(Multistep_objectWithoutProperties(_ref2, _excluded3));
        return (0, _useMultistepStep.render)(children);
      };
      var FormStateAccessor_FormStateAccessor = function FormStateAccessor(
        _ref
      ) {
        return (0, _ref.children)(useFormState());
      };
      function useArrayFieldItemState() {
        return Object(react.useContext)(Context.c);
      }
    },
    1121: function(module, exports) {},
    119: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0),
        react__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__
        );
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return _assertThisInitialized(self);
      }
      function _assertThisInitialized(self) {
        if (void 0 === self)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        return self;
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      var Modal = (function(_Component) {
        !(function _inherits(subClass, superClass) {
          if ('function' != typeof superClass && null !== superClass)
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          (subClass.prototype = Object.create(
            superClass && superClass.prototype,
            { constructor: { value: subClass, writable: !0, configurable: !0 } }
          )),
            superClass && _setPrototypeOf(subClass, superClass);
        })(Modal, _Component);
        var _super = _createSuper(Modal);
        function Modal(props) {
          var _this;
          return (
            (function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor))
                throw new TypeError('Cannot call a class as a function');
            })(this, Modal),
            _defineProperty(
              _assertThisInitialized((_this = _super.call(this, props))),
              'open',
              function() {
                _this.setState({ open: !0 });
              }
            ),
            _defineProperty(_assertThisInitialized(_this), 'close', function() {
              _this.setState({ open: !1 });
            }),
            (_this.state = { open: !1 }),
            _this
          );
        }
        return (
          (function _createClass(Constructor, protoProps, staticProps) {
            return (
              protoProps &&
                _defineProperties(Constructor.prototype, protoProps),
              staticProps && _defineProperties(Constructor, staticProps),
              Constructor
            );
          })(Modal, [
            {
              key: 'componentDidMount',
              value: function componentDidMount() {
                this.props.getControl && this.props.getControl(this.controller);
              }
            },
            {
              key: 'controller',
              get: function get() {
                return { open: this.open, close: this.close };
              }
            },
            {
              key: 'render',
              value: function render() {
                return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                  react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,
                  null,
                  this.state.open
                    ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,
                        null,
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                          'div',
                          {
                            style: {
                              position: 'fixed',
                              top: 0,
                              bottom: 0,
                              left: 0,
                              right: 0,
                              backgroundColor: 'rgba(0,0,0,0.7)'
                            }
                          }
                        ),
                        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                          'div',
                          {
                            style: {
                              minHeight: '50px',
                              minWidth: '400px',
                              position: 'fixed',
                              paddingBottom: '2.5rem',
                              top: '50%',
                              left: '50%',
                              backgroundColor: 'white',
                              transform: 'translate(-50%, -50%)',
                              borderRadius: '6px',
                              boxShadow: '2px 2px 4px rgba(0,0,0,0.3)',
                              display: 'flex',
                              flexDirection: 'column'
                            }
                          },
                          react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                            'div',
                            {
                              style: {
                                flex: 1,
                                textAlign: 'right',
                                color: 'rgb(167, 26, 21)',
                                fontSize: '1.8rem'
                              }
                            },
                            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                              'span',
                              {
                                style: {
                                  marginRight: '1rem',
                                  cursor: 'pointer'
                                },
                                onClick: this.close
                              },
                              react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                                'strong',
                                null,
                                'x'
                              )
                            )
                          ),
                          react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                            'div',
                            { style: { flex: 4, textAlign: 'center' } },
                            this.props.children
                          )
                        )
                      )
                    : null
                );
              }
            }
          ]),
          Modal
        );
      })(react__WEBPACK_IMPORTED_MODULE_0__.Component);
      (Modal.__docgenInfo = {
        description: '',
        methods: [
          {
            name: 'open',
            docblock: null,
            modifiers: [],
            params: [],
            returns: null
          },
          {
            name: 'close',
            docblock: null,
            modifiers: [],
            params: [],
            returns: null
          },
          {
            name: 'controller',
            docblock: null,
            modifiers: ['get'],
            params: [],
            returns: null
          }
        ],
        displayName: 'Modal'
      }),
        (__webpack_exports__.a = Modal),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['stories/utils/Modal.js'] = {
            name: 'Modal',
            docgenInfo: Modal.__docgenInfo,
            path: 'stories/utils/Modal.js'
          });
    },
    12: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0),
        react__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__
        ),
        react_prism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(939);
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      var _excluded = ['children', 'language'];
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var Code = (function(_Component) {
        !(function _inherits(subClass, superClass) {
          if ('function' != typeof superClass && null !== superClass)
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          (subClass.prototype = Object.create(
            superClass && superClass.prototype,
            { constructor: { value: subClass, writable: !0, configurable: !0 } }
          )),
            superClass && _setPrototypeOf(subClass, superClass);
        })(Code, _Component);
        var _super = _createSuper(Code);
        function Code() {
          return _classCallCheck(this, Code), _super.apply(this, arguments);
        }
        return (
          (function _createClass(Constructor, protoProps, staticProps) {
            return (
              protoProps &&
                _defineProperties(Constructor.prototype, protoProps),
              staticProps && _defineProperties(Constructor, staticProps),
              Constructor
            );
          })(Code, [
            {
              key: 'render',
              value: function render() {
                var _this$props = this.props,
                  children = _this$props.children,
                  language = _this$props.language,
                  rest = _objectWithoutProperties(_this$props, _excluded);
                return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                  'pre',
                  rest,
                  react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                    react_prism__WEBPACK_IMPORTED_MODULE_1__.PrismCode,
                    { className: language },
                    children
                  )
                );
              }
            }
          ]),
          Code
        );
      })(react__WEBPACK_IMPORTED_MODULE_0__.Component);
      (Code.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Code'
      }),
        (__webpack_exports__.a = Code),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['stories/utils/Code.js'] = {
            name: 'Code',
            docgenInfo: Code.__docgenInfo,
            path: 'stories/utils/Code.js'
          });
    },
    122: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__.d(__webpack_exports__, 'h', function() {
        return TextInput;
      }),
        __webpack_require__.d(__webpack_exports__, 'g', function() {
          return Inputs_TextAreaInput;
        }),
        __webpack_require__.d(__webpack_exports__, 'e', function() {
          return Inputs_RadioInput;
        }),
        __webpack_require__.d(__webpack_exports__, 'a', function() {
          return Inputs_CheckboxInput;
        }),
        __webpack_require__.d(__webpack_exports__, 'f', function() {
          return Inputs_SelectInput;
        }),
        __webpack_require__.d(__webpack_exports__, 'c', function() {
          return Inputs_MultiSelectInput;
        }),
        __webpack_require__.d(__webpack_exports__, 'b', function() {
          return Inputs_Intro;
        }),
        __webpack_require__.d(__webpack_exports__, 'd', function() {
          return NumberInput;
        });
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        TextInput = Object(withDocs.a)(
          '# Input\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, Debug } from \'informed\';\n\nconst InputExample = () => (\n  <Form>\n    <Input name="name" label="First name:" />\n    <button type="submit">Submit</button>\n    <Debug values />\n  </Form>\n);\n```\n',
          function InputExample() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'First name:'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { values: !0 })
            );
          }
        ),
        NumberInput = Object(withDocs.a)(
          '# Number Input\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, Debug } from \'informed\';\n\nconst Number = () => (\n  <Form>\n    <Input name="age" type="number" label="Age:" />\n    <button type="submit">Submit</button>\n    <Debug values />\n  </Form>\n);\n```\n',
          function Number() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.j, {
                name: 'age',
                type: 'number',
                label: 'Age:'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { values: !0 })
            );
          }
        ),
        Inputs_TextAreaInput = (__webpack_require__(12),
        Object(withDocs.a)(
          '# TextArea Input\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, TextArea, Debug } from \'informed\';\n\nconst TextAreaInput = () => (\n  <Form>\n    <TextArea name="bio" label="Bio:" />\n    <button type="submit">Submit</button>\n    <Debug values />\n  </Form>\n);\n```\n',
          function TextAreaInput() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.s, {
                name: 'bio',
                label: 'Bio:'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { values: !0 })
            );
          }
        )),
        Inputs_RadioInput = Object(withDocs.a)(
          '# Radio Input\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, RadioGroup, Radio, Debug } from \'informed\';\n\nconst RadioInput = () => (\n  <Form>\n    <RadioGroup name="gender">\n      <Radio value="male" label="Male" />\n      <Radio value="female" label="Female" />\n    </RadioGroup>\n    <button type="submit">Submit</button>\n    <Debug values />\n  </Form>\n);\n```\n',
          function RadioInput() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(
                src.n,
                { name: 'gender' },
                react_default.a.createElement(src.m, {
                  value: 'male',
                  label: 'Male'
                }),
                react_default.a.createElement(src.m, {
                  value: 'female',
                  label: 'Female'
                })
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { values: !0 })
            );
          }
        ),
        Inputs_CheckboxInput = Object(withDocs.a)(
          '# Checkbox Input\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Checkbox, Debug } from \'informed\';\n\nconst CheckboxInput = () => (\n  <Form>\n    <Checkbox name="authorize" label="Authorize" />\n    <button type="submit">Submit</button>\n    <Debug values />\n  </Form>\n);\n```\n',
          function CheckboxInput() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.b, {
                name: 'authorize',
                label: 'Authorize'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { values: !0 })
            );
          }
        ),
        Inputs_SelectInput = Object(withDocs.a)(
          '# Select Input\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Select, Option, Debug } from \'informed\';\n\nconst SelectInput = () => (\n  <Form>\n    <Select name="status" label="Relationship status:">\n      <Option value="" disabled>\n        Select One...\n      </Option>\n      <Option value="single">Single</Option>\n      <Option value="relationship">Relationship</Option>\n      <Option value="complicated">Complicated</Option>\n    </Select>\n    <button type="submit">Submit</button>\n    <Debug values />\n  </Form>\n);\n```\n',
          function SelectInput() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(
                src.r,
                { name: 'status', label: 'Relationship status:' },
                react_default.a.createElement(
                  src.l,
                  { value: '', disabled: !0 },
                  'Select One...'
                ),
                react_default.a.createElement(
                  src.l,
                  { value: 'single' },
                  'Single'
                ),
                react_default.a.createElement(
                  src.l,
                  { value: 'relationship' },
                  'Relationship'
                ),
                react_default.a.createElement(
                  src.l,
                  { value: 'complicated' },
                  'Complicated'
                )
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { values: !0 })
            );
          }
        ),
        MultiSelectInput_MultiSelectInput = function MultiSelectInput() {
          return react_default.a.createElement(
            src.f,
            null,
            react_default.a.createElement(
              src.r,
              {
                name: 'colors',
                label: 'Colors:',
                multiple: !0,
                style: { height: '100px', width: '200px' }
              },
              react_default.a.createElement(src.l, { value: 'red' }, 'Red'),
              react_default.a.createElement(src.l, { value: 'green' }, 'Green'),
              react_default.a.createElement(src.l, { value: 'blue' }, 'Blue'),
              react_default.a.createElement(
                src.l,
                { value: 'yellow' },
                'Yellow'
              ),
              react_default.a.createElement(
                src.l,
                { value: 'orange' },
                'Orange'
              ),
              react_default.a.createElement(
                src.l,
                { value: 'purple' },
                'Purple'
              )
            ),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, { values: !0 })
          );
        },
        Inputs_MultiSelectInput = Object(withDocs.a)(
          '# MultiSelect Input\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Select, Option, Debug } from \'informed\';\n\n<Form>\n  <Select\n    name="colors"\n    label="Colors:"\n    multiple\n    style={{ height: \'100px\', width: \'200px\' }}>\n    <Option value="red">Red</Option>\n    <Option value="green">Green</Option>\n    <Option value="blue">Blue</Option>\n    <Option value="yellow">Yellow</Option>\n    <Option value="orange">Orange</Option>\n    <Option value="purple">Purple</Option>\n  </Select>\n  <button type="submit">Submit</button>\n  <Debug values />\n</Form>;\n```\n',
          function MultiSelectInputWrapper() {
            return react_default.a.createElement(
              MultiSelectInput_MultiSelectInput,
              null
            );
          }
        ),
        Inputs_Intro = Object(withDocs.a)(
          '# Intro\n\nInformed comes with some basic default inputs. All inputs are built utilizing the `useField` hook, and therefore have access to all the properties of an informed\'s field. This design allows you to define your very own Input types if the defaults don\'t suite your needs! For additional information on custom Inputs, see the custom input section. If you are just getting started, or don\'t care to create your own custom inputs, simply take a look at the included input types.\n\n## Input Props\n\nBelow are all the input props that `informed`\'s inputs accept.\n\n| Name                | Type   | Required | Description                                                                                                                                                                                                                              |\n| ------------------- | ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| name                | string | YES      | Every input must have a name. This is how the form manages the state of this input. See the field syntax section below for additional details on what you can pass in for field.                                                         |\n| initialValue        | any    | NO       | An initial value for that field.                                                                                                                                                                                                         |\n| defaultValue        | any    | NO       | A default value for that field.                                                                                                                                                                                                          |\n| validate            | func   | NO       | Function that gets called when form performs validation. Function accepts the value as a parameter and must return either an error or undefined. By default it only gets called onSubmit. See Validation section for additional details. |\n| validateOn          | bool   | NO       | Tells field when to perform validation. By default it only validates onBlur.                                                                                                                                                             |\n| validateOnMount     | bool   | NO       | Tells field to perform validation onMount.                                                                                                                                                                                               |  |\n| keepState           | bool   | NO       | Keeps the field state around even when the input itself is unmounted ( see dynamic form docs for example )                                                                                                                               |\n| keepStateIfRelevant | bool   | NO       | Keeps the field state around even when the input itself is not mounted ( only if its also relevant )                                                                                                                                     |\n| maintainCursor      | bool   | NO       | formatter and parser functions will sometimes cause the cursor position to get lost. By default we informed will maintain cursor position. You can toggle that off here.                                                                 |\n| allowEmptyString    | bool   | NO       | Enable empty strings in the input value ( by default when you backspace everything in a text field it will remove the value )                                                                                                            |\n| `<input>` props     | html-5 | NO       | All inputs can accept any props that a native html input, select, textarea, etc. can accept. For example, if you want to disable a text input, you would simply pass `disabled`.                                                         |\n\n## Field Syntax\n\nEvery input in `informed` needs an associated field name. In its simplest form, field names are just strings. However, sometimes you may have some complex forms that require special ways of organizing your fields, this is where the special syntax comes in.\n\nFields can be simple strings, strings that contain ".", and strings that contain "[ ]", much like how you access and write to objects and arrays in javascript. Below are some examples of field names and what they resolve to in the forms values object.\n\n| Field                  | Resolution               |\n| ---------------------- | ------------------------ |\n| `"username"`           | `values.username`        |\n| `"friends[0]"`         | `values.friends[0]`      |\n| `"siblings.1"`         | `values.siblings[1]`     |\n| `"siblings[\'2\']"`      | `values.siblings[2]`     |\n| `"parents[0].name"`    | `values.parents[0].name` |\n| `"parents[1][\'name\']"` | `values.parents[1].name` |\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, Debug } from \'informed\';\n\nconst Example = () => (\n  <Form>\n    <Input name="username" label="Username:" />\n    <Input name="friends[0]" label="Friend[0]" />\n    <Input name="siblings.1" label="Siblings.1" />\n    <Input name="siblings[\'2\']" label="Siblings[\'2\']" />\n    <Input name="parents[0].name" label="Parents[0].name:" />\n    <button type="submit">Submit</button>\n    Values:\n    <Debug values />\n  </Form>\n);\n```\n',
          function Intro() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(
                'div',
                null,
                react_default.a.createElement(src.j, {
                  name: 'username',
                  label: 'Username:'
                }),
                react_default.a.createElement(src.j, {
                  name: 'friends[0]',
                  label: 'Friend[0]'
                }),
                react_default.a.createElement(src.j, {
                  name: 'siblings.1',
                  label: 'Siblings.1'
                }),
                react_default.a.createElement(src.j, {
                  name: "siblings['2']",
                  label: "Siblings['2']"
                }),
                react_default.a.createElement(src.j, {
                  name: 'parents[0].name',
                  label: 'Parents[0].name:'
                }),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                ),
                'Values:',
                react_default.a.createElement(src.c, { values: !0 })
              )
            );
          }
        );
    },
    1258: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      __webpack_require__(37);
    },
    165: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__.d(__webpack_exports__, 'e', function() {
        return useFormApi;
      }),
        __webpack_require__.d(__webpack_exports__, 'f', function() {
          return useFormState;
        }),
        __webpack_require__.d(__webpack_exports__, 'b', function() {
          return useFieldApi;
        }),
        __webpack_require__.d(__webpack_exports__, 'c', function() {
          return useFieldState;
        }),
        __webpack_require__.d(__webpack_exports__, 'd', function() {
          return useForm;
        }),
        __webpack_require__.d(__webpack_exports__, 'a', function() {
          return useField;
        });
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        useFormApi_ComponentUsingFormApi = function ComponentUsingFormApi() {
          var formApi = Object(src.A)();
          return react_default.a.createElement(
            'button',
            {
              type: 'button',
              onClick: function onClick() {
                return formApi.setValue(
                  'name',
                  Math.floor(
                    Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)
                  )
                );
              }
            },
            'Random'
          );
        },
        useFormApi = Object(withDocs.a)(
          '# Use Form Api\n\nThe `useFormApi` hook will allow you to gain access to the formApi.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, useFormApi } from \'informed\';\n\nconst ComponentUsingFormApi = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type="button"\n      onClick={() =>\n        formApi.setValue(\n          \'name\',\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n        )\n      }>\n      Random\n    </button>\n  );\n};\n\nconst UseFormApi = () => (\n  <Form>\n    <div>\n      <Input name="name" label="Name:" />\n      <button type="submit">Submit</button>\n      <h5>Component using formApi:</h5>\n      <ComponentUsingFormApi />\n    </div>\n  </Form>\n);\n```\n',
          function UseFormApi() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(
                'div',
                null,
                react_default.a.createElement(src.j, {
                  name: 'name',
                  label: 'Name:'
                }),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                ),
                react_default.a.createElement(
                  'h5',
                  null,
                  'Component using formApi:'
                ),
                react_default.a.createElement(
                  useFormApi_ComponentUsingFormApi,
                  null
                )
              )
            );
          }
        ),
        useFormState_ComponentUsingFormState = function ComponentUsingFormState() {
          var formState = Object(src.B)();
          return react_default.a.createElement(
            'pre',
            null,
            react_default.a.createElement(
              'code',
              null,
              JSON.stringify(formState, null, 2)
            )
          );
        },
        useFormState = Object(withDocs.a)(
          '# Use Form State\n\nThe `useFormState` hook will allow you to gain access to the formState.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, useFormState } from \'informed\';\n\nconst ComponentUsingFormState = () => {\n  const formState = useFormState();\n  return (\n    <pre>\n      <code>{JSON.stringify(formState, null, 2)}</code>\n    </pre>\n  );\n};\n\n<Form>\n  <Input name="name" label="Name:" />\n  <button type="submit">Submit</button>\n  <h5>Component using formState:</h5>\n  <ComponentUsingFormState />\n</Form>;\n```\n',
          function UseFormState() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'Name:'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(
                'h5',
                null,
                'Component using formState:'
              ),
              react_default.a.createElement(
                useFormState_ComponentUsingFormState,
                null
              )
            );
          }
        ),
        useFieldApi_ComponentUsingFieldApi = function ComponentUsingFieldApi() {
          var fieldApi = Object(src.x)('name');
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement(
              'button',
              {
                type: 'button',
                onClick: function onClick() {
                  return fieldApi.setValue(
                    Math.floor(
                      Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)
                    )
                  );
                }
              },
              'Random'
            ),
            react_default.a.createElement(
              'button',
              {
                type: 'button',
                onClick: function onClick() {
                  return fieldApi.reset();
                }
              },
              'Reset'
            )
          );
        },
        useFieldApi = Object(withDocs.a)(
          '# Use Field Api\n\nThe `useFieldApi` hook will allow you to gain access to a fields api.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, useFieldApi } from \'informed\';\n\nconst ComponentUsingFieldApi = () => {\n  const fieldApi = useFieldApi(\'name\');\n  return (\n    <button\n      type="button"\n      onClick={() =>\n        fieldApi.setValue(\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n        )\n      }>\n      Random\n    </button>\n  );\n};\n\n<Form>\n  <Input name="name" label="Name:" initialValue="Joe" />\n  <button type="submit">Submit</button>\n  <h5>Component using fieldApi:</h5>\n  <ComponentUsingFieldApi />\n</Form>;\n```\n',
          function UseFieldApi() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'Name:',
                initialValue: 'Joe'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(
                'h5',
                null,
                'Component using fieldApi:'
              ),
              react_default.a.createElement(
                useFieldApi_ComponentUsingFieldApi,
                null
              )
            );
          }
        ),
        useFieldState_ComponentUsingFieldState = function ComponentUsingFieldState(
          _ref
        ) {
          var name = _ref.name,
            fieldState = Object(src.y)(name);
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement(
              'h5',
              null,
              'Component using fieldState: ',
              name
            ),
            'Render: ',
            Math.random(),
            react_default.a.createElement(
              'pre',
              null,
              react_default.a.createElement(
                'code',
                null,
                JSON.stringify(fieldState, null, 2)
              )
            )
          );
        },
        useFieldState = Object(withDocs.a)(
          '# Use Field State\n\nThe `useFieldState` hook will allow you to gain access to a fields state. Note how one does not affect the others render!\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, useFieldState } from \'informed\';\n\nconst ComponentUsingFieldState = ({ name }) => {\n  const fieldState = useFieldState(name);\n  return (\n    <>\n      <h5>Component using fieldState: {name}</h5>\n      Render: {Math.random()}\n      <pre>\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\n<Form>\n  <Input name="name" label="Name:" initialValue="Joe" />\n  <Input field="age" label="Age:" type="number" />\n  <button type="submit">Submit</button>\n  <ComponentUsingFieldState name="name" />\n  <ComponentUsingFieldState name="age" />\n</Form>;\n```\n',
          function UseFieldState() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'Name:',
                initialValue: 'Joe'
              }),
              react_default.a.createElement(src.j, {
                field: 'age',
                label: 'Age:',
                type: 'number'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(
                useFieldState_ComponentUsingFieldState,
                { name: 'name' }
              ),
              react_default.a.createElement(
                useFieldState_ComponentUsingFieldState,
                { name: 'age' }
              )
            );
          }
        ),
        _excluded = ['children'];
      function _extends() {
        return (
          (_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          _extends.apply(this, arguments)
        );
      }
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var useForm_CustomForm = function CustomForm(_ref) {
          var children = _ref.children,
            rest = _objectWithoutProperties(_ref, _excluded),
            _useForm = Object(src.z)(rest),
            formController = _useForm.formController,
            render = _useForm.render,
            userProps = _useForm.userProps;
          return render(
            react_default.a.createElement(
              'form',
              _extends({}, userProps, {
                onReset: formController.reset,
                onSubmit: formController.submitForm,
                onKeyDown: formController.keyDown
              }),
              children
            )
          );
        },
        useForm = Object(withDocs.a)(
          '# Use Form\n\nThe `useForm` hook will allow you create your own form components.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Input, useForm } from \'informed\';\n\nconst CustomForm = ({ children, ...rest }) => {\n  const { formController, render, userProps } = useForm(rest);\n\n  /* --- DONT FORGET TO CALL THE RENDER METHOD FROM THE HOOK! --- */\n  return render(\n    <form\n      {...userProps}\n      onReset={formController.reset}\n      onSubmit={formController.submitForm}\n      onKeyDown={formController.keyDown}>\n      {children}\n    </form>\n  );\n};\n\nconst UseFormExample = () => (\n  <CustomForm>\n    <Input field="name" name="First name:" />\n    <button type="submit">Submit</button>\n    <Debug />\n  </CustomForm>\n);\n```\n',
          function UseFormExample() {
            return react_default.a.createElement(
              useForm_CustomForm,
              null,
              react_default.a.createElement(src.j, {
                field: 'name',
                name: 'First name:'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, null)
            );
          }
        ),
        Code = __webpack_require__(12);
      function useFieldDirect_extends() {
        return (
          (useFieldDirect_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          useFieldDirect_extends.apply(this, arguments)
        );
      }
      var onSubmit = function onSubmit(_ref) {
          var values = _ref.values;
          return window.alert(
            'Form successfully submitted with '.concat(JSON.stringify(values))
          );
        },
        useFieldCustom_excluded = (Object(withDocs.a)(
          '# Use Field Without Custom Input\n\nIts NOT recomended to write forms this way but its totally doable. Below we hook up each field\nvia a call to useField.\n\nThe reason I say "NOT" is due to the fact that this hook is best used in a custom input. See the [custom inputs](/?path=/story/custominputs--creating-custom-inputs) section of the docs.\n\nAlso there is a great optimization that is made when using the render function that the `useField` hook returns.\n\n\x3c!-- STORY --\x3e\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { useForm, useField } from \'informed\';\n\nconst onSubmit = ({ values }) =>\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\n\nconst MyForm = () => {\n  const { formController, render } = useForm({\n    onSubmit\n  });\n\n  const { informed: informName } = useField({\n    formController,\n    field: \'name\',\n    fieldType: \'text\'\n  });\n  const { informed: informAge } = useField({\n    formController,\n    field: \'age\',\n    fieldType: \'number\'\n  });\n  const { informed: informStatus } = useField({\n    formController,\n    field: \'status\',\n    fieldType: \'select\'\n  });\n  const { informed: informColors } = useField({\n    formController,\n    field: \'colors\',\n    fieldType: \'select\',\n    multiple: true\n  });\n  const { informed: informAuthorize } = useField({\n    formController,\n    field: \'authorize\',\n    fieldType: \'checkbox\'\n  });\n\n  return render(\n    <form\n      onReset={formController.reset}\n      onSubmit={formController.submitForm}\n      onKeyDown={formController.keyDown}>\n      <>\n        <label>\n          First name: <input {...informName} />\n        </label>\n        <label>\n          Age: <input {...informAge} type="number" />\n        </label>\n        <label>\n          Relationship status:\n          <select {...informStatus}>\n            <option value="" disabled>\n              Select One...\n            </option>\n            <option value="single">Single</option>\n            <option value="relationship">Relationship</option>\n            <option value="complicated">Complicated</option>\n          </select>\n        </label>\n        <label>\n          Colors:\n          <select {...informColors} style={{ height: \'100px\', width: \'200px\' }}>\n            <option value="red">Red</option>\n            <option value="green">Green</option>\n            <option value="blue">Blue</option>\n            <option value="yellow">Yellow</option>\n            <option value="orange">Orange</option>\n            <option value="purple">Purple</option>\n          </select>\n        </label>\n        <label>\n          Authorize <input type="checkbox" {...informAuthorize} />\n        </label>\n      </>\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n```\n',
          function UseFieldDirect() {
            var _useForm = Object(src.z)({ onSubmit: onSubmit }),
              formController = _useForm.formController,
              render = _useForm.render,
              formState = _useForm.formState,
              informName = Object(src.w)({
                formController: formController,
                field: 'name',
                fieldType: 'text'
              }).informed,
              informAge = Object(src.w)({
                formController: formController,
                field: 'age',
                fieldType: 'number'
              }).informed,
              informStatus = Object(src.w)({
                formController: formController,
                field: 'status',
                fieldType: 'select'
              }).informed,
              informColors = Object(src.w)({
                formController: formController,
                field: 'colors',
                fieldType: 'select',
                multiple: !0
              }).informed,
              informAuthorize = Object(src.w)({
                formController: formController,
                field: 'authorize',
                fieldType: 'checkbox'
              }).informed;
            return render(
              react_default.a.createElement(
                'form',
                {
                  onReset: formController.reset,
                  onSubmit: formController.submitForm,
                  onKeyDown: formController.keyDown
                },
                react_default.a.createElement(
                  react_default.a.Fragment,
                  null,
                  react_default.a.createElement(
                    'label',
                    null,
                    'First name: ',
                    react_default.a.createElement('input', informName)
                  ),
                  react_default.a.createElement(
                    'label',
                    null,
                    'Age: ',
                    react_default.a.createElement(
                      'input',
                      useFieldDirect_extends({}, informAge, { type: 'number' })
                    )
                  ),
                  react_default.a.createElement(
                    'label',
                    null,
                    'Relationship status:',
                    react_default.a.createElement(
                      'select',
                      informStatus,
                      react_default.a.createElement(
                        'option',
                        { value: '', disabled: !0 },
                        'Select One...'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'single' },
                        'Single'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'relationship' },
                        'Relationship'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'complicated' },
                        'Complicated'
                      )
                    )
                  ),
                  react_default.a.createElement(
                    'label',
                    null,
                    'Colors:',
                    react_default.a.createElement(
                      'select',
                      useFieldDirect_extends({}, informColors, {
                        style: { height: '100px', width: '200px' }
                      }),
                      react_default.a.createElement(
                        'option',
                        { value: 'red' },
                        'Red'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'green' },
                        'Green'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'blue' },
                        'Blue'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'yellow' },
                        'Yellow'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'orange' },
                        'Orange'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'purple' },
                        'Purple'
                      )
                    )
                  ),
                  react_default.a.createElement(
                    'label',
                    null,
                    'Authorize ',
                    react_default.a.createElement(
                      'input',
                      useFieldDirect_extends(
                        { type: 'checkbox' },
                        informAuthorize
                      )
                    )
                  )
                ),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                ),
                react_default.a.createElement('label', null, 'Values:'),
                react_default.a.createElement(
                  Code.a,
                  { language: 'language-js' },
                  JSON.stringify(formState.values, null, 2)
                ),
                react_default.a.createElement('label', null, 'Touched:'),
                react_default.a.createElement(
                  Code.a,
                  { language: 'language-js' },
                  JSON.stringify(formState.touched, null, 2)
                )
              )
            );
          }
        ),
        ['onChange', 'onBlur']);
      function useFieldCustom_extends() {
        return (
          (useFieldCustom_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          useFieldCustom_extends.apply(this, arguments)
        );
      }
      function useFieldCustom_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function useFieldCustom_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      var useFieldCustom_CustomTextInput = function CustomTextInput(props) {
          var _useField = Object(src.w)(
              (function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = null != arguments[i] ? arguments[i] : {};
                  i % 2
                    ? ownKeys(Object(source), !0).forEach(function(key) {
                        _defineProperty(target, key, source[key]);
                      })
                    : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          target,
                          Object.getOwnPropertyDescriptors(source)
                        )
                      : ownKeys(Object(source)).forEach(function(key) {
                          Object.defineProperty(
                            target,
                            key,
                            Object.getOwnPropertyDescriptor(source, key)
                          );
                        });
                }
                return target;
              })({}, props)
            ),
            fieldState = _useField.fieldState,
            fieldApi = _useField.fieldApi,
            render = _useField.render,
            ref = _useField.ref,
            userProps = _useField.userProps,
            value = fieldState.value,
            setValue = fieldApi.setValue,
            setTouched = fieldApi.setTouched,
            _onChange = userProps.onChange,
            _onBlur = userProps.onBlur,
            rest = useFieldCustom_objectWithoutProperties(
              userProps,
              useFieldCustom_excluded
            );
          return render(
            react_default.a.createElement(
              'input',
              useFieldCustom_extends({}, rest, {
                ref: ref,
                value: value || 0 === value ? value : '',
                onChange: function onChange(e) {
                  setValue(e.target.value), _onChange && _onChange(e);
                },
                onBlur: function onBlur(e) {
                  setTouched(!0), _onBlur && _onBlur(e);
                }
              })
            )
          );
        },
        useFieldCustom = Object(withDocs.a)(
          '# Use Field\n\nHere we use the hook `useField` to create a custom text input. The idea is that you do this once\nfor a specific input type, then you simply start using your `<CustomTextInput />` throughout your code.\n\n\x3c!-- STORY --\x3e\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, useField, Debug } from \'informed\';\n\nconst CustomTextInput = props => {\n  const { fieldState, fieldApi, render, ref, userProps } = useField({\n    ...props\n  });\n\n  const { value } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { onChange, onBlur, ...rest } = userProps;\n\n  /* --- DONT FORGET TO CALL THE RENDER METHOD FROM THE HOOK! --- */\n  return render(\n    <input\n      {...rest}\n      ref={ref}\n      value={!value && value !== 0 ? \'\' : value}\n      onChange={e => {\n        setValue(e.target.value);\n        if (onChange) {\n          onChange(e);\n        }\n      }}\n      onBlur={e => {\n        setTouched(true);\n        if (onBlur) {\n          onBlur(e);\n        }\n      }}\n    />\n  );\n};\n\nconst FromScratch = () => (\n  <div>\n    <Form>\n      <label>\n        First name:\n        <CustomTextInput field="name" />\n      </label>\n      <button type="submit">Submit</button>\n      <Debug values errors />\n    </Form>\n  </div>\n);\n```\n',
          function FromScratch() {
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                null,
                react_default.a.createElement(
                  'label',
                  null,
                  'First name:',
                  react_default.a.createElement(
                    useFieldCustom_CustomTextInput,
                    { field: 'name' }
                  )
                ),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                ),
                react_default.a.createElement(src.c, { values: !0, errors: !0 })
              )
            );
          }
        ),
        useField_UseField = function UseField() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(useFieldCustom, null)
          );
        };
      useField_UseField.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'UseField'
      };
      var useField = useField_UseField;
      'undefined' != typeof STORYBOOK_REACT_CLASSES &&
        (STORYBOOK_REACT_CLASSES['stories/Hooks/useField/index.js'] = {
          name: 'UseField',
          docgenInfo: useField_UseField.__docgenInfo,
          path: 'stories/Hooks/useField/index.js'
        });
    },
    1667: function(module, exports, __webpack_require__) {
      (function(global) {
        var _self =
            'undefined' != typeof window
              ? window
              : 'undefined' != typeof WorkerGlobalScope &&
                self instanceof WorkerGlobalScope
                ? self
                : {},
          Prism = (function() {
            var e = /\blang(?:uage)?-(\w+)\b/i,
              t = 0,
              n = (_self.Prism = {
                manual: _self.Prism && _self.Prism.manual,
                util: {
                  encode: function encode(e) {
                    return e instanceof a
                      ? new a(e.type, n.util.encode(e.content), e.alias)
                      : 'Array' === n.util.type(e)
                        ? e.map(n.util.encode)
                        : e
                            .replace(/&/g, '&amp;')
                            .replace(/</g, '&lt;')
                            .replace(/\u00a0/g, ' ');
                  },
                  type: function type(e) {
                    return Object.prototype.toString
                      .call(e)
                      .match(/\[object (\w+)\]/)[1];
                  },
                  objId: function objId(e) {
                    return (
                      e.__id ||
                        Object.defineProperty(e, '__id', { value: ++t }),
                      e.__id
                    );
                  },
                  clone: function clone(e) {
                    switch (n.util.type(e)) {
                      case 'Object':
                        var a = {};
                        for (var r in e)
                          e.hasOwnProperty(r) && (a[r] = n.util.clone(e[r]));
                        return a;
                      case 'Array':
                        return (
                          e.map &&
                          e.map(function(e) {
                            return n.util.clone(e);
                          })
                        );
                    }
                    return e;
                  }
                },
                languages: {
                  extend: function extend(e, t) {
                    var a = n.util.clone(n.languages[e]);
                    for (var r in t) a[r] = t[r];
                    return a;
                  },
                  insertBefore: function insertBefore(e, t, a, r) {
                    var i = (r = r || n.languages)[e];
                    if (2 == arguments.length) {
                      for (var l in (a = arguments[1]))
                        a.hasOwnProperty(l) && (i[l] = a[l]);
                      return i;
                    }
                    var o = {};
                    for (var s in i)
                      if (i.hasOwnProperty(s)) {
                        if (s == t)
                          for (var l in a) a.hasOwnProperty(l) && (o[l] = a[l]);
                        o[s] = i[s];
                      }
                    return (
                      n.languages.DFS(n.languages, function(t, n) {
                        n === r[e] && t != e && (this[t] = o);
                      }),
                      (r[e] = o)
                    );
                  },
                  DFS: function DFS(e, t, a, r) {
                    for (var i in ((r = r || {}), e))
                      e.hasOwnProperty(i) &&
                        (t.call(e, i, e[i], a || i),
                        'Object' !== n.util.type(e[i]) || r[n.util.objId(e[i])]
                          ? 'Array' !== n.util.type(e[i]) ||
                            r[n.util.objId(e[i])] ||
                            ((r[n.util.objId(e[i])] = !0),
                            n.languages.DFS(e[i], t, i, r))
                          : ((r[n.util.objId(e[i])] = !0),
                            n.languages.DFS(e[i], t, null, r)));
                  }
                },
                plugins: {},
                highlightAll: function highlightAll(e, t) {
                  var a = {
                    callback: t,
                    selector:
                      'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
                  };
                  n.hooks.run('before-highlightall', a);
                  for (
                    var r,
                      i = a.elements || document.querySelectorAll(a.selector),
                      l = 0;
                    (r = i[l++]);

                  )
                    n.highlightElement(r, !0 === e, a.callback);
                },
                highlightElement: function highlightElement(t, a, r) {
                  for (var i, l, o = t; o && !e.test(o.className); )
                    o = o.parentNode;
                  o &&
                    ((i = (o.className.match(e) || [, ''])[1].toLowerCase()),
                    (l = n.languages[i])),
                    (t.className =
                      t.className.replace(e, '').replace(/\s+/g, ' ') +
                      ' language-' +
                      i),
                    (o = t.parentNode),
                    /pre/i.test(o.nodeName) &&
                      (o.className =
                        o.className.replace(e, '').replace(/\s+/g, ' ') +
                        ' language-' +
                        i);
                  var u = {
                    element: t,
                    language: i,
                    grammar: l,
                    code: t.textContent
                  };
                  if (
                    (n.hooks.run('before-sanity-check', u),
                    !u.code || !u.grammar)
                  )
                    return (
                      u.code &&
                        (n.hooks.run('before-highlight', u),
                        (u.element.textContent = u.code),
                        n.hooks.run('after-highlight', u)),
                      void n.hooks.run('complete', u)
                    );
                  if ((n.hooks.run('before-highlight', u), a && _self.Worker)) {
                    var g = new Worker(n.filename);
                    (g.onmessage = function(e) {
                      (u.highlightedCode = e.data),
                        n.hooks.run('before-insert', u),
                        (u.element.innerHTML = u.highlightedCode),
                        r && r.call(u.element),
                        n.hooks.run('after-highlight', u),
                        n.hooks.run('complete', u);
                    }),
                      g.postMessage(
                        JSON.stringify({
                          language: u.language,
                          code: u.code,
                          immediateClose: !0
                        })
                      );
                  } else
                    (u.highlightedCode = n.highlight(
                      u.code,
                      u.grammar,
                      u.language
                    )),
                      n.hooks.run('before-insert', u),
                      (u.element.innerHTML = u.highlightedCode),
                      r && r.call(t),
                      n.hooks.run('after-highlight', u),
                      n.hooks.run('complete', u);
                },
                highlight: function highlight(e, t, r) {
                  var i = n.tokenize(e, t);
                  return a.stringify(n.util.encode(i), r);
                },
                matchGrammar: function matchGrammar(e, t, a, r, i, l, o) {
                  var s = n.Token;
                  for (var u in a)
                    if (a.hasOwnProperty(u) && a[u]) {
                      if (u == o) return;
                      var g = a[u];
                      g = 'Array' === n.util.type(g) ? g : [g];
                      for (var c = 0; c < g.length; ++c) {
                        var h = g[c],
                          f = h.inside,
                          d = !!h.lookbehind,
                          m = !!h.greedy,
                          p = 0,
                          y = h.alias;
                        if (m && !h.pattern.global) {
                          var v = h.pattern.toString().match(/[imuy]*$/)[0];
                          h.pattern = RegExp(h.pattern.source, v + 'g');
                        }
                        h = h.pattern || h;
                        for (
                          var b = r, k = i;
                          b < t.length;
                          k += t[b].length, ++b
                        ) {
                          var w = t[b];
                          if (t.length > e.length) return;
                          if (!(w instanceof s)) {
                            h.lastIndex = 0;
                            var P = 1;
                            if (!(_ = h.exec(w)) && m && b != t.length - 1) {
                              if (((h.lastIndex = k), !(_ = h.exec(e)))) break;
                              for (
                                var A = _.index + (d ? _[1].length : 0),
                                  j = _.index + _[0].length,
                                  x = b,
                                  O = k,
                                  S = t.length;
                                S > x &&
                                (j > O || (!t[x].type && !t[x - 1].greedy));
                                ++x
                              )
                                A >= (O += t[x].length) && (++b, (k = O));
                              if (t[b] instanceof s || t[x - 1].greedy)
                                continue;
                              (P = x - b), (w = e.slice(k, O)), (_.index -= k);
                            }
                            if (_) {
                              d && (p = _[1].length);
                              j =
                                (A = _.index + p) + (_ = _[0].slice(p)).length;
                              var _,
                                N = w.slice(0, A),
                                C = w.slice(j),
                                E = [b, P];
                              N && (++b, (k += N.length), E.push(N));
                              var L = new s(
                                u,
                                f ? n.tokenize(_, f) : _,
                                y,
                                _,
                                m
                              );
                              if (
                                (E.push(L),
                                C && E.push(C),
                                Array.prototype.splice.apply(t, E),
                                1 != P && n.matchGrammar(e, t, a, b, k, !0, u),
                                l)
                              )
                                break;
                            } else if (l) break;
                          }
                        }
                      }
                    }
                },
                tokenize: function tokenize(e, t) {
                  var a = [e],
                    r = t.rest;
                  if (r) {
                    for (var i in r) t[i] = r[i];
                    delete t.rest;
                  }
                  return n.matchGrammar(e, a, t, 0, 0, !1), a;
                },
                hooks: {
                  all: {},
                  add: function add(e, t) {
                    var a = n.hooks.all;
                    (a[e] = a[e] || []), a[e].push(t);
                  },
                  run: function run(e, t) {
                    var a = n.hooks.all[e];
                    if (a && a.length) for (var r, i = 0; (r = a[i++]); ) r(t);
                  }
                }
              }),
              a = (n.Token = function(e, t, n, a, r) {
                (this.type = e),
                  (this.content = t),
                  (this.alias = n),
                  (this.length = 0 | (a || '').length),
                  (this.greedy = !!r);
              });
            if (
              ((a.stringify = function(e, t, r) {
                if ('string' == typeof e) return e;
                if ('Array' === n.util.type(e))
                  return e
                    .map(function(n) {
                      return a.stringify(n, t, e);
                    })
                    .join('');
                var i = {
                  type: e.type,
                  content: a.stringify(e.content, t, r),
                  tag: 'span',
                  classes: ['token', e.type],
                  attributes: {},
                  language: t,
                  parent: r
                };
                if (
                  ('comment' == i.type && (i.attributes.spellcheck = 'true'),
                  e.alias)
                ) {
                  var l =
                    'Array' === n.util.type(e.alias) ? e.alias : [e.alias];
                  Array.prototype.push.apply(i.classes, l);
                }
                n.hooks.run('wrap', i);
                var o = Object.keys(i.attributes)
                  .map(function(e) {
                    return (
                      e +
                      '="' +
                      (i.attributes[e] || '').replace(/"/g, '&quot;') +
                      '"'
                    );
                  })
                  .join(' ');
                return (
                  '<' +
                  i.tag +
                  ' class="' +
                  i.classes.join(' ') +
                  '"' +
                  (o ? ' ' + o : '') +
                  '>' +
                  i.content +
                  '</' +
                  i.tag +
                  '>'
                );
              }),
              !_self.document)
            )
              return _self.addEventListener
                ? (_self.addEventListener(
                    'message',
                    function(e) {
                      var t = JSON.parse(e.data),
                        a = t.language,
                        r = t.code,
                        i = t.immediateClose;
                      _self.postMessage(n.highlight(r, n.languages[a], a)),
                        i && _self.close();
                    },
                    !1
                  ),
                  _self.Prism)
                : _self.Prism;
            var r =
              document.currentScript ||
              [].slice.call(document.getElementsByTagName('script')).pop();
            return (
              r &&
                ((n.filename = r.src),
                !document.addEventListener ||
                  n.manual ||
                  r.hasAttribute('data-manual') ||
                  ('loading' !== document.readyState
                    ? window.requestAnimationFrame
                      ? window.requestAnimationFrame(n.highlightAll)
                      : window.setTimeout(n.highlightAll, 16)
                    : document.addEventListener(
                        'DOMContentLoaded',
                        n.highlightAll
                      ))),
              _self.Prism
            );
          })();
        module.exports && (module.exports = Prism),
          void 0 !== global && (global.Prism = Prism),
          (Prism.languages.markup = {
            comment: /<!--[\s\S]*?-->/,
            prolog: /<\?[\s\S]+?\?>/,
            doctype: /<!DOCTYPE[\s\S]+?>/i,
            cdata: /<!\[CDATA\[[\s\S]*?]]>/i,
            tag: {
              pattern: /<\/?(?!\d)[^\s>\/=$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\s\S])*\1|[^\s'">=]+))?)*\s*\/?>/i,
              inside: {
                tag: {
                  pattern: /^<\/?[^\s>\/]+/i,
                  inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ }
                },
                'attr-value': {
                  pattern: /=(?:('|")[\s\S]*?(\1)|[^\s>]+)/i,
                  inside: { punctuation: /[=>"']/ }
                },
                punctuation: /\/?>/,
                'attr-name': {
                  pattern: /[^\s>\/]+/,
                  inside: { namespace: /^[^\s>\/:]+:/ }
                }
              }
            },
            entity: /&#?[\da-z]{1,8};/i
          }),
          (Prism.languages.markup.tag.inside['attr-value'].inside.entity =
            Prism.languages.markup.entity),
          Prism.hooks.add('wrap', function(a) {
            'entity' === a.type &&
              (a.attributes.title = a.content.replace(/&amp;/, '&'));
          }),
          (Prism.languages.xml = Prism.languages.markup),
          (Prism.languages.html = Prism.languages.markup),
          (Prism.languages.mathml = Prism.languages.markup),
          (Prism.languages.svg = Prism.languages.markup),
          (Prism.languages.css = {
            comment: /\/\*[\s\S]*?\*\//,
            atrule: {
              pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i,
              inside: { rule: /@[\w-]+/ }
            },
            url: /url\((?:(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,
            selector: /[^\{\}\s][^\{\};]*?(?=\s*\{)/,
            string: {
              pattern: /("|')(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
              greedy: !0
            },
            property: /(\b|\B)[\w-]+(?=\s*:)/i,
            important: /\B!important\b/i,
            function: /[-a-z0-9]+(?=\()/i,
            punctuation: /[(){};:]/
          }),
          (Prism.languages.css.atrule.inside.rest = Prism.util.clone(
            Prism.languages.css
          )),
          Prism.languages.markup &&
            (Prism.languages.insertBefore('markup', 'tag', {
              style: {
                pattern: /(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,
                lookbehind: !0,
                inside: Prism.languages.css,
                alias: 'language-css'
              }
            }),
            Prism.languages.insertBefore(
              'inside',
              'attr-value',
              {
                'style-attr': {
                  pattern: /\s*style=("|').*?\1/i,
                  inside: {
                    'attr-name': {
                      pattern: /^\s*style/i,
                      inside: Prism.languages.markup.tag.inside
                    },
                    punctuation: /^\s*=\s*['"]|['"]\s*$/,
                    'attr-value': {
                      pattern: /.+/i,
                      inside: Prism.languages.css
                    }
                  },
                  alias: 'language-css'
                }
              },
              Prism.languages.markup.tag
            )),
          (Prism.languages.clike = {
            comment: [
              { pattern: /(^|[^\\])\/\*[\s\S]*?\*\//, lookbehind: !0 },
              { pattern: /(^|[^\\:])\/\/.*/, lookbehind: !0 }
            ],
            string: {
              pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
              greedy: !0
            },
            'class-name': {
              pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,
              lookbehind: !0,
              inside: { punctuation: /(\.|\\)/ }
            },
            keyword: /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
            boolean: /\b(true|false)\b/,
            function: /[a-z0-9_]+(?=\()/i,
            number: /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,
            operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
            punctuation: /[{}[\];(),.:]/
          }),
          (Prism.languages.javascript = Prism.languages.extend('clike', {
            keyword: /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,
            number: /\b-?(0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,
            function: /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i,
            operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/
          })),
          Prism.languages.insertBefore('javascript', 'keyword', {
            regex: {
              pattern: /(^|[^\/])\/(?!\/)(\[[^\]\r\n]+]|\\.|[^\/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,
              lookbehind: !0,
              greedy: !0
            }
          }),
          Prism.languages.insertBefore('javascript', 'string', {
            'template-string': {
              pattern: /`(?:\\\\|\\?[^\\])*?`/,
              greedy: !0,
              inside: {
                interpolation: {
                  pattern: /\$\{[^}]+\}/,
                  inside: {
                    'interpolation-punctuation': {
                      pattern: /^\$\{|\}$/,
                      alias: 'punctuation'
                    },
                    rest: Prism.languages.javascript
                  }
                },
                string: /[\s\S]+/
              }
            }
          }),
          Prism.languages.markup &&
            Prism.languages.insertBefore('markup', 'tag', {
              script: {
                pattern: /(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,
                lookbehind: !0,
                inside: Prism.languages.javascript,
                alias: 'language-javascript'
              }
            }),
          (Prism.languages.js = Prism.languages.javascript),
          (Prism.languages.json = {
            property: /"(?:\\.|[^\\"])*"(?=\s*:)/gi,
            string: /"(?!:)(?:\\.|[^\\"])*"(?!:)/g,
            number: /\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee][+-]?\d+)?)\b/g,
            punctuation: /[{}[\]);,]/g,
            operator: /:/g,
            boolean: /\b(true|false)\b/gi,
            null: /\bnull\b/gi
          }),
          (Prism.languages.jsonp = Prism.languages.json),
          (function(a) {
            var e = a.util.clone(a.languages.javascript);
            (a.languages.jsx = a.languages.extend('markup', e)),
              (a.languages.jsx.tag.pattern = /<\/?[\w\.:-]+\s*(?:\s+(?:[\w\.:-]+(?:=(?:("|')(\\?[\s\S])*?\1|[^\s'">=]+|(\{[\s\S]*?\})))?|\{\.{3}\w+\}))*\s*\/?>/i),
              (a.languages.jsx.tag.inside[
                'attr-value'
              ].pattern = /=(?!\{)(?:('|")[\s\S]*?(\1)|[^\s>]+)/i),
              a.languages.insertBefore(
                'inside',
                'attr-name',
                {
                  spread: {
                    pattern: /\{\.{3}\w+\}/,
                    inside: { punctuation: /\{|\}|\./, 'attr-value': /\w+/ }
                  }
                },
                a.languages.jsx.tag
              );
            var s = a.util.clone(a.languages.jsx);
            delete s.punctuation,
              (s = a.languages.insertBefore(
                'jsx',
                'operator',
                { punctuation: /=(?={)|[{}[\];(),.:]/ },
                { jsx: s }
              )),
              a.languages.insertBefore(
                'inside',
                'attr-value',
                {
                  script: {
                    pattern: /=(\{(?:\{[^}]*\}|[^}])+\})/i,
                    inside: s,
                    alias: 'language-javascript'
                  }
                },
                a.languages.jsx.tag
              );
          })(Prism),
          (function() {
            if (
              'undefined' != typeof self &&
              self.Prism &&
              self.document &&
              Function.prototype.bind
            ) {
              var e = /(?:^|\s)token(?=$|\s)/,
                s = /(?:^|\s)active(?=$|\s)/g,
                i = /(?:^|\s)flipped(?=$|\s)/g,
                o = function o(t, e, s, i) {
                  (this._elt = null),
                    (this._type = t),
                    (this._clsRegexp = RegExp('(?:^|\\s)' + t + '(?=$|\\s)')),
                    (this._token = null),
                    (this.updater = e),
                    (this._mouseout = this.mouseout.bind(this)),
                    (this.initializer = i);
                  var n = this;
                  s || (s = ['*']),
                    'Array' !== Prism.util.type(s) && (s = [s]),
                    s.forEach(function(t) {
                      'string' != typeof t && (t = t.lang),
                        o.byLanguages[t] || (o.byLanguages[t] = []),
                        o.byLanguages[t].indexOf(n) < 0 &&
                          o.byLanguages[t].push(n);
                    }),
                    (o.byType[t] = this);
                };
              (o.prototype.init = function() {
                this._elt ||
                  ((this._elt = document.createElement('div')),
                  (this._elt.className =
                    'prism-previewer prism-previewer-' + this._type),
                  document.body.appendChild(this._elt),
                  this.initializer && this.initializer());
              }),
                (o.prototype.check = function(t) {
                  do {
                    if (
                      e.test(t.className) &&
                      this._clsRegexp.test(t.className)
                    )
                      break;
                  } while ((t = t.parentNode));
                  t && t !== this._token && ((this._token = t), this.show());
                }),
                (o.prototype.mouseout = function() {
                  this._token.removeEventListener(
                    'mouseout',
                    this._mouseout,
                    !1
                  ),
                    (this._token = null),
                    this.hide();
                }),
                (o.prototype.show = function() {
                  if ((this._elt || this.init(), this._token))
                    if (this.updater.call(this._elt, this._token.textContent)) {
                      this._token.addEventListener(
                        'mouseout',
                        this._mouseout,
                        !1
                      );
                      var e = (function t(_t) {
                        var e = 0,
                          s = 0,
                          i = _t;
                        if (i.parentNode) {
                          do {
                            (e += i.offsetLeft), (s += i.offsetTop);
                          } while ((i = i.offsetParent) && i.nodeType < 9);
                          i = _t;
                          do {
                            (e -= i.scrollLeft), (s -= i.scrollTop);
                          } while (
                            (i = i.parentNode) &&
                            !/body/i.test(i.nodeName)
                          );
                        }
                        return {
                          top: s,
                          right: innerWidth - e - _t.offsetWidth,
                          bottom: innerHeight - s - _t.offsetHeight,
                          left: e
                        };
                      })(this._token);
                      (this._elt.className += ' active'),
                        e.top - this._elt.offsetHeight > 0
                          ? ((this._elt.className = this._elt.className.replace(
                              i,
                              ''
                            )),
                            (this._elt.style.top = e.top + 'px'),
                            (this._elt.style.bottom = ''))
                          : ((this._elt.className += ' flipped'),
                            (this._elt.style.bottom = e.bottom + 'px'),
                            (this._elt.style.top = '')),
                        (this._elt.style.left =
                          e.left +
                          Math.min(200, this._token.offsetWidth / 2) +
                          'px');
                    } else this.hide();
                }),
                (o.prototype.hide = function() {
                  this._elt.className = this._elt.className.replace(s, '');
                }),
                (o.byLanguages = {}),
                (o.byType = {}),
                (o.initEvents = function(t, e) {
                  var s = [];
                  o.byLanguages[e] && (s = s.concat(o.byLanguages[e])),
                    o.byLanguages['*'] && (s = s.concat(o.byLanguages['*'])),
                    t.addEventListener(
                      'mouseover',
                      function(t) {
                        var e = t.target;
                        s.forEach(function(t) {
                          t.check(e);
                        });
                      },
                      !1
                    );
                }),
                (Prism.plugins.Previewer = o),
                Prism.hooks.add('after-highlight', function(t) {
                  (o.byLanguages['*'] || o.byLanguages[t.language]) &&
                    o.initEvents(t.element, t.language);
                });
            }
          })();
      }.call(this, __webpack_require__(33)));
    },
    1668: function(module, exports, __webpack_require__) {
      var api = __webpack_require__(400),
        content = __webpack_require__(1669);
      'string' ==
        typeof (content = content.__esModule ? content.default : content) &&
        (content = [[module.i, content, '']]);
      var options = { insert: 'head', singleton: !1 };
      api(content, options);
      module.exports = content.locals || {};
    },
    1669: function(module, exports, __webpack_require__) {
      (exports = __webpack_require__(401)(!1)).push([
        module.i,
        '/*! normalize.css v3.0.2 | MIT License | git.io/normalize */\n\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS text size adjust after orientation change, without disabling\n *    user zoom.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  -ms-text-size-adjust: 100%; /* 2 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove default margin.\n */\n\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n\n/**\n * 1. Correct `inline-block` display not defined in IE 8/9.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block; /* 1 */\n  vertical-align: baseline; /* 2 */\n}\n\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.\n */\n\n[hidden],\ntemplate {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n\n/**\n * Remove the gray background color from active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * Improve readability when focused and also mouse hovered in all browsers.\n */\n\na:active,\na:hover {\n  outline: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\n\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\n\nb,\nstrong {\n  font-weight: bold;\n}\n\n/**\n * Address styling not present in Safari and Chrome.\n */\n\ndfn {\n  font-style: italic;\n}\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Address styling not present in IE 8/9.\n */\n\nmark {\n  background: #ff0;\n  color: #000;\n}\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5em;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove border when inside `a` element in IE 8/9/10.\n */\n\nimg {\n  border: 0;\n}\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\n\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * Address differences between Firefox and other browsers.\n */\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\n\n/**\n * Contain overflow in all browsers.\n */\n\npre {\n  overflow: auto;\n}\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n */\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n\n/**\n * 1. Correct color not being inherited.\n *    Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit; /* 1 */\n  font: inherit; /* 2 */\n  margin: 0; /* 3 */\n}\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\n\nbutton {\n  overflow: visible;\n}\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\n\nbutton,\nhtml input[type="button"], /* 1 */\ninput[type="reset"],\ninput[type="submit"] {\n  -webkit-appearance: button; /* 2 */\n  cursor: pointer; /* 3 */\n}\n\n/**\n * Re-set default cursor for disabled elements.\n */\n\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\n\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\n\ninput {\n  line-height: normal;\n}\n\n/**\n * It\'s recommended that you don\'t attempt to style these elements.\n * Firefox\'s implementation doesn\'t respect box-sizing, padding, or width.\n *\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\n\ninput[type="checkbox"],\ninput[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Fix the cursor style for Chrome\'s increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\n\ninput[type="number"]::-webkit-inner-spin-button,\ninput[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome\n *    (include `-moz` to future-proof).\n */\n\ninput[type="search"] {\n  -webkit-appearance: textfield; /* 1 */ /* 2 */\n  box-sizing: content-box;\n}\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\n\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Define consistent border, margin, and padding.\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren\'t caught out if they zero out fieldsets.\n */\n\nlegend {\n  border: 0; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * Don\'t inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\n\noptgroup {\n  font-weight: bold;\n}\n\n/* Tables\n   ========================================================================== */\n\n/**\n * Remove most spacing between table cells.\n */\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}',
        ''
      ]),
        (module.exports = exports);
    },
    1670: function(module, exports, __webpack_require__) {
      var api = __webpack_require__(400),
        content = __webpack_require__(1671);
      'string' ==
        typeof (content = content.__esModule ? content.default : content) &&
        (content = [[module.i, content, '']]);
      var options = { insert: 'head', singleton: !1 };
      api(content, options);
      module.exports = content.locals || {};
    },
    1671: function(module, exports, __webpack_require__) {
      (exports = __webpack_require__(401)(!1)).push([
        module.i,
        '/* http://prismjs.com/download.html?themes=prism-okaidia&languages=markup+css+clike+javascript+json+jsx&plugins=previewer-base */\n/**\n * okaidia theme for JavaScript, CSS and HTML\n * Loosely based on Monokai textmate theme by http://www.monokai.nl/\n * @author ocodia\n */\n\ncode[class*="language-"],\npre[class*="language-"] {\n\tcolor: #f8f8f2 !important;\n\tbackground: none !important;\n\ttext-shadow: 0 1px rgba(0, 0, 0, 0.3) !important;\n\tfont-family: Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace !important;\n\ttext-align: left !important;\n\twhite-space: pre !important;\n\tword-spacing: normal !important;\n\tword-break: normal !important;\n\tword-wrap: normal !important;\n\tline-height: 1.5 !important;\n  border: none;\n\n\t-moz-tab-size: 4 !important;\n\t-o-tab-size: 4 !important;\n\ttab-size: 4 !important;\n\n\t-webkit-hyphens: none !important;\n\t-ms-hyphens: none !important;\n\thyphens: none !important;\n}\n\n/* Code blocks */\npre[class*="language-"] {\n\tpadding: 1rem !important;\n\tmargin: 0 0 !important;\n\toverflow: visible !important;\n  overflow-x: scroll !important;\n\tborder-radius: 0.3em !important;\n}\n\ncode[class*="language-"] {\n  margin: 0 !important;\n  padding: 0 !important;\n  overflow: visible !important;\n}\n\n:not(pre) > code[class*="language-"],\npre[class*="language-"] {\n\tbackground: #272822 !important;\n}\n\n/* Inline code */\n:not(pre) > code[class*="language-"] {\n\tpadding: .1em !important;\n\tborder-radius: .3em !important;\n\twhite-space: normal !important;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: slategray !important;\n}\n\n.token.punctuation {\n\tcolor: #f8f8f2 !important;\n}\n\n.namespace {\n\topacity: .7 !important;\n}\n\n.token.property,\n.token.tag,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #f92672 !important;\n}\n\n.token.boolean,\n.token.number {\n\tcolor: #ae81ff !important;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n\tcolor: #a6e22e !important;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string,\n.token.variable {\n\tcolor: #f8f8f2 !important;\n}\n\n.token.atrule,\n.token.attr-value,\n.token.function {\n\tcolor: #e6db74 !important;\n}\n\n.token.keyword {\n\tcolor: #66d9ef !important;\n}\n\n.token.regex,\n.token.important {\n\tcolor: #fd971f !important;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold !important;\n}\n.token.italic {\n\tfont-style: italic !important;\n}\n\n.token.entity {\n\tcursor: help !important;\n}\n\n.prism-previewer,\n.prism-previewer:before,\n.prism-previewer:after {\n\tposition: absolute !important;\n\tpointer-events: none !important;\n}\n.prism-previewer,\n.prism-previewer:after {\n\tleft: 50% !important;\n}\n.prism-previewer {\n\tmargin-top: -48px !important;\n\twidth: 32px !important;\n\theight: 32px !important;\n\tmargin-left: -16px !important;\n\n\topacity: 0 !important;\n\ttransition: opacity .25s !important;\n}\n.prism-previewer.flipped {\n\tmargin-top: 0 !important;\n\tmargin-bottom: -48px !important;\n}\n.prism-previewer:before,\n.prism-previewer:after {\n\tcontent: \'\' !important;\n\tposition: absolute !important;\n\tpointer-events: none !important;\n}\n.prism-previewer:before {\n\ttop: -5px !important;\n\tright: -5px !important;\n\tleft: -5px !important;\n\tbottom: -5px !important;\n\tborder-radius: 10px !important;\n\tborder: 5px solid #fff !important;\n\tbox-shadow: 0 0 3px rgba(0, 0, 0, 0.5) inset, 0 0 10px rgba(0, 0, 0, 0.75) !important;\n}\n\n.prism-previewer:after {\n\ttop: 100% !important;\n\twidth: 0 !important;\n\theight: 0 !important;\n\tmargin: 5px 0 0 -7px !important;\n\tborder: 7px solid transparent !important;\n\tborder-color: rgba(255, 0, 0, 0) !important;\n\tborder-top-color: #fff !important;\n}\n.prism-previewer.flipped:after {\n\ttop: auto !important;\n\tbottom: 100% !important;\n\tmargin-top: 0 !important;\n\tmargin-bottom: 5px !important;\n\tborder-top-color: rgba(255, 0, 0, 0) !important;\n\tborder-bottom-color: #fff !important;\n}\n.prism-previewer.active {\n\topacity: 1 !important;\n}\n',
        ''
      ]),
        (module.exports = exports);
    },
    1672: function(module, exports, __webpack_require__) {
      var api = __webpack_require__(400),
        content = __webpack_require__(1673);
      'string' ==
        typeof (content = content.__esModule ? content.default : content) &&
        (content = [[module.i, content, '']]);
      var options = { insert: 'head', singleton: !1 };
      api(content, options);
      module.exports = content.locals || {};
    },
    1673: function(module, exports, __webpack_require__) {
      (exports = __webpack_require__(401)(!1)).push([
        module.i,
        ":root {\n  --informed-font-size--10: 10px;\n  --informed-font-size--20: 12px;\n  --informed-font-size--30: 14px;\n  --informed-font-size--40: 17px;\n  --informed-font-size--50: 20px;\n  --informed-font-size--55: 23px;\n  --informed-font-size--60: 24px;\n  --informed-font-size--70: 28px;\n  --informed-font-size--75: 34px;\n  --informed-font-size--80: 40px;\n  --informed-height--pill: 40px;\n  --informed-line-height--10: 18px;\n  --informed-line-height--20: 20px;\n  --informed-line-height--30: 21px;\n  --informed-line-height--40: 23px;\n  --informed-line-height--50: 24px;\n  --informed-line-height--60: 28px;\n  --informed-line-height--70: 36px;\n  --informed-line-height--75: 45px;\n  --informed-line-height--80: 48px;\n}\n\n.body {\n  font-family: Helvetica, sans-serif;\n}\n\na > img {\n  border-radius: 10px;\n}\n\nh1 {\n  letter-spacing: -0.6px;\n  font-size: var(--informed-font-size--80, 40px);\n  line-height: var(--informed-line-height--80, 48px);\n}\n\nh2 {\n  letter-spacing: -0.5px;\n  font-size: var(--informed-font-size--70, 28px);\n  line-height: var(--informed-line-height--70, 36px);\n}\n\nh3 {\n  letter-spacing: -0.6px;\n  font-size: var(--informed-font-size--60, 24px);\n  line-height: var(--informed-line-height--60, 28px);\n}\n\nh4 {\n  letter-spacing: -0.4px;\n  font-size: var(--informed-font-size--50, 20px);\n  line-height: var(--informed-line-height--60, 28px);\n}\n\nh5 {\n  font-size: var(--informed-font-size--40, 17px);\n  line-height: var(--informed-line-height--20, 20px);\n}\n\nh6 {\n  font-size: var(--informed-font-size--30, 14px);\n  line-height: var(--informed-line-height--30, 21px);\n}\n\ninput {\n  margin-bottom: 1rem;\n}\n\ninput:not([type='checkbox']):not([type='radio']),\ntextarea,\nselect {\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n  display: block;\n  border-radius: 20px;\n  width: 100%;\n  padding: 10px 20px;\n  font-weight: 500;\n  border: 1px solid transparent;\n  max-width: 400px;\n  background-color: #f4f4f4;\n}\n\ninput + small,\ntextarea + small,\nselect + small {\n  color: rgb(237, 78, 59);\n  padding-bottom: 1rem;\n  display: block;\n  font-weight: bold;\n}\n\nfieldset small[role='alert'] {\n  color: rgb(237, 78, 59);\n  padding-bottom: 1rem;\n  display: block;\n  font-weight: bold;\n}\n\ninput[aria-invalid='true']:not([type='checkbox']):not([type='radio']),\ntextarea[aria-invalid='true'],\nselect[aria-invalid='true'] {\n  border: 1px solid rgb(237, 78, 59) !important;\n}\n\ninput[aria-invalid='true'][type='radio'],\ninput[aria-invalid='true'][type='checkbox'] {\n  outline: 1px solid rgb(237, 78, 59) !important;\n}\n\n.radio-label {\n  display: block;\n}\n\ntextarea {\n  max-width: 100%;\n}\n\nfieldset {\n  border: none;\n}\n\nselect {\n  /* needed */\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  /* SVG background image */\n  background-image: url('data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2212%22%20height%3D%2212%22%20viewBox%3D%220%200%2012%2012%22%3E%3Ctitle%3Edown-arrow%3C%2Ftitle%3E%3Cg%20fill%3D%22%23000000%22%3E%3Cpath%20d%3D%22M10.293%2C3.293%2C6%2C7.586%2C1.707%2C3.293A1%2C1%2C0%2C0%2C0%2C.293%2C4.707l5%2C5a1%2C1%2C0%2C0%2C0%2C1.414%2C0l5-5a1%2C1%2C0%2C1%2C0-1.414-1.414Z%22%20fill%3D%22%23000000%22%3E%3C%2Fpath%3E%3C%2Fg%3E%3C%2Fsvg%3E');\n  background-size: 0.6em;\n  background-position: calc(100% - 1.3em) center;\n  background-repeat: no-repeat;\n}\n\n.select:before {\n  content: '';\n  position: absolute;\n  right: 10px;\n  top: 8px;\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #f00;\n}\n\n.select:after {\n  content: '';\n  position: absolute;\n  right: 10px;\n  top: 3px;\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #333;\n}\n\nlabel {\n  margin-bottom: 1rem;\n  display: block;\n}\n\nlegend {\n  margin-bottom: 1rem;\n  display: block;\n}\n\nbutton {\n  text-align: left;\n  display: inline-block;\n  height: var(--informed-height--pill);\n  border: 1px solid transparent;\n  border-radius: 20px;\n  padding: 5px 40px;\n  color: white;\n  background-color: #3e6ae1;\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n  margin-right: 1rem;\n}\n\nbutton[type='submit'] {\n  display: block;\n}\n\n.button-group {\n  display: flex;\n}\n\nhr {\n  border: none !important;\n  height: 1px !important;\n  /* Set the hr color */\n  color: #333; /* old IE */\n  background-color: #333; /* Modern Browsers */\n}\n\npre {\n  font-size: 1em !important;\n}\n\n.markdown-body[class] {\n  font-size: inherit;\n  color: inherit;\n  border: inherit;\n}\n\n.markdown-body pre {\n  font-size: inherit;\n  color: inherit;\n  border: inherit;\n  border-radius: 10px;\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n}\n\n.markdown-body[class] h1,\n.markdown-body[class] h2,\n.markdown-body[class] h3,\n.markdown-body[class] h4,\n.markdown-body[class] h5,\n.markdown-body[class] h6 {\n  border: inherit;\n  margin: inherit;\n  padding: inherit;\n}\n\n.markdown-body[class] h1[id] {\n  letter-spacing: -0.6px;\n  font-size: var(--informed-font-size--80, 40px);\n  line-height: var(--informed-line-height--80, 48px);\n  margin-top: 2rem;\n}\n\n.markdown-body[class] h2[id] {\n  letter-spacing: -0.5px;\n  font-size: var(--informed-font-size--70, 28px);\n  line-height: var(--informed-line-height--70, 36px);\n  margin-top: 2rem;\n}\n\n.markdown-body[class] h3[id] {\n  letter-spacing: -0.6px;\n  font-size: var(--informed-font-size--60, 24px);\n  line-height: var(--informed-line-height--60, 28px);\n  margin-top: 2rem;\n}\n\n.markdown-body[class] h4[id] {\n  letter-spacing: -0.4px;\n  font-size: var(--informed-font-size--50, 20px);\n  line-height: var(--informed-line-height--60, 28px);\n  margin-top: 2rem;\n}\n\n.markdown-body[class] h5[id] {\n  font-size: var(--informed-font-size--40, 17px);\n  line-height: var(--informed-line-height--20, 20px);\n  margin-top: 1rem;\n}\n\n.markdown-body[class] h6[id] {\n  font-size: var(--informed-font-size--30, 14px);\n  line-height: var(--informed-line-height--30, 21px);\n  margin-top: 1rem;\n}\n\n.markdown-body p {\n  margin: inherit;\n}\n\n.markdown-body[class] p {\n}\n\n.markdown-body[class] ul {\n}\n\n.markdown-body[class] ol {\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  text-decoration: none !important;\n}\n\n.markdown-body[class] table {\n  display: table;\n}\n\n.markdown-body[class] table strong {\n  color: rgb(237, 78, 59);\n}\n\nstrong {\n  color: rgb(237, 78, 59);\n}\n\n/* .markdown-body[class] table {\n  display: table;\n}\n\n.markdown-body thead {\n}\n\n.markdown-body tbody {\n}\n\n.markdown-body table thead tr:nth-child(1n),\n.markdown-body table tbody tr:nth-child(1n) {\n  background: inherit;\n  border: inherit;\n}\n\n.markdown-body table thead tr:nth-child(1n):first-child th {\n}\n\n.markdown-body thead tr th:nth-child(1n),\n.markdown-body tbody tr th:nth-child(1n) {\n  padding: inherit;\n  border: inherit;\n}\n\n.markdown-body[class] thead tr th:nth-child(1n),\n.markdown-body[class] tbody tr th:nth-child(1n) {\n}\n\n.markdown-body thead tr td:nth-child(1n),\n.markdown-body tbody tr td:nth-child(1n) {\n  padding: inherit;\n  border: inherit;\n}\n\n.markdown-body[class] thead tr td:nth-child(1n),\n.markdown-body[class] tbody tr td:nth-child(1n) {\n}\n\n.markdown-body[class] thead tr th:nth-child(1n):first-child,\n.markdown-body[class] tbody tr th:nth-child(1n):first-child,\n.markdown-body[class] thead tr td:nth-child(1n):first-child,\n.markdown-body[class] tbody tr td:nth-child(1n):first-child {\n  padding-left: 0;\n}\n\n.markdown-body[class] thead tr th:nth-child(1n):last-child,\n.markdown-body[class] tbody tr th:nth-child(1n):last-child,\n.markdown-body[class] thead tr td:nth-child(1n):last-child,\n.markdown-body[class] tbody tr td:nth-child(1n):last-child {\n  padding-right: 0;\n} */\n\n.informed-container {\n  padding: 4rem;\n}\n\n.informed-black {\n  background-color: rgb(13, 16, 17);\n  color: white !important;\n}\n\n.informed-black input:not([type='checkbox']):not([type='radio']),\n.informed-black select,\n.informed-black textarea {\n  background-color: #222222;\n  color: white;\n}\n\n.informed-black select {\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Ctitle%3Edown-arrow%3C/title%3E%3Cg fill='%23000000'%3E%3Cpath d='M10.293,3.293,6,7.586,1.707,3.293A1,1,0,0,0,.293,4.707l5,5a1,1,0,0,0,1.414,0l5-5a1,1,0,1,0-1.414-1.414Z' fill='%23FFFFFF'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\");\n  /* filter: invert(1); */\n}\n\n.informed-black .markdown-body[class] table {\n  background-color: #000;\n}\n\n.informed-black td {\n  background-color: #000;\n}\n\n.informed-black th {\n  background-color: #000;\n}\n\n.markdown-body > :first-child {\n  margin-top: 2rem !important;\n}\n\n.loader,\n.loader:after {\n  border-radius: 50%;\n  width: 10em;\n  height: 10em;\n}\n\n.loader {\n  top: 0px;\n  margin: 60px auto;\n  font-size: 10px;\n  position: fixed;\n  top: 50%;\n  right: 50%;\n  text-indent: -9999em;\n  border-top: 1.1em solid rgba(67, 64, 64, 0.2);\n  border-right: 1.1em solid rgba(67, 64, 64, 0.2);\n  border-bottom: 1.1em solid rgba(67, 64, 64, 0.2);\n  border-left: 1.1em solid red;\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n\n.informed-black .loader {\n  border-top: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-right: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);\n  border-left: 1.1em solid red;\n}\n\n@-webkit-keyframes load8 {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n@keyframes load8 {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n",
        ''
      ]),
        (module.exports = exports);
    },
    1775: function(module, exports, __webpack_require__) {
      'use strict';
      (function(module) {
        (0, __webpack_require__(37).configure)(
          [__webpack_require__(1776)],
          module,
          !1
        );
      }.call(this, __webpack_require__(396)(module)));
    },
    1776: function(module, exports, __webpack_require__) {
      var map = { './index.js': 1777 };
      function webpackContext(req) {
        var id = webpackContextResolve(req);
        return __webpack_require__(id);
      }
      function webpackContextResolve(req) {
        if (!__webpack_require__.o(map, req)) {
          var e = new Error("Cannot find module '" + req + "'");
          throw ((e.code = 'MODULE_NOT_FOUND'), e);
        }
        return map[req];
      }
      (webpackContext.keys = function webpackContextKeys() {
        return Object.keys(map);
      }),
        (webpackContext.resolve = webpackContextResolve),
        (module.exports = webpackContext),
        (webpackContext.id = 1776);
    },
    1777: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__.r(__webpack_exports__),
        function(module) {
          var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0),
            react__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(
              react__WEBPACK_IMPORTED_MODULE_0__
            ),
            _storybook_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
              37
            ),
            storybook_readme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
              137
            ),
            _utils_StoryWrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
              938
            ),
            _Intro__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(948),
            _TLDR__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(952),
            _Intro_Changelog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
              954
            ),
            _Form_Basic__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(955),
            _Form_Path__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(956),
            _Form_FeatureTester__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
              957
            ),
            _Form_Dynamic__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
              958
            ),
            _Schema_Intro__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
              959
            ),
            _Schema_FormattedSchema__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
              960
            ),
            _Schema_NestedSchema__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
              961
            ),
            _Schema_ArrayFieldSchema__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
              962
            ),
            _Schema_ArrayFieldSchemaRelevant__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
              963
            ),
            _Schema_ArrayFieldSchemaNested__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
              964
            ),
            _Schema_CustomSchema__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
              965
            ),
            _Form_Complex__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
              414
            ),
            _Form_Big__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(966),
            _Form_State__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
              967
            ),
            _Debugging_Debug__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
              968
            ),
            _Form_Props__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
              969
            ),
            _Form_Api__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(950),
            _Multistep_Basic__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
              970
            ),
            _Multistep_Complex__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
              971
            ),
            _Multistep_Actions__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
              972
            ),
            _Validation_SimpleValidation__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
              973
            ),
            _Validation_Required__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
              974
            ),
            _Validation_YupValidation__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
              975
            ),
            _Validation_FieldLevelYupValidation__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
              976
            ),
            _Validation_ComplexValidation__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
              977
            ),
            _Validation_ValidationControl__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
              978
            ),
            _Validation_ValidationMessages__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
              951
            ),
            _Validation_Elon__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
              979
            ),
            _Validation_Notifications__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
              980
            ),
            _Validation_AjvValidation__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
              981
            ),
            _Validation_AjvValidationNoRender__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
              982
            ),
            _Validation_AsyncValidation__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
              983
            ),
            _Playground_RickRoll__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
              946
            ),
            _Formatting_Formatter__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
              984
            ),
            _Formatting_FormatterFunctions__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
              985
            ),
            _Gotchas_Scope__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
              953
            ),
            _Gotchas_ChangingInitialValues__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
              986
            ),
            _Gotchas_InitialvsDefault__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
              987
            ),
            _Gotchas_InitializeIfPristine__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
              988
            ),
            _Dynamic_DynamicFields__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
              600
            ),
            _CustomInputs__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
              949
            ),
            _Inputs__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(122),
            _Arrays__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(207),
            _Hooks__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(165),
            _Schema_ConditionalSchema__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
              989
            ),
            _Schema_ConditionalSchemaControl__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
              990
            ),
            _Schema_ConditionalOptions__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(
              991
            ),
            _Schema_SchemaComponents__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(
              992
            ),
            _Form_FormatDependent__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(
              993
            ),
            _CustomInputs_FormattedObjectInput__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(
              994
            ),
            _CustomInputs_ObjectInput__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(
              995
            ),
            _Formatting_NumberFormatter__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(
              996
            );
          Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.addDecorator)(
            _utils_StoryWrapper__WEBPACK_IMPORTED_MODULE_3__.a
          ),
            Object(
              storybook_readme__WEBPACK_IMPORTED_MODULE_2__.configureReadme
            )({
              StoryPreview: function StoryPreview(_ref) {
                var children = _ref.children;
                return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                  'div',
                  { style: { marginTop: '2rem', marginBottom: '2rem' } },
                  children
                );
              },
              DocPreview: function DocPreview(_ref2) {
                var children = _ref2.children;
                return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                  'div',
                  null,
                  ' ',
                  children
                );
              },
              HeaderPreview: function HeaderPreview(_ref3) {
                var children = _ref3.children;
                return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                  'div',
                  null,
                  children
                );
              },
              FooterPreview: function FooterPreview(_ref4) {
                var children = _ref4.children;
                return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
                  'div',
                  null,
                  children
                );
              },
              header: '',
              footer: ''
            }),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Introduction',
              module
            )
              .add('Getting Started', _Intro__WEBPACK_IMPORTED_MODULE_4__.a)
              .add('TLDR', _TLDR__WEBPACK_IMPORTED_MODULE_5__.a)
              .add(
                'Changelog',
                _Intro_Changelog__WEBPACK_IMPORTED_MODULE_6__.a
              ),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Form',
              module
            )
              .add('Basic', _Form_Basic__WEBPACK_IMPORTED_MODULE_7__.a)
              .add('State', _Form_State__WEBPACK_IMPORTED_MODULE_20__.a)
              .add('Api', _Form_Api__WEBPACK_IMPORTED_MODULE_23__.a)
              .add('Props', _Form_Props__WEBPACK_IMPORTED_MODULE_22__.a)
              .add(
                'Dynamic',
                _Dynamic_DynamicFields__WEBPACK_IMPORTED_MODULE_46__.a
              )
              .add(
                'Dependent Fields',
                _Form_FormatDependent__WEBPACK_IMPORTED_MODULE_55__.a
              )
              .add('Path', _Form_Path__WEBPACK_IMPORTED_MODULE_8__.a)
              .add(
                'Features',
                _Form_FeatureTester__WEBPACK_IMPORTED_MODULE_9__.a
              )
              .add('Inputs', _Form_Complex__WEBPACK_IMPORTED_MODULE_18__.a)
              .add('Big', _Form_Big__WEBPACK_IMPORTED_MODULE_19__.a),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Inputs',
              module
            )
              .add('Intro', _Inputs__WEBPACK_IMPORTED_MODULE_48__.b)
              .add('Input', _Inputs__WEBPACK_IMPORTED_MODULE_48__.h)
              .add('Text Area', _Inputs__WEBPACK_IMPORTED_MODULE_48__.g)
              .add('Radio Input', _Inputs__WEBPACK_IMPORTED_MODULE_48__.e)
              .add('Checkbox Input', _Inputs__WEBPACK_IMPORTED_MODULE_48__.a)
              .add('Select Input', _Inputs__WEBPACK_IMPORTED_MODULE_48__.f)
              .add(
                'Multi Select Input',
                _Inputs__WEBPACK_IMPORTED_MODULE_48__.c
              )
              .add('Number Input', _Inputs__WEBPACK_IMPORTED_MODULE_48__.d),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'CustomInputs',
              module
            )
              .add(
                'Creating Custom Inputs',
                _CustomInputs__WEBPACK_IMPORTED_MODULE_47__.a
              )
              .add(
                'Creating Object Inputs',
                _CustomInputs_ObjectInput__WEBPACK_IMPORTED_MODULE_57__.a
              )
              .add(
                'Creating Formatted Object Inputs',
                _CustomInputs_FormattedObjectInput__WEBPACK_IMPORTED_MODULE_56__.a
              ),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Arrays',
              module
            )
              .add('Array Field', _Arrays__WEBPACK_IMPORTED_MODULE_49__.e)
              .add('Flat Array Field', _Arrays__WEBPACK_IMPORTED_MODULE_49__.a)
              .add('Array Field Item', _Arrays__WEBPACK_IMPORTED_MODULE_49__.b)
              .add('Dependent Fields', _Arrays__WEBPACK_IMPORTED_MODULE_49__.c)
              .add('Huge Array Form', _Arrays__WEBPACK_IMPORTED_MODULE_49__.d),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Validation',
              module
            )
              .add(
                'Simple Validation',
                _Validation_SimpleValidation__WEBPACK_IMPORTED_MODULE_27__.a
              )
              .add(
                'Async Validation',
                _Validation_AsyncValidation__WEBPACK_IMPORTED_MODULE_38__.a
              )
              .add(
                'Complex Validation',
                _Validation_ComplexValidation__WEBPACK_IMPORTED_MODULE_31__.a
              )
              .add(
                'Validation Control',
                _Validation_ValidationControl__WEBPACK_IMPORTED_MODULE_32__.a
              )
              .add(
                'Required',
                _Validation_Required__WEBPACK_IMPORTED_MODULE_28__.a
              )
              .add(
                'Validation Messages',
                _Validation_ValidationMessages__WEBPACK_IMPORTED_MODULE_33__.a
              )
              .add(
                'Paired Validation',
                _Validation_Notifications__WEBPACK_IMPORTED_MODULE_35__.a
              )
              .add(
                'Yup Validation',
                _Validation_YupValidation__WEBPACK_IMPORTED_MODULE_29__.a
              )
              .add(
                'Field Level + Yup Validation',
                _Validation_FieldLevelYupValidation__WEBPACK_IMPORTED_MODULE_30__.a
              )
              .add(
                'JSON Schema Validation + Rendering',
                _Validation_AjvValidation__WEBPACK_IMPORTED_MODULE_36__.a
              )
              .add(
                'Only JSON Schema Validation',
                _Validation_AjvValidationNoRender__WEBPACK_IMPORTED_MODULE_37__.a
              )
              .add('Elon', _Validation_Elon__WEBPACK_IMPORTED_MODULE_34__.a),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Schema',
              module
            )
              .add('Schema', _Schema_Intro__WEBPACK_IMPORTED_MODULE_11__.a)
              .add(
                'Nested Schema',
                _Schema_NestedSchema__WEBPACK_IMPORTED_MODULE_13__.a
              )
              .add(
                'Formatted Schema',
                _Schema_FormattedSchema__WEBPACK_IMPORTED_MODULE_12__.a
              )
              .add(
                'Array Field Schema',
                _Schema_ArrayFieldSchema__WEBPACK_IMPORTED_MODULE_14__.a
              )
              .add(
                'Conditional Schema',
                _Schema_ConditionalSchema__WEBPACK_IMPORTED_MODULE_51__.a
              )
              .add(
                'Conditional Schema Control',
                _Schema_ConditionalSchemaControl__WEBPACK_IMPORTED_MODULE_52__.a
              )
              .add(
                'Conditional Options',
                _Schema_ConditionalOptions__WEBPACK_IMPORTED_MODULE_53__.a
              )
              .add(
                'Custom Schema',
                _Schema_CustomSchema__WEBPACK_IMPORTED_MODULE_17__.a
              )
              .add(
                'Schema Components',
                _Schema_SchemaComponents__WEBPACK_IMPORTED_MODULE_54__.a
              )
              .add(
                'Nested Array Fields',
                _Schema_ArrayFieldSchemaNested__WEBPACK_IMPORTED_MODULE_16__.a
              )
              .add(
                'Relevant ArrayField Schema',
                _Schema_ArrayFieldSchemaRelevant__WEBPACK_IMPORTED_MODULE_15__.a
              ),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Debugging',
              module
            ).add('Debug', _Debugging_Debug__WEBPACK_IMPORTED_MODULE_21__.a),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Formatting',
              module
            )
              .add(
                'Formatter',
                _Formatting_Formatter__WEBPACK_IMPORTED_MODULE_40__.a
              )
              .add(
                'Number Formatter',
                _Formatting_NumberFormatter__WEBPACK_IMPORTED_MODULE_58__.a
              )
              .add(
                'Formatter Functions',
                _Formatting_FormatterFunctions__WEBPACK_IMPORTED_MODULE_41__.a
              ),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Hooks!',
              module
            )
              .add('useFormApi', _Hooks__WEBPACK_IMPORTED_MODULE_50__.e)
              .add('useFormState', _Hooks__WEBPACK_IMPORTED_MODULE_50__.f)
              .add('useFieldApi', _Hooks__WEBPACK_IMPORTED_MODULE_50__.b)
              .add('useFieldState', _Hooks__WEBPACK_IMPORTED_MODULE_50__.c)
              .add('useForm', _Hooks__WEBPACK_IMPORTED_MODULE_50__.d)
              .add('useField', _Hooks__WEBPACK_IMPORTED_MODULE_50__.a),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Multistep Forms',
              module
            )
              .add(
                'BasicMultistep',
                _Multistep_Basic__WEBPACK_IMPORTED_MODULE_24__.a
              )
              .add(
                'Dynamic Multistep',
                _Multistep_Complex__WEBPACK_IMPORTED_MODULE_25__.a
              )
              .add(
                'Multistep Actions',
                _Multistep_Actions__WEBPACK_IMPORTED_MODULE_26__.a
              ),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Gotchas',
              module
            )
              .add(
                'Initial Vs Default',
                _Gotchas_InitialvsDefault__WEBPACK_IMPORTED_MODULE_44__.a
              )
              .add(
                'Change initialValues',
                _Gotchas_ChangingInitialValues__WEBPACK_IMPORTED_MODULE_43__.a
              )
              .add(
                'Initialize If Pristine',
                _Gotchas_InitializeIfPristine__WEBPACK_IMPORTED_MODULE_45__.a
              )
              .add('Scope', _Gotchas_Scope__WEBPACK_IMPORTED_MODULE_42__.a),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Dynamic Forms',
              module
            )
              .add(
                'Dynamic Fields',
                _Dynamic_DynamicFields__WEBPACK_IMPORTED_MODULE_46__.a
              )
              .add(
                'Dynamic Rendering',
                _Form_Dynamic__WEBPACK_IMPORTED_MODULE_10__.a
              ),
            Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.storiesOf)(
              'Cool Examples',
              module
            ).add(
              'Cool Example',
              _Playground_RickRoll__WEBPACK_IMPORTED_MODULE_39__.a
            );
        }.call(this, __webpack_require__(226)(module));
    },
    1816: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      var preview_namespaceObject = {};
      __webpack_require__.r(preview_namespaceObject);
      var _create,
        client_api = __webpack_require__(1819),
        esm = __webpack_require__(5),
        client = (__webpack_require__(1667),
        __webpack_require__(1668),
        __webpack_require__(1670),
        __webpack_require__(1672),
        __webpack_require__(1674),
        __webpack_require__(37)),
        storybook_readme = __webpack_require__(137),
        create = __webpack_require__(936),
        esm_create = __webpack_require__(1818),
        package_0 = __webpack_require__(935);
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ownKeys(Object(source), !0).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      var theme = Object(create.create)(
        (_defineProperty(
          (_create = { base: 'light', brandTitle: 'Informed' }),
          'brandTitle',
          'Informed v'.concat(package_0.a)
        ),
        _defineProperty(
          _create,
          'brandUrl',
          'https://joepuzzo.github.io/informed'
        ),
        _create)
      );
      function preview_js_generated_config_entry_ownKeys(
        object,
        enumerableOnly
      ) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function preview_js_generated_config_entry_defineProperty(
        obj,
        key,
        value
      ) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      Object(client.addParameters)({
        readme: {},
        darkMode: {
          darkClass: 'informed-black',
          lightClass: 'informed-white',
          stylePreview: !0,
          dark: _objectSpread(_objectSpread({}, theme), esm_create.a.dark),
          light: _objectSpread(_objectSpread({}, esm_create.a.light), theme)
        }
      }),
        Object(client.addDecorator)(storybook_readme.addReadme),
        Object.keys(preview_namespaceObject).forEach(function(key) {
          var value = preview_namespaceObject[key];
          switch (key) {
            case 'args':
            case 'argTypes':
              return esm.logger.warn(
                'Invalid args/argTypes in config, ignoring.',
                JSON.stringify(value)
              );
            case 'decorators':
              return value.forEach(function(decorator) {
                return Object(client_api.c)(decorator, !1);
              });
            case 'loaders':
              return value.forEach(function(loader) {
                return Object(client_api.d)(loader, !1);
              });
            case 'parameters':
              return Object(client_api.e)(
                (function preview_js_generated_config_entry_objectSpread(
                  target
                ) {
                  for (var i = 1; i < arguments.length; i++) {
                    var source = null != arguments[i] ? arguments[i] : {};
                    i % 2
                      ? preview_js_generated_config_entry_ownKeys(
                          Object(source),
                          !0
                        ).forEach(function(key) {
                          preview_js_generated_config_entry_defineProperty(
                            target,
                            key,
                            source[key]
                          );
                        })
                      : Object.getOwnPropertyDescriptors
                        ? Object.defineProperties(
                            target,
                            Object.getOwnPropertyDescriptors(source)
                          )
                        : preview_js_generated_config_entry_ownKeys(
                            Object(source)
                          ).forEach(function(key) {
                            Object.defineProperty(
                              target,
                              key,
                              Object.getOwnPropertyDescriptor(source, key)
                            );
                          });
                  }
                  return target;
                })({}, value),
                !1
              );
            case 'argTypesEnhancers':
              return value.forEach(function(enhancer) {
                return Object(client_api.a)(enhancer);
              });
            case 'argsEnhancers':
              return value.forEach(function(enhancer) {
                return Object(client_api.b)(enhancer);
              });
            case 'render':
              return Object(client_api.g)(value);
            case 'globals':
            case 'globalTypes':
              var v = {};
              return (v[key] = value), Object(client_api.e)(v, !1);
            default:
              return console.log(key + ' was not supported :( !');
          }
        });
    },
    2: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__(0);
      var storybook_readme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        137
      );
      __webpack_exports__.a =
        storybook_readme__WEBPACK_IMPORTED_MODULE_1__.withDocs;
    },
    207: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__.d(__webpack_exports__, 'e', function() {
        return NestedFields;
      }),
        __webpack_require__.d(__webpack_exports__, 'b', function() {
          return ArrayFieldItem;
        }),
        __webpack_require__.d(__webpack_exports__, 'a', function() {
          return AlternateSyntax;
        }),
        __webpack_require__.d(__webpack_exports__, 'c', function() {
          return DependentFields;
        }),
        __webpack_require__.d(__webpack_exports__, 'd', function() {
          return HugeArrayForm;
        });
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = (__webpack_require__(12), __webpack_require__(1)),
        initialValues = (Object(withDocs.a)(
          '# Array of fields\n\nFields can also be associated with an array. Here is an example where you can input three friends.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Text } from \'informed\';\n\nconst Example = () => (\n  <Form>\n    <Input name="friends[0]" label="Friend1" />\n    <Input name="friends[1]" label="Friend2" />\n    <Input name="friends[2]" label="Friend3" />\n    <button type="submit">Submit</button>\n    <Debug values />\n  </Form>\n);\n```\n',
          function InputInput() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.j, {
                name: 'friends[0]',
                label: 'Friend1'
              }),
              react_default.a.createElement(src.j, {
                name: 'friends[1]',
                label: 'Friend2'
              }),
              react_default.a.createElement(src.j, {
                name: 'friends[2]',
                label: 'Friend3'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { values: !0 })
            );
          }
        ),
        Object(withDocs.a)(
          '# Array of scopes\n\nScopes can also be associated with an array. Here is an example where you can input two friends.\nwhere a friend consists of a first and last name.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, Scope, Debug } from \'informed\';\n\nconst ArrayOfScopes = () => (\n  <Form>\n    <h5>Friend1</h5>\n    <Scope scope="friends[0]">\n      <Input name="firstName" label="First Name" />\n      <Input name="lastName" label="Last Name" />\n    </Scope>\n    <h5>Friend2</h5>\n    <Scope scope="friends[1]">\n      <Input name="firstName" label="First Name" />\n      <Input name="lastName" label="Last Name" />\n    </Scope>\n    <button type="submit">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n',
          function ArrayOfScopes() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement('h5', null, 'Friend1'),
              react_default.a.createElement(
                src.q,
                { scope: 'friends[0]' },
                react_default.a.createElement(src.j, {
                  name: 'firstName',
                  label: 'First Name'
                }),
                react_default.a.createElement(src.j, {
                  name: 'lastName',
                  label: 'Last Name'
                })
              ),
              react_default.a.createElement('h5', null, 'Friend2'),
              react_default.a.createElement(
                src.q,
                { scope: 'friends[1]' },
                react_default.a.createElement(src.j, {
                  name: 'firstName',
                  label: 'First Name'
                }),
                react_default.a.createElement(src.j, {
                  name: 'lastName',
                  label: 'Last Name'
                })
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, null)
            );
          }
        ),
        { friends: [{ name: 'Joe', age: 27 }, { name: 'Jane', age: 22 }] }),
        ArrayFieldItem_FieldState = function FieldState() {
          var state = Object(src.v)();
          return react_default.a.createElement(
            'pre',
            null,
            react_default.a.createElement(
              'code',
              null,
              JSON.stringify(state, null, 2)
            )
          );
        },
        ArrayFieldItem = Object(withDocs.a)(
          '# Array Field Item\n\n<br />\n\nInformed gives you access to two components for array fields:\n\n```jsx\n<ArrayField>\n<ArrayField.Items>\n```\n\n<br />\n\nThere are many cool features these give you:\n\n## ArrayFieldApi\n\n```jsx\n<ArrayField name="friends">\n  {({ add, reset, swap, addWithInitialValue }) => <></>}\n</ArrayField>\n```\n\n<br />\n\n| Function            | Example                               | Description                           |\n| ------------------- | ------------------------------------- | ------------------------------------- |\n| add                 | add()                                 | Adds a new item                       |\n| reset               | reset()                               | Resets the array field                |\n| swap                | swap(1,2)                             | Swaps two array fields                |\n| addWithInitialValue | addWithInitialValue({ name: \'test\' }) | Adds a new item with an initial value |\n\n## ArrayFieldItemApi\n\n```jsx\n<ArrayField.Items>{({ remove, reset, setValue }) => <></>}</ArrayField.Items>\n```\n\n<br />\n\n| Function   | Example                 | Description                                   |\n| ---------- | ----------------------- | --------------------------------------------- |\n| remove     | remove()                | removes this item                             |\n| reset      | reset()                 | Resets all field within this item             |\n| setValue   | setValue(\'name\', \'Joe\') | Sets the value for the field within this item |\n| resetField | resetField(\'name\')      | Resets the given field within this item       |\n\n## ArrayFieldItemInfo\n\n```jsx\n<ArrayField.Items>{({ name, index }) => <></>}</ArrayField.Items>\n```\n\n<br />\n\n| Name  | Example      | Description                  |\n| ----- | ------------ | ---------------------------- |\n| name  | "friends[0]" | the field name for this item |\n| index | 0            | the index for this item      |\n\n## ArrayFieldItemState\n\n##### Usage\n\n```js\nconst {\n  key,\n  name,\n  index,\n  parent,\n  values,\n  errors,\n  touched,\n  initialValue\n} = useArrayFieldItemState();\n```\n\n##### Example\n\n```json\n{\n  "key": "d9f97dee-7c39-4bce-a348-a404e75417a6",\n  "name": "friends[0]",\n  "index": 0,\n  "parent": "friends",\n  "values": {\n    "age": 27\n  },\n  "errors": {\n    "name": "This field is required"\n  },\n  "touched": true,\n  "initialValue": {\n    "name": "Joe",\n    "age": 27\n  }\n}\n```\n\n<br />\n\n| Name         | Example                    | Description                                                   |\n| ------------ | -------------------------- | ------------------------------------------------------------- |\n| name         | "friends[0]"               | the field name for this item                                  |\n| index        | 0                          | the index for this item                                       |\n| key          | "d9f97dee..."              | a unique identifier for this field ( used mostly internally ) |\n| parent       | "friends"                  | parent name "friends[0]" parent is "friends"                  |\n| values       | { age: 27 }                | the values within this item                                   |\n| errors       | { name: "Required Field" } | the errors within this item                                   |\n| touched      | true                       | if a field within this item has been touched                  |\n| initialValue | { name: "Joe", age: 27}    | the initial value for this item                               |\n\n## Example:\n\nFor each feature a visualization will be shown based on this example array:\n\n```\n[ { a, b }, { a, b }, { a, b } ]\n```\n\n<br />\n\nAn example state for this array looks like\n\n```js\n[{ a: \'Hello\', b: \'World\' }, { a: \'Hi\', b: \'US\' }, { a: \'Yoo\', b: \'Bro\' }];\n```\n\n<br />\n\n| Scenario                                                         | Visualization                        | How                                       |\n| ---------------------------------------------------------------- | ------------------------------------ | ----------------------------------------- |\n| I want to reset the **b** field for the second item              | [ { a, b }, { a, **b** }, { a, b } ] | `arrayFieldItemApi.resetField(\'b\')`       |\n| I want to set the **a** fields value for the second item to "Yo" | [ { a, b }, { **a**, b }, { a, b } ] | `arrayFieldItemApi.setValue(\'a\', \'Yo\')`   |\n| I want to remove the the second item                             | [ { a, b }, **{ a, b }**, { a, b } ] | `arrayFieldItemApi.remove()`              |\n| I want to reset the the second item                              | [ { a, b }, **{ a, b }**, { a, b } ] | `arrayFieldItemApi.reset()`               |\n| I want to add a new item                                         | [ { a, b }, { a, b }, **{ a, b }** ] | `arrayFieldApi.add()`                     |\n| I want to add a new item with the name "Foo"                     | [ { a, b }, { a, b }, **{ a, b }** ] | `arrayFieldApi.addWithInitialValue({..})` |\n| I want to reset the whole array field                            | **[ { a, b }, { a, b }, { a, b } ]** | `arrayFieldApi.reset()`                   |\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, ArrayField, useArrayFieldItemState } from \'informed\';\n\nconst initialValues = {\n  friends: [\n    {\n      name: \'Joe\',\n      age: \'20\'\n    },\n    {\n      name: \'Jane\',\n      age: \'20\'\n    }\n  ]\n};\n\nconst FieldState = () => {\n  const { values } = useArrayFieldItemState();\n  return (\n    <pre>\n      <code>{JSON.stringify(values, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst NestedForm = () => {\n  return (\n    <div>\n      <Form initialValues={initialValues}>\n        <ArrayField name="friends">\n          {({ add, reset }) => (\n            <>\n              <button\n                onClick={() => {\n                  reset();\n                }}\n                type="button">\n                Reset\n              </button>\n              <button\n                onClick={() => {\n                  add();\n                }}\n                type="button">\n                Add\n              </button>\n\n              <button\n                onClick={() => {\n                  addWithInitialValue({ name: \'test\' });\n                }}>\n                Add with initialValue\n              </button>\n\n              <button\n                onClick={() => {\n                  formApi.setValue(\'friends[0].name\', \'Test\');\n                }}\n                type="button">\n                set friends[0].name to test\n              </button>\n\n              <ArrayField.Items>\n                {({ remove, name, reset, resetField, setValue }) => (\n                  <>\n                    <h5>{name}</h5>\n                    <Input name="name" label="Name" required />\n                    <Input name="age" label="Age" type="number" />\n                    <button type="button" onClick={reset}>\n                      Reset\n                    </button>\n                    <button\n                      type="button"\n                      onClick={() => setValue(\'name\', \'Elon\')}>\n                      Set Name to "Elon"\n                    </button>\n                    <button type="button" onClick={() => resetField(\'name\')}>\n                      Reset Name\n                    </button>\n                    <button type="button" onClick={remove}>\n                      Remove\n                    </button>\n                    <FieldState />\n                  </>\n                )}\n              </ArrayField.Items>\n            </>\n          )}\n        </ArrayField>\n        <button type="submit">Submit</button>\n      </Form>\n    </div>\n  );\n};\n```\n',
          function NestedForm() {
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                { initialValues: initialValues },
                react_default.a.createElement(
                  'div',
                  { style: { display: 'flex', flexWrap: 'wrap' } },
                  react_default.a.createElement(
                    'div',
                    { style: { flex: 1, marginRight: '2rem' } },
                    react_default.a.createElement(
                      src.a,
                      { name: 'friends' },
                      function(_ref) {
                        var add = _ref.add,
                          addWithInitialValue = _ref.addWithInitialValue,
                          reset = _ref.reset;
                        return react_default.a.createElement(
                          react_default.a.Fragment,
                          null,
                          react_default.a.createElement(
                            'button',
                            {
                              onClick: function onClick() {
                                reset();
                              },
                              type: 'button'
                            },
                            'Reset'
                          ),
                          react_default.a.createElement(
                            'button',
                            {
                              onClick: function onClick() {
                                add();
                              },
                              type: 'button'
                            },
                            'Add'
                          ),
                          react_default.a.createElement(
                            'button',
                            {
                              onClick: function onClick() {
                                addWithInitialValue({ name: 'test' });
                              }
                            },
                            'Add with initialValue'
                          ),
                          react_default.a.createElement(
                            src.a.Items,
                            null,
                            function(_ref2) {
                              var remove = _ref2.remove,
                                name = _ref2.name,
                                reset = _ref2.reset,
                                resetField = _ref2.resetField,
                                setValue = _ref2.setValue;
                              return react_default.a.createElement(
                                'label',
                                null,
                                react_default.a.createElement('h5', null, name),
                                react_default.a.createElement(src.j, {
                                  name: 'name',
                                  label: 'Name',
                                  required: !0
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'age',
                                  label: 'Age',
                                  type: 'number'
                                }),
                                react_default.a.createElement(
                                  'button',
                                  { type: 'button', onClick: reset },
                                  'Reset'
                                ),
                                react_default.a.createElement(
                                  'button',
                                  {
                                    type: 'button',
                                    onClick: function onClick() {
                                      return setValue('name', 'Elon');
                                    }
                                  },
                                  'Set Name to "Elon"'
                                ),
                                react_default.a.createElement(
                                  'button',
                                  {
                                    type: 'button',
                                    onClick: function onClick() {
                                      return resetField('name');
                                    }
                                  },
                                  'Reset Name'
                                ),
                                react_default.a.createElement(
                                  'button',
                                  { type: 'button', onClick: remove },
                                  'Remove'
                                ),
                                react_default.a.createElement(
                                  ArrayFieldItem_FieldState,
                                  null
                                )
                              );
                            }
                          )
                        );
                      }
                    )
                  ),
                  react_default.a.createElement(
                    'div',
                    {
                      style: { flex: 2, minWidth: '300px', marginLeft: '3rem' }
                    },
                    react_default.a.createElement(src.c, null)
                  )
                )
              )
            );
          }
        ),
        AlternateSyntax = Object(withDocs.a)(
          '# Flat Arrays\n\nYou can create flat arrays where the value is not an object.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, ArrayField } from \'informed\';\n\nconst DynamicArrays = () => {\n  return (\n    <Form initialValues={{ siblings: [\'foo\', \'bar\', \'baz\'] }}>\n      <h5>You:</h5>\n      <Input name="name" label="Your Name:" />\n      <h5>Siblings:</h5>\n      <ArrayField name="siblings">\n        {({ add }) => (\n          <>\n            <button type="button" onClick={add}>\n              Add Sibling\n            </button>\n            <ArrayField.Items>\n              {({ remove, name, index }) => (\n                <>\n                  <Input name={name} label={`Sibling ${index}:`} />\n                  <button type="button" onClick={remove}>\n                    Remove\n                  </button>\n                </>\n              )}\n            </ArrayField.Items>\n          </>\n        )}\n      </ArrayField>\n      <button type="submit">Submit</button>\n    </Form>\n  );\n};\n```\n',
          function ArrayFieldExample() {
            return react_default.a.createElement(
              src.f,
              { initialValues: { siblings: ['foo', 'bar', 'baz'] } },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '1rem' } },
                  react_default.a.createElement('h5', null, 'You:'),
                  react_default.a.createElement(src.j, {
                    name: 'name',
                    label: 'Your Name:'
                  }),
                  react_default.a.createElement('h5', null, 'Siblings:'),
                  react_default.a.createElement(
                    src.a,
                    { name: 'siblings' },
                    function(_ref) {
                      var add = _ref.add;
                      return react_default.a.createElement(
                        react_default.a.Fragment,
                        null,
                        react_default.a.createElement(
                          'button',
                          { type: 'button', onClick: add },
                          'Add Sibling'
                        ),
                        react_default.a.createElement(
                          src.a.Items,
                          null,
                          function(_ref2) {
                            var remove = _ref2.remove,
                              name = _ref2.name,
                              index = _ref2.index;
                            return react_default.a.createElement(
                              react_default.a.Fragment,
                              null,
                              react_default.a.createElement(src.j, {
                                name: name,
                                label: 'Sibling '.concat(index, ':')
                              }),
                              react_default.a.createElement(
                                'button',
                                { type: 'button', onClick: remove },
                                'Remove'
                              )
                            );
                          }
                        )
                      );
                    }
                  ),
                  react_default.a.createElement('br', null),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, { values: !0 })
                )
              )
            );
          }
        ),
        HugeArrayForm_initialValues = {
          friends: Array.from(Array(69)).map(function(e) {
            return { name: 'Joe', age: 26, f: 'foo' };
          })
        },
        HugeArrayForm_FieldState = function FieldState(_ref) {
          var name = _ref.name,
            nameState = Object(src.y)(name);
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement(
              'h5',
              null,
              'Component using nameState: ',
              name
            ),
            'Render: ',
            Math.random(),
            react_default.a.createElement(
              'pre',
              null,
              react_default.a.createElement(
                'code',
                null,
                JSON.stringify(nameState, null, 2)
              )
            )
          );
        },
        HugeArrayForm = Object(withDocs.a)(
          '# Huge Array form\n\n```jsx\nimport {\n  Form,\n  Input,\n  ArrayField,\n  useFieldState,\n  Relevant,\n  Debug\n} from \'informed\';\n\nconst friends = Array.from(Array(69)).map(e => {\n  return { name: \'Joe\', age: 26, f: \'foo\' };\n});\n\nconst initialValues = {\n  friends\n};\n\nconst FieldState = ({ name }) => {\n  const nameState = useFieldState(name);\n  return (\n    <>\n      <h5>Component using nameState: {name}</h5>\n      Render: {Math.random()}\n      <pre>\n        <code>{JSON.stringify(nameState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\nconst NestedForm = () => (\n  <div>\n    <Form\n      initialValues={initialValues}\n      onSubmit={({ values }) => console.log(values)}>\n      <div style={{ display: \'flex\', flexWrap: \'wrap\' }}>\n        <div style={{ flex: 1, marginRight: \'2rem\' }}>\n          <button type="submit">Submit</button>\n          <ArrayField name="friends">\n            {({ add, addWithInitialValue, reset }) => {\n              return (\n                <React.Fragment>\n                  <button\n                    onClick={() => {\n                      reset();\n                    }}\n                    type="button">\n                    Reset\n                  </button>\n                  <button\n                    onClick={() => {\n                      add();\n                    }}\n                    type="button">\n                    Add\n                  </button>\n\n                  <button\n                    onClick={() => {\n                      addWithInitialValue({ name: \'test\' });\n                    }}>\n                    Add with initialValue\n                  </button>\n\n                  <ArrayField.Items>\n                    {({ remove, name, reset, initialValue, setValue }) => (\n                      <label>\n                        <h5>{name}</h5>\n                        <FieldState name={name} />\n                        <Input\n                          name="name"\n                          initialValue={initialValue && initialValue.name}\n                        />\n                        <Input name="age" />\n                        <Input name="a" />\n                        <Input name="b" />\n                        <Input name="c" />\n                        <Input name="d" />\n                        <Input name="e" />\n                        <Input name="f" />\n                        {/* Example using scope  */}\n                        <Input\n                          name="g"\n                          relevanceWhen={scope => [`${scope}.f`]}\n                          relevant={({ formApi, scope }) =>\n                            formApi.getValue(`${scope}.f`)\n                          }\n                        />\n                        {/* Example using default ( scoped ) */}\n                        <Input\n                          name="h"\n                          relevanceWhen={[\'f\']}\n                          relevant={({ formApi }) =>\n                            formApi.getValue(`${name}.f`)\n                          }\n                        />\n                        <Relevant\n                          when={({ formApi }) => formApi.getValue(`${name}.f`)}>\n                          <Input name="i" />\n                          <Input name="j" />\n                          <Input name="k" />\n                          <Input name="l" />\n                          <Input name="m" />\n                        </Relevant>\n\n                        <button\n                          type="button"\n                          onClick={() => {\n                            reset();\n                          }}>\n                          Reset\n                        </button>\n                        <button\n                          type="button"\n                          onClick={() => setValue(\'name\', \'Elon\')}>\n                          Set Name to "Elon"\n                        </button>\n                        <button type="button" onClick={remove}>\n                          Remove\n                        </button>\n                      </label>\n                    )}\n                  </ArrayField.Items>\n                </React.Fragment>\n              );\n            }}\n          </ArrayField>\n        </div>\n        <div style={{ flex: 2, minWidth: \'300px\', marginLeft: \'3rem\' }}>\n          <Debug />\n        </div>\n      </div>\n    </Form>\n  </div>\n);\n```\n\n\x3c!-- STORY --\x3e\n',
          function NestedForm() {
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                {
                  initialValues: HugeArrayForm_initialValues,
                  onSubmit: function onSubmit(_ref2) {
                    var values = _ref2.values;
                    return console.log(values);
                  }
                },
                react_default.a.createElement(
                  'div',
                  { style: { display: 'flex', flexWrap: 'wrap' } },
                  react_default.a.createElement(
                    'div',
                    { style: { flex: 1, marginRight: '2rem' } },
                    react_default.a.createElement(
                      'button',
                      { type: 'submit' },
                      'Submit'
                    ),
                    react_default.a.createElement(
                      src.a,
                      { name: 'friends' },
                      function(_ref3) {
                        var add = _ref3.add,
                          addWithInitialValue = _ref3.addWithInitialValue,
                          reset = _ref3.reset;
                        return react_default.a.createElement(
                          react_default.a.Fragment,
                          null,
                          react_default.a.createElement(
                            'button',
                            {
                              onClick: function onClick() {
                                reset();
                              },
                              type: 'button'
                            },
                            'Reset'
                          ),
                          react_default.a.createElement(
                            'button',
                            {
                              onClick: function onClick() {
                                add();
                              },
                              type: 'button'
                            },
                            'Add'
                          ),
                          react_default.a.createElement(
                            'button',
                            {
                              onClick: function onClick() {
                                addWithInitialValue({ name: 'test' });
                              }
                            },
                            'Add with initialValue'
                          ),
                          react_default.a.createElement(
                            src.a.Items,
                            null,
                            function(_ref4) {
                              var remove = _ref4.remove,
                                name = _ref4.name,
                                reset = _ref4.reset,
                                initialValue = _ref4.initialValue,
                                setValue = _ref4.setValue;
                              return react_default.a.createElement(
                                'label',
                                null,
                                react_default.a.createElement('h5', null, name),
                                react_default.a.createElement(
                                  HugeArrayForm_FieldState,
                                  { name: name }
                                ),
                                react_default.a.createElement(src.j, {
                                  name: 'name',
                                  initialValue:
                                    initialValue && initialValue.name
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'age'
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'a'
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'b'
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'c'
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'd'
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'e'
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'f'
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'g',
                                  relevanceWhen: function relevanceWhen(scope) {
                                    return [''.concat(scope, '.f')];
                                  },
                                  relevant: function relevant(_ref5) {
                                    var formApi = _ref5.formApi,
                                      scope = _ref5.scope;
                                    return formApi.getValue(
                                      ''.concat(scope, '.f')
                                    );
                                  }
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'h',
                                  relevanceWhen: ['f'],
                                  relevant: function relevant(_ref6) {
                                    return _ref6.formApi.getValue(
                                      ''.concat(name, '.f')
                                    );
                                  }
                                }),
                                react_default.a.createElement(
                                  src.o,
                                  {
                                    when: function when(_ref7) {
                                      return _ref7.formApi.getValue(
                                        ''.concat(name, '.f')
                                      );
                                    }
                                  },
                                  react_default.a.createElement(src.j, {
                                    name: 'i'
                                  }),
                                  react_default.a.createElement(src.j, {
                                    name: 'j'
                                  }),
                                  react_default.a.createElement(src.j, {
                                    name: 'k'
                                  }),
                                  react_default.a.createElement(src.j, {
                                    name: 'l'
                                  }),
                                  react_default.a.createElement(src.j, {
                                    name: 'm'
                                  })
                                ),
                                react_default.a.createElement(
                                  'button',
                                  {
                                    type: 'button',
                                    onClick: function onClick() {
                                      reset();
                                    }
                                  },
                                  'Reset'
                                ),
                                react_default.a.createElement(
                                  'button',
                                  {
                                    type: 'button',
                                    onClick: function onClick() {
                                      return setValue('name', 'Elon');
                                    }
                                  },
                                  'Set Name to "Elon"'
                                ),
                                react_default.a.createElement(
                                  'button',
                                  { type: 'button', onClick: remove },
                                  'Remove'
                                )
                              );
                            }
                          )
                        );
                      }
                    )
                  ),
                  react_default.a.createElement(
                    'div',
                    {
                      style: { flex: 2, minWidth: '300px', marginLeft: '3rem' }
                    },
                    react_default.a.createElement(src.c, null)
                  )
                )
              )
            );
          }
        ),
        NestedFields_initialValues = {
          friends: [{ name: 'Joe', age: 27 }, { name: 'Jane', age: 22 }]
        },
        NestedFields = Object(withDocs.a)(
          '# Array Field\n\nSometimes you need highly dynamic forms where the data is represented by an array.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, ArrayField } from \'informed\';\n\nconst initialValues = {\n  friends: [\n    {\n      name: \'Joe\',\n      age: \'20\'\n    },\n    {\n      name: \'Jane\',\n      age: \'20\'\n    }\n  ]\n};\n\nconst NestedForm = () => {\n  return (\n    <div>\n      <Form initialValues={initialValues}>\n        <ArrayField name="friends">\n          {({ add }) => {\n            return (\n              <>\n                <button\n                  onClick={() => {\n                    add();\n                  }}\n                  type="button">\n                  Add\n                </button>\n                <ArrayField.Items>\n                  {({ remove, name }) => (\n                    <label>\n                      <h5>{name}</h5>\n                      <Input name="name" label="Name" required />\n                      <Input name="age" label="Age" type="number" />\n                      <button type="button" onClick={remove}>\n                        Remove\n                      </button>\n                    </label>\n                  )}\n                </ArrayField.Items>\n              </>\n            );\n          }}\n        </ArrayField>\n        <button type="submit">Submit</button>\n      </Form>\n    </div>\n  );\n};\n```\n',
          function NestedForm() {
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                { initialValues: NestedFields_initialValues },
                react_default.a.createElement(
                  'div',
                  { style: { display: 'flex', flexWrap: 'wrap' } },
                  react_default.a.createElement(
                    'div',
                    { style: { flex: 1, marginRight: '2rem' } },
                    react_default.a.createElement(
                      src.a,
                      { name: 'friends' },
                      function(_ref) {
                        var add = _ref.add;
                        return react_default.a.createElement(
                          react_default.a.Fragment,
                          null,
                          react_default.a.createElement(
                            'button',
                            {
                              onClick: function onClick() {
                                add();
                              },
                              type: 'button'
                            },
                            'Add'
                          ),
                          react_default.a.createElement(
                            src.a.Items,
                            null,
                            function(_ref2) {
                              var remove = _ref2.remove,
                                name = _ref2.name;
                              return react_default.a.createElement(
                                'label',
                                null,
                                react_default.a.createElement('h5', null, name),
                                react_default.a.createElement(src.j, {
                                  name: 'name',
                                  label: 'Name',
                                  required: !0
                                }),
                                react_default.a.createElement(src.j, {
                                  name: 'age',
                                  label: 'Age',
                                  type: 'number'
                                }),
                                react_default.a.createElement(
                                  'button',
                                  { type: 'button', onClick: remove },
                                  'Remove'
                                )
                              );
                            }
                          )
                        );
                      }
                    )
                  ),
                  react_default.a.createElement(
                    'div',
                    {
                      style: { flex: 2, minWidth: '300px', marginLeft: '3rem' }
                    },
                    react_default.a.createElement(src.c, { values: !0 })
                  )
                )
              )
            );
          }
        ),
        options = {
          car: [
            { value: '', label: '- Select -', disabled: !0 },
            { value: 'modelS', label: 'Model S' },
            { value: 'model3', label: 'Model 3' },
            { value: 'modelX', label: 'Model X' },
            { value: 'modely', label: 'Model Y' }
          ],
          truck: [
            { value: '', label: '- Select -', disabled: !0 },
            { value: 'semi', label: 'Semi Truck' },
            { value: 'cyber', label: 'Cyber Truck' }
          ]
        },
        DependentFields_CarOrTruck = function CarOrTruck() {
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement(
              'label',
              null,
              'Would you like a car or truck?'
            ),
            react_default.a.createElement(
              src.n,
              { name: 'type' },
              react_default.a.createElement(src.m, {
                value: 'car',
                label: 'Car'
              }),
              react_default.a.createElement(src.m, {
                value: 'truck',
                label: 'Truck'
              })
            )
          );
        },
        DependentFields_ProductSelect = function ProductSelect() {
          var _useFieldState = Object(src.y)('type'),
            value = _useFieldState.value,
            dirty = _useFieldState.dirty,
            reset = Object(src.x)('product').reset,
            opts = Object(react.useMemo)(
              function() {
                return options[value] || [];
              },
              [value]
            );
          return (
            Object(react.useEffect)(
              function() {
                dirty && reset();
              },
              [value]
            ),
            react_default.a.createElement(
              src.r,
              { field: 'product', label: 'Product', disabled: !value },
              react_default.a.createElement(
                'option',
                { value: '', disabled: !0 },
                '- Select -'
              ),
              opts.map(function(option) {
                return react_default.a.createElement(
                  'option',
                  { key: option.value, value: option.value },
                  option.label
                );
              })
            )
          );
        },
        DependentFields_initialValues = {
          friends: [
            { name: 'Joe', type: 'truck' },
            { name: 'Jane', type: 'car' }
          ]
        },
        DependentFields = Object(withDocs.a)(
          "# Dependent Fields in ArrayField\n\nInformed's hooks are automatically scoped for you!!\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, ArrayField } from 'informed';\n\nconst options = {\n  car: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'modelS',\n      label: 'Model S'\n    },\n    {\n      value: 'model3',\n      label: 'Model 3'\n    },\n    {\n      value: 'modelX',\n      label: 'Model X'\n    },\n    {\n      value: 'modely',\n      label: 'Model Y'\n    }\n  ],\n  truck: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'semi',\n      label: 'Semi Truck'\n    },\n    {\n      value: 'cyber',\n      label: 'Cyber Truck'\n    }\n  ]\n};\n\nconst CarOrTruck = () => {\n  return (\n    <>\n      <label>Would you like a car or truck?</label>\n      <RadioGroup name=\"type\">\n        <Radio value=\"car\" label=\"Car\" />\n        <Radio value=\"truck\" label=\"Truck\" />\n      </RadioGroup>\n    </>\n  );\n};\n\nconst ProductSelect = () => {\n  const { value, dirty } = useFieldState('type');\n  const { reset } = useFieldApi('product');\n\n  const opts = useMemo(() => options[value] || [], [value]);\n\n  useEffect(\n    () => {\n      if (dirty) reset();\n    },\n    [value]\n  );\n\n  return (\n    <Select field=\"product\" label=\"Product\" disabled={!value}>\n      <option value=\"\" disabled>\n        - Select -\n      </option>\n      {opts.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </Select>\n  );\n};\n\nconst initialValues = {\n  friends: [\n    {\n      name: 'Joe',\n      type: 'truck'\n    },\n    {\n      name: 'Jane',\n      type: 'car'\n    }\n  ]\n};\n\nconst DynamicArrays = () => {\n  return (\n    <Form initialValues={initialValues}>\n      <h5>You:</h5>\n      <Input name=\"name\" label=\"Your Name:\" />\n      <h5>Friends:</h5>\n      <ArrayField name=\"friends\">\n        {({ add }) => (\n          <>\n            <button type=\"button\" onClick={add}>\n              Add Sibling\n            </button>\n            <ArrayField.Items>\n              {({ remove, name, index }) => (\n                <>\n                  <h5>{name}</h5>\n                  <Input name=\"name\" label=\"Name\" required />\n                  <CarOrTruck />\n                  <ProductSelect />\n                  <button type=\"button\" onClick={remove}>\n                    Remove\n                  </button>\n                </>\n              )}\n            </ArrayField.Items>\n          </>\n        )}\n      </ArrayField>\n      <button type=\"submit\">Submit</button>\n    </Form>\n  );\n};\n```\n",
          function ArrayFieldExample() {
            return react_default.a.createElement(
              src.f,
              { initialValues: DependentFields_initialValues },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '1rem' } },
                  react_default.a.createElement('h5', null, 'You:'),
                  react_default.a.createElement(src.j, {
                    name: 'name',
                    label: 'Your Name:'
                  }),
                  react_default.a.createElement('h5', null, 'Friends:'),
                  react_default.a.createElement(
                    src.a,
                    { name: 'friends' },
                    function(_ref) {
                      var add = _ref.add;
                      return react_default.a.createElement(
                        react_default.a.Fragment,
                        null,
                        react_default.a.createElement(
                          'button',
                          { type: 'button', onClick: add },
                          'Add Sibling'
                        ),
                        react_default.a.createElement(
                          src.a.Items,
                          null,
                          function(_ref2) {
                            var remove = _ref2.remove,
                              name = _ref2.name;
                            _ref2.index;
                            return react_default.a.createElement(
                              react_default.a.Fragment,
                              null,
                              react_default.a.createElement('h5', null, name),
                              react_default.a.createElement(src.j, {
                                name: 'name',
                                label: 'Name',
                                required: !0
                              }),
                              react_default.a.createElement(
                                DependentFields_CarOrTruck,
                                null
                              ),
                              react_default.a.createElement(
                                DependentFields_ProductSelect,
                                null
                              ),
                              react_default.a.createElement(
                                'button',
                                { type: 'button', onClick: remove },
                                'Remove'
                              )
                            );
                          }
                        )
                      );
                    }
                  ),
                  react_default.a.createElement('br', null),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, { values: !0 })
                )
              )
            );
          }
        );
    },
    23: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      (function(process) {
        function selectColor(namespace, colors) {
          for (var hash = 0, i = 0; i < namespace.length; i++)
            (hash = (hash << 5) - hash + namespace.charCodeAt(i)), (hash |= 0);
          return colors[Math.abs(hash) % colors.length];
        }
        function formatNodeArgs(args, config) {
          var name = config.namespace;
          if (config.useColors) {
            var c = config.color,
              prefix = '  '
                .concat('[3' + (c < 8 ? c : '8;5;' + c), ';1m')
                .concat(name, ' [0m');
            args[0] = prefix + args[0].split('\n').join('\n' + prefix);
          } else args[0] = name + ' ' + args[0];
        }
        function formatBrowserArgs(args, config) {
          if (
            ((args[0] = (config.useColors ? '%c' : '') + config.namespace),
            config.useColors)
          ) {
            var c = 'color: ' + config.color,
              index = 0,
              lastC = 0;
            args[0].replace(/%[a-zA-Z%]/g, function(match) {
              '%%' !== match && (index++, '%c' === match && (lastC = index));
            }),
              args.splice(lastC, 0, c);
          }
        }
        __webpack_require__.d(__webpack_exports__, 'a', function() {
          return Debug;
        });
        var browserColors = [
          '#0000CC',
          '#0000FF',
          '#0033CC',
          '#0033FF',
          '#0066CC',
          '#0066FF',
          '#0099CC',
          '#0099FF',
          '#00CC00',
          '#00CC33',
          '#00CC66',
          '#00CC99',
          '#00CCCC',
          '#00CCFF',
          '#3300CC',
          '#3300FF',
          '#3333CC',
          '#3333FF',
          '#3366CC',
          '#3366FF',
          '#3399CC',
          '#3399FF',
          '#33CC00',
          '#33CC33',
          '#33CC66',
          '#33CC99',
          '#33CCCC',
          '#33CCFF',
          '#6600CC',
          '#6600FF',
          '#6633CC',
          '#6633FF',
          '#66CC00',
          '#66CC33',
          '#9900CC',
          '#9900FF',
          '#9933CC',
          '#9933FF',
          '#99CC00',
          '#99CC33',
          '#CC0000',
          '#CC0033',
          '#CC0066',
          '#CC0099',
          '#CC00CC',
          '#CC00FF',
          '#CC3300',
          '#CC3333',
          '#CC3366',
          '#CC3399',
          '#CC33CC',
          '#CC33FF',
          '#CC6600',
          '#CC6633',
          '#CC9900',
          '#CC9933',
          '#CCCC00',
          '#CCCC33',
          '#FF0000',
          '#FF0033',
          '#FF0066',
          '#FF0099',
          '#FF00CC',
          '#FF00FF',
          '#FF3300',
          '#FF3333',
          '#FF3366',
          '#FF3399',
          '#FF33CC',
          '#FF33FF',
          '#FF6600',
          '#FF6633',
          '#FF9900',
          '#FF9933',
          '#FFCC00',
          '#FFCC33'
        ];
        function createLogger() {
          var prefix =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : null,
            config = arguments.length > 1 ? arguments[1] : void 0;
          return function() {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            )
              args[_key] = arguments[_key];
            prefix && args.unshift(prefix);
            var matches = config.namespaces.split(',').map(function(namespace) {
              return '*' === namespace[namespace.length - 1]
                ? new RegExp(
                    '^' + namespace.slice(0, namespace.length - 1) + '.*$'
                  )
                : new RegExp('^' + namespace + '$');
            });
            matches.some(function(regex) {
              return regex.test(prefix);
            }),
              selectColor(prefix, config.colors),
              config.useColors;
          };
        }
        function nodeLogger(prefix) {
          return createLogger(
            prefix,
            (function loadNode() {
              return {
                namespaces:
                  Object({
                    NODE_ENV: 'production',
                    NODE_PATH: [],
                    STORYBOOK: 'true',
                    PUBLIC_URL: '.'
                  }).DEBUG || '',
                colors: [6, 2, 3, 4, 5, 1],
                useColors: !0,
                formatArgs: formatNodeArgs
              };
            })()
          );
        }
        function browserLogger(prefix) {
          return createLogger(
            prefix,
            (function loadBrowser() {
              var namespaces;
              try {
                namespaces = localStorage.getItem('debug');
              } catch (error) {}
              return (
                !namespaces &&
                  void 0 !== process &&
                  'env' in process &&
                  (namespaces = Object({
                    NODE_ENV: 'production',
                    NODE_PATH: [],
                    STORYBOOK: 'true',
                    PUBLIC_URL: '.'
                  }).DEBUG),
                {
                  namespaces: namespaces || '',
                  colors: browserColors,
                  useColors: !0,
                  formatArgs: formatBrowserArgs
                }
              );
            })()
          );
        }
        var Debug = function Debug(prefix) {
          return void 0 === process ||
            'renderer' === process.type ||
            !0 === process.browser ||
            process.__nwjs
            ? browserLogger(prefix)
            : nodeLogger(prefix);
        };
      }.call(this, __webpack_require__(208)));
    },
    4: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__.d(__webpack_exports__, 'f', function() {
        return FormControllerContext;
      }),
        __webpack_require__.d(__webpack_exports__, 'e', function() {
          return FormApiContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'g', function() {
          return FormStateContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'j', function() {
          return MultistepStepContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'h', function() {
          return MultistepApiContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'i', function() {
          return MultistepStateContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'd', function() {
          return ArrayFieldStateContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'a', function() {
          return ArrayFieldApiContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'b', function() {
          return ArrayFieldItemApiContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'c', function() {
          return ArrayFieldItemStateContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'l', function() {
          return RelevanceContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'k', function() {
          return RadioGroupContext;
        }),
        __webpack_require__.d(__webpack_exports__, 'm', function() {
          return ScopeContext;
        });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0),
        react__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__
        ),
        FormControllerContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(
          {}
        ),
        FormApiContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(
          {}
        ),
        FormStateContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(
          {}
        ),
        MultistepStepContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        MultistepApiContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        MultistepStateContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        ArrayFieldStateContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        ArrayFieldApiContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        ArrayFieldItemApiContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        ArrayFieldItemStateContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        RelevanceContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        RadioGroupContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(),
        ScopeContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext();
    },
    414: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Complex Form\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport {\n  Form,\n  Text,\n  TextArea,\n  RadioGroup,\n  Radio,\n  Checkbox,\n  Select,\n  Option,\n  Scope\n} from \'informed\';\n\n<Form>\n  <Input name="name" label="First name:" />\n  <Input name="favorite.color" label="Favorite color:" />\n  <Scope scope="favorite">\n    <Input name="food" label="Favorite food:" />\n    <Input name="animal" label="Favorite animal:" />\n  </Scope>\n  <Input name="friends[0]" label="Friend 1:" />\n  <Input name="friends[1]" label="Friend 2:" />\n  <Input name="friends[2]" label="Friend 3:" />\n  <TextArea name="bio" label="Bio" />\n  <RadioGroup name="gender">\n    <Radio value="male" label="Male:" />\n    <Radio value="female" label="Female:" />\n  </RadioGroup>\n  <Select name="status" label="Relationship status:">\n    <Option value="" disabled>\n      Select One...\n    </Option>\n    <Option value="single">Single</Option>\n    <Option value="relationship">Relationship</Option>\n    <Option value="complicated">Complicated</Option>\n  </Select>\n  <Select\n    name="colors"\n    label="Colors:"\n    multiple\n    style={{ height: \'100px\', width: \'200px\' }}>\n    <Option value="red">Red</Option>\n    <Option value="green">Green</Option>\n    <Option value="blue">Blue</Option>\n    <Option value="yellow">Yellow</Option>\n    <Option value="orange">Orange</Option>\n    <Option value="purple">Purple</Option>\n  </Select>\n  <Checkbox name="authorize" label="Authorize:" />\n  <button type="submit">Submit</button>\n</Form>;\n```\n',
        function Complex() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              { autocomplete: 'off' },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex', flexWrap: 'wrap' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '2rem' } },
                  react_default.a.createElement(src.j, {
                    name: 'name',
                    label: 'First name:'
                  }),
                  react_default.a.createElement(src.j, {
                    name: 'favorite.color',
                    label: 'Favorite color:'
                  }),
                  react_default.a.createElement(
                    src.q,
                    { scope: 'favorite' },
                    react_default.a.createElement(src.j, {
                      name: 'food',
                      label: 'Favorite food:'
                    }),
                    react_default.a.createElement(src.j, {
                      name: 'animal',
                      label: 'Favorite animal:'
                    })
                  ),
                  react_default.a.createElement(src.j, {
                    name: 'friends[0]',
                    label: 'Friend 1:'
                  }),
                  react_default.a.createElement(src.j, {
                    name: 'friends[1]',
                    label: 'Friend 2:'
                  }),
                  react_default.a.createElement(src.j, {
                    name: 'friends[2]',
                    label: 'Friend 3:'
                  }),
                  react_default.a.createElement(src.s, {
                    name: 'bio',
                    label: 'Bio'
                  }),
                  react_default.a.createElement(
                    src.n,
                    { name: 'gender' },
                    react_default.a.createElement(src.m, {
                      value: 'male',
                      label: 'Male:'
                    }),
                    react_default.a.createElement(src.m, {
                      value: 'female',
                      label: 'Female:'
                    })
                  ),
                  react_default.a.createElement(
                    src.r,
                    { name: 'status', label: 'Relationship status:' },
                    react_default.a.createElement(
                      src.l,
                      { value: '', disabled: !0 },
                      'Select One...'
                    ),
                    react_default.a.createElement(
                      src.l,
                      { value: 'single' },
                      'Single'
                    ),
                    react_default.a.createElement(
                      src.l,
                      { value: 'relationship' },
                      'Relationship'
                    ),
                    react_default.a.createElement(
                      src.l,
                      { value: 'complicated' },
                      'Complicated'
                    )
                  ),
                  react_default.a.createElement(
                    src.r,
                    {
                      name: 'colors',
                      label: 'Colors:',
                      multiple: !0,
                      style: { height: '100px', width: '200px' }
                    },
                    react_default.a.createElement(
                      src.l,
                      { value: 'red' },
                      'Red'
                    ),
                    react_default.a.createElement(
                      src.l,
                      { value: 'green' },
                      'Green'
                    ),
                    react_default.a.createElement(
                      src.l,
                      { value: 'blue' },
                      'Blue'
                    ),
                    react_default.a.createElement(
                      src.l,
                      { value: 'yellow' },
                      'Yellow'
                    ),
                    react_default.a.createElement(
                      src.l,
                      { value: 'orange' },
                      'Orange'
                    ),
                    react_default.a.createElement(
                      src.l,
                      { value: 'purple' },
                      'Purple'
                    )
                  ),
                  react_default.a.createElement(src.b, {
                    name: 'authorize',
                    label: 'Authorize:'
                  }),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '300px', marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, null)
                )
              )
            )
          );
        }
      );
    },
    415: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      __webpack_exports__.a = Object(withDocs.a)(
        'You can also get access to `Informed`s form api via render a function as a child:\n\n\x3c!-- STORY --\x3e\n\n```jsx\n<Form>\n  {({ formApi }) => (\n    <div>\n      <Input name="name" label="First Name:" />\n      <button\n        type="button"\n        onClick={() =>\n          formApi.setValue(\n            \'name\',\n            Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n          )\n        }>\n        Random\n      </button>\n      <button type="submit">Submit</button>\n    </div>\n  )}\n</Form>\n```\n\n<br />\n',
        function FormApi() {
          return react_default.a.createElement(src.f, null, function(_ref) {
            var formApi = _ref.formApi;
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'First Name:'
              }),
              react_default.a.createElement(
                'button',
                {
                  type: 'button',
                  onClick: function onClick() {
                    return formApi.setValue(
                      'name',
                      Math.floor(
                        Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)
                      )
                    );
                  }
                },
                'Random'
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              )
            );
          });
        }
      );
    },
    600: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Dynamic Fields\n\nSometimes you need to conditionally render fields. Below is a simple\nexample the shows or hides a spouce depending on the radio selected!\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, RadioGroup, Radio, Relevant } from \'informed\';\n\n<Form>\n  <Input name="name" label="First name:" />\n  <label>Are you married?</label>\n  <RadioGroup field="married">\n    <label>\n      Yes <Radio value="yes" />\n    </label>\n    <label>\n      No <Radio value="no" />\n    </label>\n  </RadioGroup>\n  <Relevant when={({ formState }) => formState.values?.married === \'yes\'}>\n    <Input name="spouse" label="Spouse name:" />\n  </Relevant>\n  <button type="submit">Submit</button>\n</Form>;\n```\n',
        function DynamicFields() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(
                'div',
                { style: { display: 'flex', flexWrap: 'wrap' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '2rem' } },
                  react_default.a.createElement(src.j, {
                    name: 'name',
                    label: 'First name:'
                  }),
                  react_default.a.createElement(
                    'label',
                    null,
                    'Are you married?'
                  ),
                  react_default.a.createElement(
                    src.n,
                    { name: 'married' },
                    react_default.a.createElement(
                      'label',
                      null,
                      'Yes ',
                      react_default.a.createElement(src.m, { value: 'yes' })
                    ),
                    react_default.a.createElement(
                      'label',
                      null,
                      'No ',
                      react_default.a.createElement(src.m, { value: 'no' })
                    )
                  ),
                  react_default.a.createElement(
                    src.o,
                    {
                      when: function when(_ref) {
                        var _formState$values;
                        return (
                          'yes' ===
                          (null ===
                            (_formState$values = _ref.formState.values) ||
                          void 0 === _formState$values
                            ? void 0
                            : _formState$values.married)
                        );
                      }
                    },
                    react_default.a.createElement(src.j, {
                      name: 'spouse',
                      label: 'Spouse name:'
                    })
                  ),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '300px', marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, null)
                )
              )
            )
          );
        }
      );
    },
    935: function(module) {
      module.exports = JSON.parse('{"a":"4.0.6"}');
    },
    938: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0),
        react__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__
        );
      __webpack_exports__.a = function(story) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
          'div',
          { class: 'informed-container' },
          story()
        );
      };
    },
    946: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0),
        react__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(
          react__WEBPACK_IMPORTED_MODULE_0__
        ),
        RickRoll = function RickRoll() {
          return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
            'div',
            {
              style: {
                width: '100%',
                height: '100%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                flexDirection: 'column'
              }
            },
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
              'h1',
              null,
              'Got Ya!'
            ),
            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(
              'iframe',
              {
                width: '100%',
                height: '600px',
                src: 'https://www.youtube.com/embed/dQw4w9WgXcQ?autoplay=1',
                frameborder: '0',
                allow:
                  'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',
                allowfullscreen: !0
              }
            )
          );
        };
      (RickRoll.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'RickRoll'
      }),
        (__webpack_exports__.a = RickRoll),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['stories/Playground/RickRoll.js'] = {
            name: 'RickRoll',
            docgenInfo: RickRoll.__docgenInfo,
            path: 'stories/Playground/RickRoll.js'
          });
    },
    948: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = __webpack_require__(1),
        validate = function validate(value) {
          if (!value || value.length < 5)
            return 'Field must be at least five characters';
        },
        GettingStarted_submit = function submit(_ref) {
          var values = _ref.values;
          return window.alert(
            'Form successfully submitted with '.concat(JSON.stringify(values))
          );
        },
        Intro_GettingStarted = Object(withDocs.a)(
          '## Having Fun\n\nAlright its time to have some fun! The code below is all you need to get\nstarted. Go ahead and play around with the form below, check out the code\nsnippet, and then you can read about what the heck is going on.\n\n**Hint:** type 2 or three characters and click submit and take a look at the state represented on the right.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input } from \'informed\';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return \'Field must be at least five characters\';\n};\n\nconst submit = ({ values }) =>\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\n\n<Form onSubmit={submit}>\n  <Input name="name" label="First name" validate={validate} />\n  <button type="submit">Submit</button>\n</Form>;\n```\n\n### Explanation\n\n**Ok so what the Foo is going on?**\n\nIts actually pretty simple!\n\nInformed takes care of managing form state so you don\'t have to! Basically\nit hooks up the native `onChange`, `onBlur`, and `onSubmit` functions and keeps track of\nall sorts of stuff based on those changes. This example uses the `<Text>` and `<Form>` components\nfrom informed, but under the hood they are literally just `<input>` and `<form>` dom elements.\nSo you can pass anything down to them as usual! **For example:** `<Input field="name" style={{color: \'green\'}}>`\n\n<br/>\n',
          function GettingStarted() {
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                {
                  id: 'intro-form',
                  onSubmit: GettingStarted_submit,
                  autocomplete: 'off'
                },
                react_default.a.createElement(
                  'div',
                  { style: { display: 'flex', flexWrap: 'wrap' } },
                  react_default.a.createElement(
                    'div',
                    { style: { flex: 1, marginRight: '2rem' } },
                    react_default.a.createElement(src.j, {
                      name: 'name',
                      label: 'First name',
                      validate: validate
                    }),
                    react_default.a.createElement(
                      'button',
                      { type: 'submit' },
                      'Submit'
                    )
                  ),
                  react_default.a.createElement(
                    'div',
                    {
                      style: {
                        flex: 2,
                        flexDirection: 'column',
                        display: 'flex',
                        minWidth: '300px',
                        marginLeft: '3rem'
                      }
                    },
                    react_default.a.createElement(src.c, {
                      errors: !0,
                      values: !0
                    })
                  )
                )
              )
            );
          }
        ),
        Intro_FormState = Object(withDocs.a)(
          '## Form State\n\n**"Ok so informed takes care of state so I dont have to.. but how do i get my hands\non this \'awesome stuff\'??"**\n\nThats a great question! There are many ways so lets take a look at a few!\n\nBelow is a similar example, except this time, we show you how to access\nthe form state and render out the values that are changing.\n\n**Note: for a full list of the available values within formState go to the\nformState section of these docs**\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, useFormState, Debug } from \'informed\';\n\nconst FormState = () => {\n  const formState = useFormState();\n\n  return (\n    <pre>\n      <code>{JSON.stringify(formState, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst Example = () => {\n  return (\n    <Form>\n      <Input name="name" label="First Name" />\n      <button type="submit">Submit</button>\n      <Debug />\n    </Form>\n  );\n};\n```\n\n### Ok so what if i need the state outside of the `<Form />` ??\n\nDon\'t fret! This is also very simple. You have two options:\n\n1. Use the Forms `onChange` prop.\n\n```jsx\n<Form onChange={formState => console.log(formState)}>\n  <Input name="hello" />\n  <button type="submit">Submit</button>\n</Form>\n```\n\n<br/>\n2) Use the Forms `formApiRef` prop, and then use the apis `getState` function.\n\n```jsx\nimport React, { useRef } from \'react\';\nimport { Form, Input } from \'informed\';\n\nconst MyAwesomeForm = () => {\n  const formApiRef = useRef();\n\n  const handleClick = () => {\n    console.log(apiRef.current.getState());\n  };\n\n  return (\n    <div>\n      <Form formApiRef={formApiRef}>\n        <Input name="hello" />\n        <button type="submit">Submit</button>\n      </Form>\n      <button onClick={handleClick}>Print Form State</button>\n    </div>\n  );\n};\n```\n\n<br />\n',
          function Example() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'First Name'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, null)
            );
          }
        ),
        ApiRef = Object(withDocs.a)(
          'You can also get access to `Informed`s form api via a ref as stated before:\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport React, { useRef } from \'react\';\nimport { Form, Input } from \'informed\';\n\nconst MyAwesomeForm = () => {\n  const formApiRef = useRef();\n\n  const handleClick = () => {\n    formApiRef.current.setValue(\n      \'name\',\n      Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n    );\n  };\n\n  return (\n    <div>\n      <Form formApiRef={formApiRef}>\n        <Input name="name" label="First Name:" />\n        <button type="submit">Submit</button>\n      </Form>\n      <button onClick={handleClick}>Random</button>\n    </div>\n  );\n};\n```\n\n<br />\n',
          function MyAwesomeForm() {
            var formApiRef = Object(react.useRef)();
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                { formApiRef: formApiRef },
                react_default.a.createElement(src.j, {
                  name: 'name',
                  label: 'First Name:'
                }),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                )
              ),
              react_default.a.createElement(
                'button',
                {
                  onClick: function handleClick() {
                    formApiRef.current.setValue(
                      'name',
                      Math.floor(
                        Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)
                      )
                    );
                  }
                },
                'Random'
              )
            );
          }
        ),
        RenderProp = __webpack_require__(415),
        UseFormApi_RandomSetterButton = function RandomSetterButton() {
          var formApi = Object(src.A)();
          return react_default.a.createElement(
            'button',
            {
              type: 'button',
              onClick: function onClick() {
                return formApi.setValue(
                  'name',
                  Math.floor(
                    Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)
                  )
                );
              }
            },
            'Random'
          );
        },
        UseFormApi = Object(withDocs.a)(
          '### Form Api ??\n\n**Yes what a beautiful segue into the formApi!**\n\nInformed also gives you access to a `formApi`. This api allows you to grab\nand manipulate values using getters and setters. In the previous example, we\nactually used a prop called `formApiRef` in order to getAccess to informed\'s api\nexternally. Then we used the `getState` function to log out the state when\nour external button was clicked.\n\nBelow is an example where you can access the formApi via hooks. Then use it\nto change the value of the field when the random button is clicked!\n\n**Note: for a full list of the available functions within formApi go to the\nformApi section of these docs**\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, useFormApi } from \'informed\';\n\nconst RandomSetterButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type="button"\n      onClick={() =>\n        formApi.setValue(\n          \'name\',\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n        )\n      }>\n      Random\n    </button>\n  );\n};\n\n<Form>\n  <Input name="name" label="First Name:" />\n  <button type="submit">Submit</button>\n  <RandomSetterButton />\n</Form>;\n```\n\n<br />\n',
          function FormApi() {
            return react_default.a.createElement(
              src.f,
              { id: 'state-form' },
              react_default.a.createElement(
                'div',
                null,
                react_default.a.createElement(src.j, {
                  name: 'name',
                  label: 'First Name:'
                }),
                react_default.a.createElement(
                  UseFormApi_RandomSetterButton,
                  null
                ),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                )
              )
            );
          }
        ),
        FormApi_Intro = function Intro() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(UseFormApi, null),
            react_default.a.createElement(RenderProp.a, null),
            react_default.a.createElement(ApiRef, null)
          );
        };
      FormApi_Intro.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Intro'
      };
      var Intro_FormApi = FormApi_Intro;
      'undefined' != typeof STORYBOOK_REACT_CLASSES &&
        (STORYBOOK_REACT_CLASSES['stories/Intro/FormApi/index.js'] = {
          name: 'Intro',
          docgenInfo: FormApi_Intro.__docgenInfo,
          path: 'stories/Intro/FormApi/index.js'
        });
      var Complex = __webpack_require__(414),
        DynamicArrays_Reset = function Reset() {
          var formApi = Object(src.A)();
          return react_default.a.createElement(
            'button',
            { type: 'button', onClick: formApi.reset },
            'Reset Form'
          );
        },
        DynamicArrays_DynamicArraysContent = function DynamicArraysContent() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              { initialValues: { siblings: ['foo', 'bar', 'baz'] } },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '1rem' } },
                  react_default.a.createElement(DynamicArrays_Reset, null),
                  react_default.a.createElement('h5', null, 'You:'),
                  react_default.a.createElement(
                    'label',
                    null,
                    'Your Name: ',
                    react_default.a.createElement(src.j, { name: 'name' })
                  ),
                  react_default.a.createElement('h5', null, 'Siblings:'),
                  react_default.a.createElement(
                    src.a,
                    { name: 'siblings' },
                    function(_ref) {
                      var add = _ref.add,
                        reset = _ref.reset;
                      return react_default.a.createElement(
                        react_default.a.Fragment,
                        null,
                        react_default.a.createElement(
                          'button',
                          { onClick: add, type: 'button' },
                          'Add Sibling'
                        ),
                        react_default.a.createElement(
                          'button',
                          { onClick: reset, type: 'button' },
                          'Reset Siblings'
                        ),
                        react_default.a.createElement(
                          src.a.Items,
                          null,
                          function(_ref2) {
                            var remove = _ref2.remove,
                              name = _ref2.name;
                            return react_default.a.createElement(
                              react_default.a.Fragment,
                              null,
                              react_default.a.createElement(src.j, {
                                label: 'Name',
                                name: name
                              }),
                              react_default.a.createElement(
                                'button',
                                { type: 'button', onClick: remove },
                                'Remove'
                              )
                            );
                          }
                        )
                      );
                    }
                  ),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, { values: !0 })
                )
              )
            )
          );
        },
        Arrays_DynamicArrays = Object(withDocs.a)(
          '# Dynamic Array of fields\n\nFields can also be associated with an dynamic array. Here is an example where you can add many siblings!\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, ArrayField } from \'informed\';\n\nconst DynamicArrays = () => {\n  return (\n    <div>\n      <Form initialValues={{ siblings: [\'foo\', \'bar\', \'baz\'] }}>\n        <ArrayField name="siblings">\n          {({ add, reset }) => (\n            <>\n              <button onClick={add} type="button">\n                Add Sibling\n              </button>\n              <button onClick={reset} type="button">\n                Reset Siblings\n              </button>\n              <ArrayField.Items>\n                {({ remove, name }) => (\n                  <>\n                    <Input label="Name" name={name} />\n                    <button type="button" onClick={remove}>\n                      Remove\n                    </button>\n                  </>\n                )}\n              </ArrayField.Items>\n            </>\n          )}\n        </ArrayField>\n        <button type="submit">Submit</button>\n      </Form>\n    </div>\n  );\n};\n```\n',
          function DynamicArrays() {
            return react_default.a.createElement(
              DynamicArrays_DynamicArraysContent,
              null
            );
          }
        ),
        UseForm_validate = (Object(withDocs.a)(
          '### Whate Else?\n\n**This is sick! What else can I do???**\n\nSoo much!!!\n\n\x3c!-- STORY --\x3e\n\n# Where should I go next?\n\nTo see all of the available stuff in informed. I would recoomend you check out the `Form > Props`, `Form > State`, `Form > Api`, and `Inputs > Intro` sections of the docs.',
          function WhatElse() {
            return react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement(Complex.a, null),
              react_default.a.createElement('br', null),
              react_default.a.createElement(Arrays_DynamicArrays, null),
              react_default.a.createElement('br', null)
            );
          }
        ),
        function validate(value) {
          if (!value || value.length < 5)
            return 'Field must be at least five characters';
        }),
        onSubmit = function onSubmit(_ref) {
          var values = _ref.values;
          return window.alert(
            'Form successfully submitted with '.concat(JSON.stringify(values))
          );
        },
        esm = (Object(withDocs.a)(
          '### useForm Hook\n\nHooks are all the rage these days, and some people want to "hook things up themselves" :)\nHere is an example where you can use the `useFormHook`.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input } from \'informed\';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return \'Field must be at least five characters\';\n};\n\nconst onSubmit = ({ values }) =>\n  window.alert(`Form successfully submitted with ${JSON.stringify(values)}`);\n\nconst UseFormExample = () => {\n  const { formController, formState, render } = useForm({\n    onSubmit\n  });\n\n  return render(\n    <form\n      onReset={formController.reset}\n      onSubmit={formController.submitForm}\n      onKeyDown={formController.keyDown}>\n      <label>\n        First name:\n        <Input field="name" validate={validate} />\n        <small style={{ color: \'red\' }}>{formState.errors.name}</small>\n      </label>\n      <button type="submit">Submit</button>\n      <pre>\n        <code>{JSON.stringify(formState, null, 2)}</code>\n      </pre>\n    </form>\n  );\n};\n```\n\n<br/>\n',
          function UseForm() {
            var _useForm = Object(src.z)({ onSubmit: onSubmit }),
              formController = _useForm.formController,
              formState = _useForm.formState;
            return (0, _useForm.render)(
              react_default.a.createElement(
                'div',
                null,
                react_default.a.createElement(
                  'form',
                  {
                    onReset: formController.reset,
                    onSubmit: formController.submitForm,
                    onKeyDown: formController.keyDown
                  },
                  react_default.a.createElement(
                    'div',
                    { style: { display: 'flex', flexWrap: 'wrap' } },
                    react_default.a.createElement(
                      'div',
                      { style: { flex: 1, marginRight: '2rem' } },
                      react_default.a.createElement(
                        'label',
                        null,
                        'First name:',
                        react_default.a.createElement(src.j, {
                          name: 'name',
                          validate: UseForm_validate
                        }),
                        react_default.a.createElement(
                          'small',
                          { style: { color: 'red' } },
                          formState.errors.name
                        )
                      ),
                      react_default.a.createElement(
                        'button',
                        { type: 'submit' },
                        'Submit'
                      )
                    ),
                    react_default.a.createElement(
                      'div',
                      {
                        style: {
                          flex: 2,
                          flexDirection: 'column',
                          display: 'flex',
                          minWidth: '300px',
                          marginLeft: '2rem'
                        }
                      },
                      react_default.a.createElement(
                        'pre',
                        null,
                        react_default.a.createElement(
                          'code',
                          null,
                          JSON.stringify(formState, null, 2)
                        )
                      )
                    )
                  )
                )
              )
            );
          }
        ),
        __webpack_require__(947)),
        CodeBlock_CodeBlock = function CodeBlock(_ref) {
          var code = _ref.code;
          return react_default.a.createElement(esm.a, {
            template: 'react',
            theme: 'codesandbox-dark',
            files: {
              '/App.js': code,
              '/style.css': {
                code:
                  "\ninput {\n  margin-bottom: 1rem;\n}\n\ninput:not([type='checkbox']):not([type='radio']),\ntextarea,\nselect {\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n  display: block;\n  border-radius: 20px;\n  width: 100%;\n  padding: 10px 20px;\n  font-weight: 500;\n  border: 1px solid transparent;\n  max-width: 400px;\n  background-color: #f4f4f4;\n}\n\n.radio-label {\n  display: block;\n}\n\ntextarea {\n  max-width: 100%;\n}\n\nselect {\n  /* needed */\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  /* SVG background image */\n  background-image: url('data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2212%22%20height%3D%2212%22%20viewBox%3D%220%200%2012%2012%22%3E%3Ctitle%3Edown-arrow%3C%2Ftitle%3E%3Cg%20fill%3D%22%23000000%22%3E%3Cpath%20d%3D%22M10.293%2C3.293%2C6%2C7.586%2C1.707%2C3.293A1%2C1%2C0%2C0%2C0%2C.293%2C4.707l5%2C5a1%2C1%2C0%2C0%2C0%2C1.414%2C0l5-5a1%2C1%2C0%2C1%2C0-1.414-1.414Z%22%20fill%3D%22%23000000%22%3E%3C%2Fpath%3E%3C%2Fg%3E%3C%2Fsvg%3E');\n  background-size: 0.6em;\n  background-position: calc(100% - 1.3em) center;\n  background-repeat: no-repeat;\n}\n\n.select:before {\n  content: '';\n  position: absolute;\n  right: 10px;\n  top: 8px;\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #f00;\n}\n\n.select:after {\n  content: '';\n  position: absolute;\n  right: 10px;\n  top: 3px;\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-top: 10px solid #333;\n}\n\nlabel {\n  /* text-align: left; */\n  /* margin-left: 1rem; */\n  margin-bottom: 1rem;\n  display: block;\n}\n\nbutton {\n  text-align: left;\n  display: inline-block;\n  height: var(--informed-height--pill);\n  border: 1px solid transparent;\n  border-radius: 20px;\n  padding: 5px 40px;\n  color: white;\n  background-color: #3e6ae1;\n  margin-bottom: 1rem;\n  margin-top: 1rem;\n  margin-right: 1rem;\n}\n\nbutton[type='submit'] {\n  display: block;\n}\n\n.informed-container {\n  padding: 4rem;\n}\n\n.informed-black {\n  background-color: rgb(13, 16, 17);\n  color: white !important;\n}\n\n.informed-black input:not([type='checkbox']):not([type='radio']),\n.informed-black select,\n.informed-black textarea {\n  background-color: #222222;\n  color: white;\n}\n\n.informed-black select {\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Ctitle%3Edown-arrow%3C/title%3E%3Cg fill='%23000000'%3E%3Cpath d='M10.293,3.293,6,7.586,1.707,3.293A1,1,0,0,0,.293,4.707l5,5a1,1,0,0,0,1.414,0l5-5a1,1,0,1,0-1.414-1.414Z' fill='%23FFFFFF'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\");\n  /* filter: invert(1); */\n}\n",
                hidden: !0
              }
            },
            options: {
              showLineNumbers: !0,
              showNavigator: !0,
              editorHeight: 570
            },
            customSetup: {
              dependencies: { informed: 'beta' },
              entry: '/index.js'
            }
          });
        };
      (CodeBlock_CodeBlock.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'CodeBlock'
      }),
        'undefined' != typeof STORYBOOK_REACT_CLASSES &&
          (STORYBOOK_REACT_CLASSES['stories/utils/CodeBlock.js'] = {
            name: 'CodeBlock',
            docgenInfo: CodeBlock_CodeBlock.__docgenInfo,
            path: 'stories/utils/CodeBlock.js'
          });
      var Intro_onSubmit = function onSubmit(_ref) {
          var values = _ref.values;
          return console.log(values);
        },
        Intro_Intro = Object(withDocs.a)(
          '# Intro\n\nSay hello to the best react form library you have ever used! Informed is an extensive, simple, and efficient solution for creating basic to complex forms in react. Out of the box you get the ability to grab and manipulate values, validate fields, create custom inputs, and much much more!\n\nOh and YES WE USE HOOKS!\n\n[![Docs](https://badgen.net/badge/V4/Docs/purple)](https://joepuzzo.github.io/informed)\n[![npmversion](https://img.shields.io/npm/v/informed.svg)](https://www.npmjs.com/package/informed)\n[![github](https://badgen.net/badge/gihub/main/green?icon=github)](https://github.com/joepuzzo/informed)\n[![Docs](https://badgen.net/badge/V3/Docs/red)](https://61af80ffc6bc460007bf9ec7--joepuzzo-informed.netlify.app/)\n\n\x3c!--  --\x3e\n\n\x3c!-- [![Build Status](https://travis-ci.org/joepuzzo/informed.svg?branch=master)](https://travis-ci.org/joepuzzo/informed)\n[![Coverage Status](https://coveralls.io/repos/github/joepuzzo/informed/badge.svg?branch=master)](https://coveralls.io/github/joepuzzo/informed?branch=master)\n[![Minzipped-Size](https://badgen.net/bundlephobia/minzip/informed)](https://bundlephobia.com/result?p=informed) --\x3e\n\n<iframe width="560" height="315" src="https://www.youtube.com/embed/DtUo40Jxeyc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n\n## Getting Started\n\n##### Install with npm\n\n```\nnpm install --save informed\n```\n\n#### What Can it do ?\n\nSee for yourself.\n\nBy default it comes with native dom inputs that are controlled by informed.\n\n```jsx\nimport { Form, Input, Select, Checkbox, Relevant, Debug } from \'informed\';\n\nconst onSubmit = ({ values }) => console.log(values);\n\nconst ExampleForm = () => (\n  <Form onSubmit={onSubmit}>\n    <Input name="name" label="Name" placeholder="Elon" />\n    <Input name="age" type="number" label="Age" required="Age Required" />\n    <Input name="phone" label="Phone" formatter="+1 (###)-###-####" />\n    <Select name="car" label="Car" initialValue="ms">\n      <option value="ms">Model S</option>\n      <option value="m3">Model 3</option>\n      <option value="mx">Model X</option>\n      <option value="my">Model Y</option>\n    </Select>\n    <Checkbox name="married" label="Married?" />\n    <Relevant when={({ formState }) => formState.values.married}>\n      <Input name="spouse" label="Spouse" />\n    </Relevant>\n    <button type="submit">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n\n\x3c!-- STORY --\x3e\n',
          function GettingStarted() {
            return react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement(
                src.f,
                { onSubmit: Intro_onSubmit, autocomplete: 'off' },
                react_default.a.createElement(
                  'div',
                  { style: { display: 'flex' } },
                  react_default.a.createElement(
                    'div',
                    { style: { flex: '1' } },
                    react_default.a.createElement(src.j, {
                      name: 'name',
                      label: 'Name',
                      placeholder: 'Elon'
                    }),
                    react_default.a.createElement(src.j, {
                      name: 'age',
                      type: 'number',
                      label: 'Age',
                      required: 'Age Required'
                    }),
                    react_default.a.createElement(src.j, {
                      name: 'phone',
                      label: 'Phone',
                      formatter: '+1 (###)-###-####'
                    }),
                    react_default.a.createElement(
                      src.r,
                      { name: 'car', label: 'Car', initialValue: 'ms' },
                      react_default.a.createElement(
                        'option',
                        { value: 'ms' },
                        'Model S'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'm3' },
                        'Model 3'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'mx' },
                        'Model X'
                      ),
                      react_default.a.createElement(
                        'option',
                        { value: 'my' },
                        'Model Y'
                      )
                    ),
                    react_default.a.createElement(
                      'label',
                      null,
                      'Married: ',
                      react_default.a.createElement(src.b, { name: 'married' })
                    ),
                    react_default.a.createElement(
                      src.o,
                      {
                        when: function when(_ref2) {
                          return _ref2.formState.values.married;
                        }
                      },
                      react_default.a.createElement(src.j, {
                        name: 'spouse',
                        label: 'Spouse'
                      })
                    ),
                    react_default.a.createElement(
                      'button',
                      { type: 'submit' },
                      'Submit'
                    )
                  ),
                  react_default.a.createElement(
                    'div',
                    { style: { flex: '1' } },
                    react_default.a.createElement(src.c, null)
                  )
                )
              ),
              react_default.a.createElement('br', null),
              react_default.a.createElement(CodeBlock_CodeBlock, {
                code:
                  '\nimport { Form, Input, Select, Checkbox, Relevant } from \'informed\';\nimport style from \'./style.css\';\n\nconst onSubmit = ({values}) => console.log(values);\n\nexport default function App() {\n  return (\n    <Form onSubmit={onSubmit} autocomplete="off">\n      <Input field="name" label="Name" placeholder="Elon" />\n      <Input field="age" type="number" label="Age" required="Age Required" />\n      <Input field="phone" label="Phone" formatter="+1 (###)-###-####" />\n      <Select field="car" label="Car" initialValue="ms">\n        <option value="ms">Model S</option>\n        <option value="m3">Model 3</option>\n        <option value="mx">Model X</option>\n        <option value="my">Model Y</option>\n      </Select>\n      <label>\n        Married: <Checkbox field="married" />\n      </label>\n      <Relevant when={({ formState }) => formState.values.married}>\n        <Input field="spouse" label="Spouse" />\n      </Relevant>\n      <button type="submit">Submit</button>\n    </Form>\n  )\n}'
              })
            );
          }
        ),
        _excluded = ['children'],
        _excluded2 = ['label', 'id'],
        _excluded3 = ['label', 'id'],
        _excluded4 = ['label', 'id'],
        _excluded5 = ['label', 'id', 'children'];
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ownKeys(Object(source), !0).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function _extends() {
        return (
          (_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          _extends.apply(this, arguments)
        );
      }
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var CustomIntro_Form = function Form(_ref) {
          var children = _ref.children,
            rest = _objectWithoutProperties(_ref, _excluded),
            _useForm = Object(src.z)(rest),
            formController = _useForm.formController,
            render = _useForm.render,
            userProps = _useForm.userProps;
          return render(
            react_default.a.createElement(
              'form',
              _extends({ noValidate: !0 }, userProps, {
                onSubmit: formController.submitForm
              }),
              children
            )
          );
        },
        CustomIntro_Input = function Input(props) {
          var _useField = Object(src.w)(_objectSpread({ type: 'text' }, props)),
            render = _useField.render,
            informed = _useField.informed,
            userProps = _useField.userProps,
            ref = _useField.ref,
            label = userProps.label,
            id = userProps.id,
            rest = _objectWithoutProperties(userProps, _excluded2);
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement('label', { htmlFor: id }, label),
              react_default.a.createElement(
                'input',
                _extends({ id: id, ref: ref }, informed, rest)
              )
            )
          );
        },
        CustomIntro_Checkbox = function Checkbox(props) {
          var _useField2 = Object(src.w)(
              _objectSpread({ type: 'checkbox' }, props)
            ),
            render = _useField2.render,
            informed = _useField2.informed,
            userProps = _useField2.userProps,
            ref = _useField2.ref,
            label = userProps.label,
            id = userProps.id,
            rest = _objectWithoutProperties(userProps, _excluded3);
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement('label', { htmlFor: id }, label),
              react_default.a.createElement(
                'input',
                _extends({ id: id, ref: ref }, informed, rest)
              )
            )
          );
        },
        CustomIntro_ErrorInput = function ErrorInput(props) {
          var _useField3 = Object(src.w)(
              _objectSpread({ type: 'text' }, props)
            ),
            render = _useField3.render,
            informed = _useField3.informed,
            userProps = _useField3.userProps,
            fieldState = _useField3.fieldState,
            ref = _useField3.ref,
            label = userProps.label,
            id = userProps.id,
            rest = _objectWithoutProperties(userProps, _excluded4),
            showError = fieldState.showError,
            style = showError ? { border: 'solid 1px red' } : null;
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement('label', { htmlFor: id }, label),
              react_default.a.createElement(
                'input',
                _extends({ id: id, ref: ref }, informed, rest, { style: style })
              ),
              showError &&
                react_default.a.createElement(
                  'small',
                  { style: { color: 'red' } },
                  fieldState.error
                )
            )
          );
        },
        CustomIntro_Select = function Select(props) {
          var _useField4 = Object(src.w)(
              _objectSpread({ type: 'select' }, props)
            ),
            render = _useField4.render,
            informed = _useField4.informed,
            userProps = _useField4.userProps,
            ref = _useField4.ref,
            label = userProps.label,
            id = userProps.id,
            children = userProps.children,
            rest = _objectWithoutProperties(userProps, _excluded5);
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement('label', { htmlFor: id }, label),
              react_default.a.createElement(
                'select',
                _extends({ id: id, ref: ref }, informed, rest),
                children
              )
            )
          );
        },
        CustomIntro_onSubmit = function onSubmit(_ref2) {
          var values = _ref2.values;
          return console.log(values);
        },
        CustomIntro = Object(withDocs.a)(
          '# Creating Your Own Fields\n\nBut what if you dont want the out of the box stuff??\n\nNo problem, see example below!\n\n```jsx\nimport { useForm, useField, Relevant, FormState } from \'informed\';\n\n// Step 1. Build your form component ---------------------\n\nconst Form = ({ children, ...rest }) => {\n  const { formController, render, userProps } = useForm(rest);\n\n  return render(\n    <form noValidate {...userProps} onSubmit={formController.submitForm}>\n      {children}\n    </form>\n  );\n};\n\n// Step 2. Build your input components --------------------\n\nconst Input = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: \'text\',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} />\n    </>\n  );\n};\n\nconst Checkbox = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: \'checkbox\',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} />\n    </>\n  );\n};\n\nconst ErrorInput = props => {\n  const { render, informed, userProps, fieldState, ref } = useField({\n    type: \'text\',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  const { showError } = fieldState;\n  const style = showError ? { border: \'solid 1px red\' } : null;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} style={style} />\n      {showError && <small style={{ color: \'red\' }}>{fieldState.error}</small>}\n    </>\n  );\n};\n\nconst Select = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: \'select\',\n    ...props\n  });\n  const { label, id, children, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <select id={id} ref={ref} {...informed} {...rest}>\n        {children}\n      </select>\n    </>\n  );\n};\n\n// Step 3. Build your forms! ---------------------------\n\nconst onSubmit = ({ values }) => console.log(values);\n\nconst ExampleForm = () => (\n  <Form onSubmit={onSubmit}>\n    <Input name="name" label="Name" placeholder="Elon" />\n    <ErrorInput name="age" type="number" label="Age" required="Age Required" />\n    <Input name="phone" label="Phone" formatter="+1 (###)-###-####" />\n    <Select name="car" label="Car" initialValue="ms">\n      <option value="ms">Model S</option>\n      <option value="m3">Model 3</option>\n      <option value="mx">Model X</option>\n      <option value="my">Model Y</option>\n    </Select>\n    <Checkbox name="married" label="Married?" />\n    <Relevant when={({ formState }) => formState.values.married}>\n      <Input name="spouse" label="Spouse" />\n    </Relevant>\n    <button type="submit">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n\n\x3c!-- STORY --\x3e\n',
          function GettingStarted() {
            return react_default.a.createElement(
              CustomIntro_Form,
              { onSubmit: CustomIntro_onSubmit, autocomplete: 'off' },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: '1' } },
                  react_default.a.createElement(CustomIntro_Input, {
                    field: 'name',
                    label: 'Name',
                    placeholder: 'Elon'
                  }),
                  react_default.a.createElement(CustomIntro_ErrorInput, {
                    field: 'age',
                    type: 'number',
                    label: 'Age',
                    required: 'Age Required'
                  }),
                  react_default.a.createElement(CustomIntro_Input, {
                    field: 'phone',
                    label: 'Phone',
                    formatter: '+1 (###)-###-####'
                  }),
                  react_default.a.createElement(
                    CustomIntro_Select,
                    { field: 'car', label: 'Car', initialValue: 'ms' },
                    react_default.a.createElement(
                      'option',
                      { value: 'ms' },
                      'Model S'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'm3' },
                      'Model 3'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'mx' },
                      'Model X'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'my' },
                      'Model Y'
                    )
                  ),
                  react_default.a.createElement(CustomIntro_Checkbox, {
                    field: 'married',
                    label: 'Married: '
                  }),
                  react_default.a.createElement(
                    src.o,
                    {
                      when: function when(_ref3) {
                        return _ref3.formState.values.married;
                      }
                    },
                    react_default.a.createElement(CustomIntro_Input, {
                      field: 'spouse',
                      label: 'Spouse'
                    })
                  ),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: '1' } },
                  react_default.a.createElement(src.c, null)
                )
              )
            );
          }
        ),
        SchemaVsFormat_onSubmit = function onSubmit(_ref) {
          _ref.values;
          return console.log(data);
        },
        schema = {
          type: 'object',
          required: ['age'],
          properties: {
            name: {
              type: 'string',
              title: 'Name',
              'ui:props': { placeholder: 'Elon' }
            },
            age: {
              type: 'number',
              title: 'Age',
              errorMessage: { required: 'Age Required' }
            },
            phone: {
              type: 'string',
              title: 'Phone',
              'ui:props': { formatter: '+1 (###)-###-####' }
            },
            color: {
              type: 'string',
              title: 'Color',
              'ui:control': 'select',
              oneOf: [
                { const: 'md', title: 'Model S' },
                { const: 'm3', title: 'Model 3' },
                { const: 'mx', title: 'Model X' },
                { const: 'my', title: 'Model Y' }
              ],
              'ui:props': { initialValue: 'ms' }
            }
          }
        },
        SchemaVsFormat = Object(withDocs.a)(
          '## Schema Vs Format\n\nHere is the same form with Format Based ( JSX ), and with JSON Schema.\n\n\x3c!-- STORY --\x3e\n',
          function GettingStarted() {
            return react_default.a.createElement(
              'div',
              { style: { display: 'flex' } },
              react_default.a.createElement(
                'div',
                {
                  style: { flex: '1', marginRight: '1rem', maxWidth: '500px' }
                },
                react_default.a.createElement('h4', null, 'Format Based (JSX)'),
                react_default.a.createElement(
                  src.f,
                  { onSubmit: SchemaVsFormat_onSubmit, autocomplete: 'off' },
                  react_default.a.createElement(src.j, {
                    name: 'name',
                    label: 'Name',
                    placeholder: 'Elon'
                  }),
                  react_default.a.createElement(src.j, {
                    name: 'age',
                    type: 'number',
                    label: 'Age',
                    required: 'Age Required'
                  }),
                  react_default.a.createElement(src.j, {
                    name: 'phone',
                    label: 'Phone',
                    formatter: '+1 (###)-###-####'
                  }),
                  react_default.a.createElement(
                    src.r,
                    { name: 'car', label: 'Car', initialValue: 'ms' },
                    react_default.a.createElement(
                      'option',
                      { value: 'ms' },
                      'Model S'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'm3' },
                      'Model 3'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'mx' },
                      'Model X'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'my' },
                      'Model Y'
                    )
                  ),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'pre',
                  { style: { height: '1250px' } },
                  react_default.a.createElement(
                    'code',
                    { className: 'language-jsx' },
                    '\nimport { SchemaFields, Form, Input, Select } from \'informed\';\n\nconst onSubmit = ({values}) => console.log(values);\n\nconst ExampleForm = () => (\n  <Form onSubmit={onSubmit}>\n    <Input name="name" label="Name" placeholder="Elon" />\n    <Input name="age" type="number" label="Age" required="Age Required" />\n    <Input name="phone" label="Phone" formatter="+1 (###)-###-####" />\n    <Select name="car" label="Car" initialValue="ms">\n      <option value="ms">Model S</option>\n      <option value="m3">Model 3</option>\n      <option value="mx">Model X</option>\n      <option value="my">Model Y</option>\n    </Select>\n    <button type="submit">Submit</button>\n    <Debug />\n  </Form>\n);\n'
                  )
                )
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: '1', maxWidth: '500px' } },
                react_default.a.createElement('h4', null, 'Schema Based'),
                react_default.a.createElement(
                  src.f,
                  { schema: schema, onSubmit: SchemaVsFormat_onSubmit },
                  react_default.a.createElement(src.p, null),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'pre',
                  { style: { height: '1250px' } },
                  react_default.a.createElement(
                    'code',
                    { className: 'language-jsx' },
                    "\nimport { Form } from 'informed';\n\nconst onSubmit = ({values}) => console.log(values);\n\nconst schema = {\n  type: 'object',\n  required: ['age'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'Name',\n      'ui:props': {\n        placeholder: 'Elon'\n      },\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      errorMessage: {\n        required: 'Age Required'\n      }\n    },\n    phone: {\n      type: 'string',\n      title: 'Phone',\n      'ui:props': {\n        formatter: \"+1 (###)-###-####\"\n      },\n    },\n    color: {\n      type: 'string',\n      title: 'Color',\n      'ui:control': 'select',\n      oneOf: [\n        { const: 'md', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' },\n      ],\n      'ui:props': {\n        initialValue: \"ms\"\n      },\n    },\n  }\n};\n\nconst ExampleForm = () => {\n  return (\n    <Form schema={schema} onSubmit={onSubmit}>\n      <SchemaFields />\n      <button type=\"submit\">Submit</button>\n    </Form>\n  )\n}\n"
                  )
                )
              )
            );
          }
        ),
        stories_Intro_Intro = function Intro() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(Intro_Intro, null),
            react_default.a.createElement('hr', null),
            react_default.a.createElement(CustomIntro, null),
            react_default.a.createElement('hr', null),
            react_default.a.createElement(Intro_GettingStarted, null),
            react_default.a.createElement('hr', null),
            react_default.a.createElement(Intro_FormState, null),
            react_default.a.createElement('hr', null),
            react_default.a.createElement(Intro_FormApi, null),
            react_default.a.createElement('hr', null),
            react_default.a.createElement(SchemaVsFormat, null)
          );
        };
      stories_Intro_Intro.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Intro'
      };
      __webpack_exports__.a = stories_Intro_Intro;
      'undefined' != typeof STORYBOOK_REACT_CLASSES &&
        (STORYBOOK_REACT_CLASSES['stories/Intro/index.js'] = {
          name: 'Intro',
          docgenInfo: stories_Intro_Intro.__docgenInfo,
          path: 'stories/Intro/index.js'
        });
    },
    949: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        _excluded = ['label'];
      function _extends() {
        return (
          (_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          _extends.apply(this, arguments)
        );
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var validate = function validate(value) {
          return !value || value.length < 5
            ? 'Field must be at least five characters'
            : void 0;
        },
        ErrorTextField = react_default.a.memo(function(_ref) {
          var label = _ref.label,
            props = _objectWithoutProperties(_ref, _excluded),
            _useField = Object(src.w)(
              (function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = null != arguments[i] ? arguments[i] : {};
                  i % 2
                    ? ownKeys(Object(source), !0).forEach(function(key) {
                        _defineProperty(target, key, source[key]);
                      })
                    : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          target,
                          Object.getOwnPropertyDescriptors(source)
                        )
                      : ownKeys(Object(source)).forEach(function(key) {
                          Object.defineProperty(
                            target,
                            key,
                            Object.getOwnPropertyDescriptor(source, key)
                          );
                        });
                }
                return target;
              })({ type: 'text' }, props)
            ),
            render = _useField.render,
            informed = _useField.informed,
            fieldState = _useField.fieldState,
            ref = _useField.ref,
            showError = fieldState.showError;
          return render(
            react_default.a.createElement(
              'label',
              null,
              label,
              react_default.a.createElement(
                'input',
                _extends({}, informed, {
                  ref: ref,
                  style: showError ? { border: 'solid 1px red' } : null
                })
              ),
              showError
                ? react_default.a.createElement(
                    'small',
                    { style: { color: 'red' } },
                    fieldState.error
                  )
                : null
            )
          );
        }),
        Code = (Object(withDocs.a)(
          "# Custom Inputs\n\nSometimes the inputs `informed` provides are not good enough. So we decided to\nhelp you out with that! Informed also gives you access to a useField hook.\n\n## Custom Text Input\n\nLets say you like `informed`'s text input but you want to show an error and turn\nit red when there is an error. You could achieve this with the following code.\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, BasicText, useField } from 'informed';\n\nconst validate = value => {\n  return !value || value.length < 5\n    ? 'Field must be at least five characters'\n    : undefined;\n};\n\nexport const ErrorTextField = React.memo(({ label, ...props }) => {\n  const { render, informed, ref, fieldState } = useField({\n    type: 'text',\n    ...props\n  });\n  const { showError } = fieldState;\n  return render(\n    <label>\n      {label}\n      <input\n        ref={ref}\n        {...informed}\n        style={showError ? { border: 'solid 1px red' } : null}\n      />\n      {showError ? (\n        <small style={{ color: 'red' }}>{fieldState.error}</small>\n      ) : null}\n    </label>\n  );\n});\n\nconst Intro = () => (\n  <div>\n    <Form>\n      <ErrorTextField\n        field=\"name\"\n        label=\"First name:\"\n        validate={validate}\n        validateOnChange\n        validateOnBlur\n      />\n      <button type=\"submit\">Submit</button>\n      <Debug values errors />\n    </Form>\n  </div>\n);\n```\n\n\x3c!-- STORY --\x3e\n\n## I need an explanation!\n\nOk so what did we just do? We took advantage of two parts of `informed`.\n\n1. The `asField` HOC that turns a Component into an InformedField.\n2. The internal `BasicText` Component.\n\n`asField` is a HOC that will turn your Component into an `informed` Field Component by\ngiving your component access to the fieldApi and fieldState, and wrapping it in some magic!\nIf you wanted to you could hook up all the functions yourself, but for convenience we\nexpose our internal input definitions for you!\n",
          function Intro() {
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                null,
                react_default.a.createElement(ErrorTextField, {
                  field: 'name',
                  label: 'First name:',
                  validate: validate,
                  validateOnChange: !0,
                  validateOnBlur: !0
                }),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                ),
                react_default.a.createElement(Debug, { values: !0, errors: !0 })
              )
            );
          }
        ),
        __webpack_require__(12)),
        FromScratch_excluded = ['label'],
        _excluded2 = ['onChange', 'onBlur', 'initialValue', 'forwardedRef'];
      function FromScratch_extends() {
        return (
          (FromScratch_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          FromScratch_extends.apply(this, arguments)
        );
      }
      function FromScratch_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function FromScratch_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function FromScratch_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function FromScratch_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var FromScratch_validate = function validate(value) {
          return !value || value.length < 5
            ? 'Field must be at least five characters'
            : void 0;
        },
        ErrorText = react_default.a.memo(function(_ref) {
          _ref.label;
          var props = FromScratch_objectWithoutProperties(
              _ref,
              FromScratch_excluded
            ),
            _useField = Object(src.w)(
              (function FromScratch_objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = null != arguments[i] ? arguments[i] : {};
                  i % 2
                    ? FromScratch_ownKeys(Object(source), !0).forEach(function(
                        key
                      ) {
                        FromScratch_defineProperty(target, key, source[key]);
                      })
                    : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          target,
                          Object.getOwnPropertyDescriptors(source)
                        )
                      : FromScratch_ownKeys(Object(source)).forEach(function(
                          key
                        ) {
                          Object.defineProperty(
                            target,
                            key,
                            Object.getOwnPropertyDescriptor(source, key)
                          );
                        });
                }
                return target;
              })({ type: 'text' }, props)
            ),
            render = _useField.render,
            fieldState = _useField.fieldState,
            fieldApi = _useField.fieldApi,
            value = fieldState.value,
            error = fieldState.error,
            showError = fieldState.showError,
            setValue = fieldApi.setValue,
            setTouched = fieldApi.setTouched,
            _onChange = props.onChange,
            _onBlur = props.onBlur,
            forwardedRef = (props.initialValue, props.forwardedRef),
            rest = FromScratch_objectWithoutProperties(props, _excluded2);
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement(
                'input',
                FromScratch_extends({}, rest, {
                  ref: forwardedRef,
                  value: value || 0 === value ? value : '',
                  onChange: function onChange(e) {
                    setValue(e.target.value), _onChange && _onChange(e);
                  },
                  onBlur: function onBlur(e) {
                    setTouched(!0), _onBlur && _onBlur(e);
                  },
                  style: showError ? { border: 'solid 1px red' } : null
                })
              ),
              showError
                ? react_default.a.createElement(
                    'small',
                    { style: { color: 'red' } },
                    error
                  )
                : null
            )
          );
        }),
        UseField_excluded = (Object(withDocs.a)(
          "## So what if i do want to hook it all up myself?\n\n**Dont Fret!** Check out the example below:\n\n\x3c!-- STORY --\x3e\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, asField } from 'informed';\n\nconst validate = value => {\n  return !value || value.length < 5\n    ? 'Field must be at least five characters'\n    : undefined;\n};\n\nconst ErrorText = asField(({ fieldState, fieldApi, ...props }) => {\n  const { value, error, showError } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { onChange, onBlur, initialValue, forwardedRef, ...rest } = props;\n  return (\n    <React.Fragment>\n      <input\n        {...rest}\n        ref={forwardedRef}\n        value={!value && value !== 0 ? '' : value}\n        onChange={e => {\n          setValue(e.target.value);\n          if (onChange) {\n            onChange(e);\n          }\n        }}\n        onBlur={e => {\n          setTouched(true);\n          if (onBlur) {\n            onBlur(e);\n          }\n        }}\n        style={showError ? { border: 'solid 1px red' } : null}\n      />\n      {showError ? (\n        <small style={{ color: 'red' }}>{fieldState.error}</small>\n      ) : null}\n    </React.Fragment>\n  );\n});\n\n<Form id=\"custom-form\">\n  <label>\n    First name:\n    <ErrorText\n      field=\"name\"\n      validate={validate}\n      validateOnChange\n      validateOnBlur\n    />\n  </label>\n  <button type=\"submit\">Submit</button>\n</Form>;\n```\n",
          function FromScratch() {
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                { id: 'custom-form-2' },
                function(_ref2) {
                  _ref2.formApi;
                  var formState = _ref2.formState;
                  return react_default.a.createElement(
                    react_default.a.Fragment,
                    null,
                    react_default.a.createElement(
                      'label',
                      null,
                      'First name:',
                      react_default.a.createElement(ErrorText, {
                        field: 'name',
                        validate: FromScratch_validate,
                        validateOnChange: !0,
                        validateOnBlur: !0
                      })
                    ),
                    react_default.a.createElement(
                      'button',
                      { type: 'submit' },
                      'Submit'
                    ),
                    react_default.a.createElement('label', null, 'Values:'),
                    react_default.a.createElement(
                      Code.a,
                      { language: 'language-js' },
                      JSON.stringify(formState.values, null, 2)
                    ),
                    react_default.a.createElement('label', null, 'Errors:'),
                    react_default.a.createElement(
                      Code.a,
                      { language: 'language-js' },
                      JSON.stringify(formState.errors, null, 2)
                    )
                  );
                }
              )
            );
          }
        ),
        ['label', 'id']);
      function UseField_extends() {
        return (
          (UseField_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          UseField_extends.apply(this, arguments)
        );
      }
      function UseField_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function UseField_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var UseField_CustomInput = function CustomInput(props) {
          var _useField = Object(src.w)(props),
            fieldState = _useField.fieldState,
            fieldApi = _useField.fieldApi,
            render = _useField.render,
            ref = _useField.ref,
            userProps = _useField.userProps,
            value = fieldState.value,
            error = fieldState.error,
            showError = fieldState.showError,
            setValue = fieldApi.setValue,
            setTouched = fieldApi.setTouched,
            label = userProps.label,
            id = userProps.id,
            rest = UseField_objectWithoutProperties(
              userProps,
              UseField_excluded
            );
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              label
                ? react_default.a.createElement('label', { htmlFor: id }, label)
                : null,
              react_default.a.createElement(
                'input',
                UseField_extends({}, rest, {
                  id: id,
                  ref: ref,
                  value: value || 0 === value ? value : '',
                  onChange: function onChange(e) {
                    setValue(e.target.value, e);
                  },
                  onBlur: function onBlur(e) {
                    setTouched(!0, e);
                  },
                  style: showError ? { border: 'solid 1px red' } : null
                })
              ),
              showError
                ? react_default.a.createElement(
                    'small',
                    { style: { color: 'red' } },
                    error
                  )
                : null
            )
          );
        },
        UseField = Object(withDocs.a)(
          "# Custom Inputs\n\nSometimes the inputs `informed` provides are not good enough. So we decided to\nhelp you out with that! Informed also gives you access to an useField Hook.\n\n## Custom Text Input\n\nLets say you like `informed`'s text input but you want to show an error and turn\nit red when there is an error. You could achieve this with the following code.\n\n\x3c!-- STORY --\x3e\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, useField } from 'informed';\n\nconst CustomInput = props => {\n  const { fieldState, fieldApi, render, ref, userProps } = useField(props);\n\n  // The field state\n  const { value, error, showError } = fieldState;\n\n  // The field control\n  const { setValue, setTouched } = fieldApi;\n\n  // Everything else\n  const { label, id, ...rest } = userProps;\n\n  return render(\n    <>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <input\n        {...rest}\n        id={id}\n        ref={ref}\n        value={!value && value !== 0 ? '' : value}\n        onChange={e => {\n          setValue(e.target.value, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n        style={showError ? { border: 'solid 1px red' } : null}\n      />\n      {showError ? <small style={{ color: 'red' }}>{error}</small> : null}\n    </>\n  );\n};\n\nconst Example = () => (\n  <Form>\n    <ErrorText\n      field=\"name\"\n      label=\"First name:\"\n      validateOn=\"change\"\n      required\n      minLength={5}\n    />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n",
          function Example() {
            return react_default.a.createElement(
              src.f,
              { autocomplete: 'off' },
              react_default.a.createElement(UseField_CustomInput, {
                field: 'name',
                label: 'First name:',
                validateOn: 'change',
                required: !0,
                minLength: 5
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, null)
            );
          }
        ),
        Slider_excluded = ['min', 'max', 'step'];
      function Slider_extends() {
        return (
          (Slider_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          Slider_extends.apply(this, arguments)
        );
      }
      function Slider_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function Slider_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function Slider_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function Slider_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var Slider_Slider = function Slider(_ref) {
          var min = _ref.min,
            max = _ref.max,
            step = _ref.step,
            props = Slider_objectWithoutProperties(_ref, Slider_excluded),
            _useField = Object(src.w)(
              (function Slider_objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = null != arguments[i] ? arguments[i] : {};
                  i % 2
                    ? Slider_ownKeys(Object(source), !0).forEach(function(key) {
                        Slider_defineProperty(target, key, source[key]);
                      })
                    : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          target,
                          Object.getOwnPropertyDescriptors(source)
                        )
                      : Slider_ownKeys(Object(source)).forEach(function(key) {
                          Object.defineProperty(
                            target,
                            key,
                            Object.getOwnPropertyDescriptor(source, key)
                          );
                        });
                }
                return target;
              })({}, props)
            ),
            render = _useField.render,
            fieldState = _useField.fieldState,
            fieldApi = _useField.fieldApi,
            ref = _useField.ref,
            userProps = _useField.userProps,
            value = fieldState.value,
            setValue = fieldApi.setValue,
            setTouched = fieldApi.setTouched;
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement(
                'label',
                { htmlFor: userProps.id },
                'Range:'
              ),
              react_default.a.createElement(
                'input',
                Slider_extends({}, userProps, {
                  type: 'range',
                  min: min,
                  max: max,
                  step: step,
                  ref: ref,
                  value: value || '0',
                  onChange: function onChange(e) {
                    setValue(e.target.value, e);
                  },
                  onBlur: function onBlur(e) {
                    setTouched(!0, e);
                  }
                })
              )
            )
          );
        },
        CustomInputs_Slider = Object(withDocs.a)(
          '## Endless Possibilities\n\nBecause of this design, you can add your very own custom inputs! Below is an example of a slider!\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, useField, Debug } from \'informed\';\n\nconst Slider = ({ min, max, step, ...props }) => {\n  const { render, fieldState, fieldApi, ref, userProps } = useField({\n    ...props\n  });\n  const { value } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  return render(\n    <>\n      <label htmlFor={userProps.id}>Range:</label>\n      <input\n        {...userProps}\n        type="range"\n        min={min}\n        max={max}\n        step={step}\n        ref={ref}\n        value={value || \'0\'}\n        onChange={e => {\n          setValue(e.target.value, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n      />\n    </>\n  );\n};\n\nconst SliderExample = () => (\n  <Form>\n    <React.Fragment>\n      <Slider field="range" initialValue="69" min="0" max="100" />\n      <button type="submit">Submit</button>\n      <Debug values />\n    </React.Fragment>\n  </Form>\n);\n```\n',
          function SliderExample() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(
                react_default.a.Fragment,
                null,
                react_default.a.createElement(Slider_Slider, {
                  field: 'range',
                  initialValue: '69',
                  min: '0',
                  max: '100'
                }),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                ),
                react_default.a.createElement(src.c, { values: !0 })
              )
            );
          }
        ),
        UseFieldHooked_excluded = ['id', 'label'];
      function UseFieldHooked_extends() {
        return (
          (UseFieldHooked_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          UseFieldHooked_extends.apply(this, arguments)
        );
      }
      function UseFieldHooked_objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function UseFieldHooked_objectWithoutPropertiesLoose(
            source,
            excluded
          ) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      function UseFieldHooked_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function UseFieldHooked_defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      var UseFieldHooked_CustomInput = function CustomInput(props) {
          var _useField = Object(src.w)(
              (function UseFieldHooked_objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = null != arguments[i] ? arguments[i] : {};
                  i % 2
                    ? UseFieldHooked_ownKeys(Object(source), !0).forEach(
                        function(key) {
                          UseFieldHooked_defineProperty(
                            target,
                            key,
                            source[key]
                          );
                        }
                      )
                    : Object.getOwnPropertyDescriptors
                      ? Object.defineProperties(
                          target,
                          Object.getOwnPropertyDescriptors(source)
                        )
                      : UseFieldHooked_ownKeys(Object(source)).forEach(function(
                          key
                        ) {
                          Object.defineProperty(
                            target,
                            key,
                            Object.getOwnPropertyDescriptor(source, key)
                          );
                        });
                }
                return target;
              })({ type: 'text' }, props)
            ),
            render = _useField.render,
            informed = _useField.informed,
            fieldState = _useField.fieldState,
            userProps = _useField.userProps,
            ref = _useField.ref,
            id = userProps.id,
            label = userProps.label,
            rest = UseFieldHooked_objectWithoutProperties(
              userProps,
              UseFieldHooked_excluded
            ),
            error = fieldState.error,
            showError = fieldState.showError;
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement('label', { htmlFor: id }, label),
              react_default.a.createElement(
                'input',
                UseFieldHooked_extends({}, rest, informed, {
                  ref: ref,
                  style: showError ? { border: 'solid 1px red' } : null
                })
              ),
              showError &&
                react_default.a.createElement(
                  'small',
                  { style: { color: 'red' } },
                  error
                )
            )
          );
        },
        UseFieldHooked = Object(withDocs.a)(
          '## But it gets easier!\n\nHere we use the hook `useField`, BUT, instead of hooking it all up ourselves,\nwe just spread the informed object onto the input. Its important to note the use of fieldType,\nwhen you want to use the informed object, you need to tell the hook what type of input\nyour dealing with so it knows how to handle the dom or native event.\n\n\x3c!-- STORY --\x3e\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, useField } from \'informed\';\n\nconst CustomInput = props => {\n  const { render, informed, fieldState, userProps, ref } = useField({\n    type: \'text\',\n    ...props\n  });\n\n  const { id, label, ...rest } = userProps;\n  const { error, showError } = fieldState;\n\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input\n        {...rest}\n        {...informed}\n        ref={ref}\n        style={showError ? { border: \'solid 1px red\' } : null}\n      />\n      {showError && <small style={{ color: \'red\' }}>{error}</small>}\n    </>\n  );\n};\n\nconst Example = () => (\n  <Form>\n    <CustomInput\n      field="name"\n      label="First name:"\n      validateOn="change"\n      required\n      minLength={5}\n    />\n    <button type="submit">Submit</button>\n    <Debug values errors />\n  </Form>\n);\n```\n',
          function Example() {
            return react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(UseFieldHooked_CustomInput, {
                field: 'name',
                label: 'First name:',
                validateOn: 'change',
                required: !0,
                minLength: 5
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { values: !0, errors: !0 })
            );
          }
        ),
        CustomInputs_CreatingCustomInputs = function CreatingCustomInputs() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(UseField, null),
            react_default.a.createElement('br', null),
            react_default.a.createElement(UseFieldHooked, null),
            react_default.a.createElement('br', null),
            react_default.a.createElement(CustomInputs_Slider, null)
          );
        };
      CustomInputs_CreatingCustomInputs.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'CreatingCustomInputs'
      };
      __webpack_exports__.a = CustomInputs_CreatingCustomInputs;
      'undefined' != typeof STORYBOOK_REACT_CLASSES &&
        (STORYBOOK_REACT_CLASSES['stories/CustomInputs/index.js'] = {
          name: 'CreatingCustomInputs',
          docgenInfo: CustomInputs_CreatingCustomInputs.__docgenInfo,
          path: 'stories/CustomInputs/index.js'
        });
    },
    950: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        Intro = Object(withDocs.a)(
          "# Form Api\n\n**`Informed` gives you access to a `formApi`!**\n\nThis api allows you to grab and manipulate values using getters and setters. Below is a table that describes each function available within the formApi.\n\n| Function       | Example                                 | Description                                                                                                                                                                                                                                                                                                               |\n| -------------- | --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| submitForm     | `submitForm()`                          | This function will submit the form and trigger some lifecycle events. 1. It will set all the fields to touched. 2. It will call all validators. 3. It will call onSubmit if the form is valid. This function can be called manually however it is also called if you have a `<button type='submit'>` within the `<Form>`. |\n| setValue       | `setValue('greeting', 'Hello')`         | Function that takes two parameters, the first is the field name, and the second is the value you want to set it to.                                                                                                                                                                                                       |\n| getValue       | `getValue('greeting')`                  | Function that when given a field name will return its value.                                                                                                                                                                                                                                                              |\n| setTouched     | `setTouched('greeting', true)`          | Function that takes two parameters, the first is the field name, and the second is true or false.                                                                                                                                                                                                                         |\n| getTouched     | `getTouched('greeting')`                | Function that when given a field name will return whether or not its touched.                                                                                                                                                                                                                                             |\n| setError       | `setError('greeting', 'Error message')` | Function that takes two parameters, the first is the field name, and the second is the error message you want to set it to.                                                                                                                                                                                               |\n| getError       | `getError('greeting')`                  | Function that when given a field name will return its error.                                                                                                                                                                                                                                                              |\n| getState       | `getState()`                            | Function that returns the formState. Note this will only return the state as it existed when the function was called.                                                                                                                                                                                                     |\n| reset          | `reset()`                               | Function that will reset the form to its initial state.                                                                                                                                                                                                                                                                   |\n| setValues      | `setValues({ greeting: 'hello'})`       | Function that will set the fields values.                                                                                                                                                                                                                                                                                 |\n| setValues      | `setValues({ greeting: 'hello'})`       | Function that will set the fields values.                                                                                                                                                                                                                                                                                 |\n| setFormError   | `setFormError('There was an error!')`   | Function that will set the forms error manually.                                                                                                                                                                                                                                                                          |\n| validate       | `validate()`                            | Function that will trigger the forms validation manually.                                                                                                                                                                                                                                                                 |\n| setValues      | `setValues(values)`                     | Function that will set all form values ( clearing values you dont include )                                                                                                                                                                                                                                               |\n| setTheseValues | `setTheseValues(values)`                | Function that will set some form values                                                                                                                                                                                                                                                                                   |\n| fieldExists    | `fieldExists('fieldName')`              | Function that when given a field name will return whether or not it exists (i.e. the component is rendered).                                                                                                                                                                                                              |\n\n**\"Ok so informed gives us access to this formApi.. but how do i get my hands\non it??**\n\nThats a great question! There are many ways so lets take a look at a few!\n\nBelow is an example that shows you how to access the form api and use some of\nits functions.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Text } from 'informed';\n\n<Form id=\"form-api-form\">\n  {({ formApi }) => (\n    <div>\n      <Input name=\"name\" label=\"First name:\" />\n      <button type=\"button\" onClick={() => formApi.setValue('name', 'Joe')}>\n        Set Name to \"Joe\"\n      </button>\n      <button type=\"button\" onClick={() => formApi.setValue('name', 'Kevin')}>\n        Set Name to \"Kevin\"\n      </button>\n      <button type=\"button\" onClick={() => formApi.reset()}>\n        Reset\n      </button>\n      <button type=\"button\" onClick={() => formApi.setValue('foo', 'Bar')}>\n        Set Foo to \"Bar\"\n      </button>\n      <button type=\"submit\">Submit</button>\n    </div>\n  )}\n</Form>;\n```\n\n<br/>\n",
          function FormApi() {
            return react_default.a.createElement(
              src.f,
              { id: 'form-api-form' },
              function(_ref) {
                var formApi = _ref.formApi;
                return react_default.a.createElement(
                  'div',
                  null,
                  react_default.a.createElement(src.j, {
                    name: 'name',
                    label: 'First name:'
                  }),
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function onClick() {
                        return formApi.setValue('name', 'Joe');
                      }
                    },
                    'Set Name to "Joe"'
                  ),
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function onClick() {
                        return formApi.setValue('name', 'Kevin');
                      }
                    },
                    'Set Name to "Kevin"'
                  ),
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function onClick() {
                        return formApi.reset();
                      }
                    },
                    'Reset'
                  ),
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function onClick() {
                        return formApi.setValue('foo', 'Bar');
                      }
                    },
                    'Set Foo to "Bar"'
                  ),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  ),
                  react_default.a.createElement(src.c, null)
                );
              }
            );
          }
        ),
        RenderProp = __webpack_require__(415),
        UseFormApi_RandomSetterButton = function RandomSetterButton() {
          var formApi = Object(src.A)();
          return react_default.a.createElement(
            'button',
            {
              type: 'button',
              onClick: function onClick() {
                return formApi.setValue(
                  'name',
                  Math.floor(
                    Math.random() * Math.floor(Number.MAX_SAFE_INTEGER)
                  )
                );
              }
            },
            'Random'
          );
        },
        UseFormApi_SetValuesButton = function SetValuesButton() {
          var formApi = Object(src.A)();
          return react_default.a.createElement(
            'button',
            {
              type: 'button',
              onClick: function onClick() {
                return formApi.setValues({ age: 26, color: 'Green' });
              }
            },
            'All'
          );
        },
        UseFormApi_SetTheseValuesButton = function SetTheseValuesButton() {
          var formApi = Object(src.A)();
          return react_default.a.createElement(
            'button',
            {
              type: 'button',
              onClick: function onClick() {
                return formApi.setTheseValues({ age: 26, color: 'Green' });
              }
            },
            'Age & Color'
          );
        },
        UseFormApi = Object(withDocs.a)(
          'You can also get access to `Informed`s form api via `useFormApi`\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, useFormApi } from \'informed\';\n\nconst RandomSetterButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type="button"\n      onClick={() =>\n        formApi.setValue(\n          \'name\',\n          Math.floor(Math.random() * Math.floor(Number.MAX_SAFE_INTEGER))\n        )\n      }>\n      Random\n    </button>\n  );\n};\n\nconst SetValuesButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type="button"\n      onClick={() => formApi.setValues({ age: 26, color: \'Green\' })}>\n      All\n    </button>\n  );\n};\n\nconst SetTheseValuesButton = () => {\n  const formApi = useFormApi();\n  return (\n    <button\n      type="button"\n      onClick={() => formApi.setTheseValues({ age: 26, color: \'Green\' })}>\n      Age & Color\n    </button>\n  );\n};\n\nconst FormApi = () => (\n  <Form validateOn="change" showErrorIfError>\n    <Input name="name" label="First Name:" initialValue="Joe" required />\n    <Input name="age" label="First Name:" type="number" initialValue="27" />\n    <Input name="color" label="Favorite Color:" formatter="*-*-***" />\n    <RandomSetterButton />\n    <SetValuesButton />\n    <SetTheseValuesButton />\n    <button type="submit">Submit</button>\n  </Form>\n);\n```\n\n<br />\n',
          function FormApi() {
            return react_default.a.createElement(
              src.f,
              { validateOn: 'change', showErrorIfError: !0 },
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'First Name:',
                initialValue: 'Joe',
                required: !0
              }),
              react_default.a.createElement(src.j, {
                name: 'age',
                label: 'First Name:',
                type: 'number',
                initialValue: '27'
              }),
              react_default.a.createElement(src.j, {
                name: 'color',
                label: 'Favorite Color:',
                formatter: '*-*-***'
              }),
              react_default.a.createElement(
                UseFormApi_RandomSetterButton,
                null
              ),
              react_default.a.createElement(UseFormApi_SetValuesButton, null),
              react_default.a.createElement(
                UseFormApi_SetTheseValuesButton,
                null
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              )
            );
          }
        ),
        Api_ApiStuff = function ApiStuff() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(Intro, null),
            react_default.a.createElement(RenderProp.a, null),
            react_default.a.createElement(UseFormApi, null)
          );
        };
      Api_ApiStuff.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'ApiStuff'
      };
      __webpack_exports__.a = Api_ApiStuff;
      'undefined' != typeof STORYBOOK_REACT_CLASSES &&
        (STORYBOOK_REACT_CLASSES['stories/Form/Api/index.js'] = {
          name: 'ApiStuff',
          docgenInfo: Api_ApiStuff.__docgenInfo,
          path: 'stories/Form/Api/index.js'
        });
    },
    951: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          required: ['name', 'brother'],
          errorMessage: {
            _: 'name default error message',
            required: 'name is required',
            minLength: 'name must be longer',
            maxLength: 'name must be shorter',
            pattern: 'name match the pattern',
            maximum: 'must be smaller than that!'
          },
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input',
              minLength: 6,
              maxLength: 6,
              pattern: '^[0-9]{4}[a-zA-Z]{2}$'
            },
            brother: {
              type: 'object',
              required: ['name', 'age', 'height', 'sameError'],
              errorMessage: {
                _: 'brothers field default error message',
                required: 'brothers field is required',
                minLength: 'brothers field must be longer',
                maxLength: 'brothers field must be shorter',
                pattern: 'brother field match the pattern'
              },
              properties: {
                name: {
                  type: 'string',
                  title: 'Brother name',
                  'ui:control': 'input'
                },
                age: {
                  type: 'number',
                  title: 'Brother age',
                  'ui:control': 'input',
                  'ui:props': { type: 'number' },
                  minLength: 6,
                  maxLength: 6,
                  pattern: '^[0-9]{4}[a-zA-Z]{2}$',
                  errorMessage: {
                    _: 'brothers age default error message',
                    required: 'brothers age is required',
                    minLength: 'brothers age must be longer',
                    maxLength: 'brothers age must be shorter',
                    pattern: 'brother age match the pattern'
                  }
                },
                height: {
                  type: 'string',
                  title: 'Brother Height',
                  'ui:control': 'input',
                  'ui:props': { type: 'number' },
                  maximum: 8
                },
                sameError: {
                  type: 'string',
                  title: 'Same Error',
                  'ui:control': 'input',
                  minLength: 6,
                  maxLength: 6,
                  pattern: '^[0-9]{4}[a-zA-Z]{2}$',
                  errorMessage: 'Ahhh!!!!!!'
                }
              }
            }
          }
        },
        ValidationMessages_Schema = Object(withDocs.a)(
          "# Schema Error Messages\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields, Debug } from 'informed';\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'brother'],\n  errorMessage: {\n    _: 'name default error message',\n    required: 'name is required',\n    minLength: 'name must be longer',\n    maxLength: 'name must be shorter',\n    pattern: 'name match the pattern',\n    maximum: 'must be smaller than that!'\n  },\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input',\n      minLength: 6,\n      maxLength: 6,\n      pattern: '^[0-9]{4}[a-zA-Z]{2}$'\n    },\n    brother: {\n      type: 'object',\n      required: ['name', 'age', 'height', 'sameError'],\n      errorMessage: {\n        _: 'brothers field default error message',\n        required: 'brothers field is required',\n        minLength: 'brothers field must be longer',\n        maxLength: 'brothers field must be shorter',\n        pattern: 'brother field match the pattern'\n      },\n      properties: {\n        name: {\n          type: 'string',\n          title: 'Brother name',\n          'ui:control': 'input'\n        },\n        age: {\n          type: 'number',\n          title: 'Brother age',\n          'ui:control': 'input',\n          'ui:props': {\n            type: 'number'\n          },\n          minLength: 6,\n          maxLength: 6,\n          pattern: '^[0-9]{4}[a-zA-Z]{2}$',\n          errorMessage: {\n            _: 'brothers age default error message',\n            required: 'brothers age is required',\n            minLength: 'brothers age must be longer',\n            maxLength: 'brothers age must be shorter',\n            pattern: 'brother age match the pattern'\n          }\n        },\n        height: {\n          type: 'string',\n          title: 'Brother Height',\n          'ui:control': 'input',\n          'ui:props': {\n            type: 'number'\n          },\n          maximum: 8\n        },\n        sameError: {\n          type: 'string',\n          title: 'Same Error',\n          'ui:control': 'input',\n          minLength: 6,\n          maxLength: 6,\n          pattern: '^[0-9]{4}[a-zA-Z]{2}$',\n          errorMessage: 'Ahhh!!!!!!'\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    schema={schema}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug errors values />\n  </Form>\n);\n```\n",
          function Schema() {
            return react_default.a.createElement(
              src.f,
              {
                schema: schema,
                onSubmit: function onSubmit(_ref) {
                  var values = _ref.values;
                  return window.alert(JSON.stringify(values, null, 2));
                }
              },
              react_default.a.createElement(src.p, null),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, { errors: !0, values: !0 })
            );
          }
        );
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var Format_SimpleValidation = (function(_Component) {
          !(function _inherits(subClass, superClass) {
            if ('function' != typeof superClass && null !== superClass)
              throw new TypeError(
                'Super expression must either be null or a function'
              );
            (subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: { value: subClass, writable: !0, configurable: !0 }
              }
            )),
              superClass && _setPrototypeOf(subClass, superClass);
          })(SimpleValidation, _Component);
          var _super = _createSuper(SimpleValidation);
          function SimpleValidation() {
            return (
              _classCallCheck(this, SimpleValidation),
              _super.apply(this, arguments)
            );
          }
          return (
            (function _createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  _defineProperties(Constructor.prototype, protoProps),
                staticProps && _defineProperties(Constructor, staticProps),
                Constructor
              );
            })(SimpleValidation, [
              {
                key: 'render',
                value: function render() {
                  return react_default.a.createElement(
                    'div',
                    null,
                    react_default.a.createElement(
                      src.f,
                      {
                        errorMessage: {
                          required:
                            'This is field is required for your profile!'
                        },
                        onSubmit: function onSubmit(_ref) {
                          var values = _ref.values;
                          return window.alert(JSON.stringify(values, null, 2));
                        }
                      },
                      react_default.a.createElement(
                        'div',
                        { style: { display: 'flex', flexWrap: 'wrap' } },
                        react_default.a.createElement(
                          'div',
                          { style: { flex: 1, marginRight: '2rem' } },
                          react_default.a.createElement(src.j, {
                            name: 'first',
                            label: 'First name:',
                            required: !0,
                            errorMessage: 'There is a problem with this field!'
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'last',
                            label: 'Last name:',
                            required: !0,
                            errorMessage: { required: 'Last name is required!' }
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'favoriteColor',
                            label: 'Favorite color:',
                            required: !0
                          }),
                          react_default.a.createElement(
                            'button',
                            { type: 'submit' },
                            'Submit'
                          )
                        ),
                        react_default.a.createElement(
                          'div',
                          {
                            style: {
                              flex: 2,
                              minWidth: '300px',
                              marginLeft: '3rem'
                            }
                          },
                          react_default.a.createElement(src.c, {
                            values: !0,
                            errors: !0,
                            invalid: !0,
                            valid: !0
                          })
                        )
                      )
                    )
                  );
                }
              }
            ]),
            SimpleValidation
          );
        })(react.Component),
        Format = Object(withDocs.a)(
          '# Error Message\n\nMost of the time you want to display a customized error message for the built-in validation. Here\'s how to achieve that.\n\n**Note:** When you provide a string to the errorMessage prop, that will be used as the default for all built-in validation rules. The same can be achieved by adding a property with the key \\_ (underscore).\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport {\n  Form,\n  Input,\n  TextArea,\n  RadioGroup,\n  Radio,\n  Select,\n  Option,\n  Checkbox,\n  Scope,\n  Debug\n} from \'informed\';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return \'Field must be at least five characters\';\n};\n\nconst Example = () => (\n  <Form\n    errorMessage={{ required: \'This is field is required for your profile!\' }}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <Input\n      name="name"\n      label="First name:"\n      required\n      errorMessage="There is a problem with this field!"\n    />\n    <Input\n      name="last"\n      label="Last name:"\n      required\n      errorMessage={{ required: \'Last name is required!\' }}\n    />\n    <Input name="favoriteColor" label="Favorite color:" required />\n    <button type="submit">Submit</button>\n    <Debug values errors invalid valid />\n  </Form>\n);\n```\n',
          function() {
            return react_default.a.createElement(Format_SimpleValidation, null);
          }
        ),
        ValidationMessages_Intro = function Intro() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(Format, null),
            react_default.a.createElement(ValidationMessages_Schema, null)
          );
        };
      ValidationMessages_Intro.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Intro'
      };
      __webpack_exports__.a = ValidationMessages_Intro;
      'undefined' != typeof STORYBOOK_REACT_CLASSES &&
        (STORYBOOK_REACT_CLASSES[
          'stories/Validation/ValidationMessages/index.js'
        ] = {
          name: 'Intro',
          docgenInfo: ValidationMessages_Intro.__docgenInfo,
          path: 'stories/Validation/ValidationMessages/index.js'
        });
    },
    952: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = __webpack_require__(1),
        _excluded = ['children'],
        _excluded2 = ['label', 'id'],
        _excluded3 = ['label', 'id'],
        _excluded4 = ['label', 'id', 'children'];
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ownKeys(Object(source), !0).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function _extends() {
        return (
          (_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          _extends.apply(this, arguments)
        );
      }
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var GettingStarted_Form = function Form(_ref) {
          var children = _ref.children,
            rest = _objectWithoutProperties(_ref, _excluded),
            _useForm = Object(src.z)(rest),
            formController = _useForm.formController,
            render = _useForm.render,
            userProps = _useForm.userProps;
          return render(
            react_default.a.createElement(
              'form',
              _extends({ noValidate: !0 }, userProps, {
                onSubmit: formController.submitForm
              }),
              children
            )
          );
        },
        GettingStarted_Input = function Input(props) {
          var _useField = Object(src.w)(_objectSpread({ type: 'text' }, props)),
            render = _useField.render,
            informed = _useField.informed,
            userProps = _useField.userProps,
            fieldState = _useField.fieldState,
            ref = _useField.ref,
            label = userProps.label,
            id = userProps.id,
            rest = _objectWithoutProperties(userProps, _excluded2),
            showError = fieldState.showError,
            style = showError ? { border: 'solid 1px red' } : null;
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement('label', { htmlFor: id }, label),
              react_default.a.createElement(
                'input',
                _extends({ id: id, ref: ref }, informed, rest, { style: style })
              ),
              showError &&
                react_default.a.createElement(
                  'small',
                  { style: { color: 'red' } },
                  fieldState.error
                )
            )
          );
        },
        GettingStarted_Checkbox = function Checkbox(props) {
          var _useField2 = Object(src.w)(
              _objectSpread({ type: 'checkbox' }, props)
            ),
            render = _useField2.render,
            informed = _useField2.informed,
            userProps = _useField2.userProps,
            ref = _useField2.ref,
            label = userProps.label,
            id = userProps.id,
            rest = _objectWithoutProperties(userProps, _excluded3);
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement('label', { htmlFor: id }, label),
              react_default.a.createElement(
                'input',
                _extends({ id: id, ref: ref }, informed, rest)
              )
            )
          );
        },
        GettingStarted_Select = function Select(props) {
          var _useField3 = Object(src.w)(
              _objectSpread({ type: 'select' }, props)
            ),
            render = _useField3.render,
            informed = _useField3.informed,
            userProps = _useField3.userProps,
            ref = _useField3.ref,
            label = userProps.label,
            id = userProps.id,
            children = userProps.children,
            rest = _objectWithoutProperties(userProps, _excluded4);
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement('label', { htmlFor: id }, label),
              react_default.a.createElement(
                'select',
                _extends({ id: id, ref: ref }, informed, rest),
                children
              )
            )
          );
        },
        onSubmit = function onSubmit(_ref2) {
          var values = _ref2.values;
          return console.log(values);
        },
        TLDR_GettingStarted = Object(withDocs.a)(
          '# TLDR\n\n[GitHub](https://github.com/joepuzzo/informed)\n\n[![npmversion](https://img.shields.io/npm/v/informed.svg)](https://www.npmjs.com/package/informed)\n[![Discord](https://img.shields.io/discord/676066734746370058)](https://discord.gg/zpF5wA)\n[![Build Status](https://travis-ci.org/joepuzzo/informed.svg?branch=master)](https://travis-ci.org/joepuzzo/informed)\n[![Coverage Status](https://coveralls.io/repos/github/joepuzzo/informed/badge.svg?branch=master)](https://coveralls.io/github/joepuzzo/informed?branch=master)\n[![Minzipped-Size](https://badgen.net/bundlephobia/minzip/informed)](https://bundlephobia.com/result?p=informed)\n\n##### Install\n\n```\nnpm install --save informed\n```\n\n```jsx\nimport { useForm, useField, Relevant, Debug } from \'informed\';\n\n// Step 1. Build your form component ---------------------\n\nconst Form = ({ children, ...rest }) => {\n  const { formController, render, userProps } = useForm(rest);\n\n  return render(\n    <form noValidate {...userProps} onSubmit={formController.submitForm}>\n      {children}\n    </form>\n  );\n};\n\n// Step 2. Build your input components --------------------\n\nconst Input = props => {\n  const { render, informed, userProps, fieldState, ref } = useField({\n    type: \'text\',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  const { showError } = fieldState;\n  const style = showError ? { border: \'solid 1px red\' } : null;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} style={style} />\n      {showError && <small style={{ color: \'red\' }}>{fieldState.error}</small>}\n    </>\n  );\n};\n\nconst Checkbox = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: \'checkbox\',\n    ...props\n  });\n  const { label, id, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} ref={ref} {...informed} {...rest} />\n    </>\n  );\n};\n\nconst Select = props => {\n  const { render, informed, userProps, ref } = useField({\n    type: \'select\',\n    ...props\n  });\n  const { label, id, children, ...rest } = userProps;\n  return render(\n    <>\n      <label htmlFor={id}>{label}</label>\n      <select id={id} ref={ref} {...informed} {...rest}>\n        {children}\n      </select>\n    </>\n  );\n};\n\n// Step 3. Build your forms! ---------------------------\n\nconst onSubmit = ({ values }) => console.log(values);\n\nconst ExampleForm = () => (\n  <Form onSubmit={onSubmit}>\n    <Input field="name" label="Name" placeholder="Elon" />\n    <Input field="age" type="number" label="Age" required="Age Required" />\n    <Input field="phone" label="Phone" formatter="+1 (###)-###-####" />\n    <Select field="car" label="Car" initialValue="ms">\n      <option value="ms">Model S</option>\n      <option value="m3">Model 3</option>\n      <option value="mx">Model X</option>\n      <option value="my">Model Y</option>\n    </Select>\n    <Checkbox field="married" label="Married?" />\n    <Relevant when={({ formState }) => formState.values.married}>\n      <Input field="spouse" label="Spouse" />\n    </Relevant>\n    <button type="submit">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n\n\x3c!-- STORY --\x3e\n',
          function GettingStarted() {
            return react_default.a.createElement(
              GettingStarted_Form,
              { onSubmit: onSubmit, autocomplete: 'off' },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: '1' } },
                  react_default.a.createElement(GettingStarted_Input, {
                    field: 'name',
                    label: 'Name',
                    placeholder: 'Elon'
                  }),
                  react_default.a.createElement(GettingStarted_Input, {
                    field: 'age',
                    type: 'number',
                    label: 'Age',
                    required: 'Age Required'
                  }),
                  react_default.a.createElement(GettingStarted_Input, {
                    field: 'phone',
                    label: 'Phone',
                    formatter: '+1 (###)-###-####'
                  }),
                  react_default.a.createElement(
                    GettingStarted_Select,
                    { field: 'car', label: 'Car', initialValue: 'ms' },
                    react_default.a.createElement(
                      'option',
                      { value: 'ms' },
                      'Model S'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'm3' },
                      'Model 3'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'mx' },
                      'Model X'
                    ),
                    react_default.a.createElement(
                      'option',
                      { value: 'my' },
                      'Model Y'
                    )
                  ),
                  react_default.a.createElement(GettingStarted_Checkbox, {
                    field: 'married',
                    label: 'Married? '
                  }),
                  react_default.a.createElement(
                    src.o,
                    {
                      when: function when(_ref3) {
                        return _ref3.formState.values.married;
                      }
                    },
                    react_default.a.createElement(GettingStarted_Input, {
                      field: 'spouse',
                      label: 'Spouse'
                    })
                  ),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: '1' } },
                  react_default.a.createElement(src.c, null)
                )
              )
            );
          }
        ),
        TLDR_TLDR = function TLDR() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(TLDR_GettingStarted, null)
          );
        };
      TLDR_TLDR.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'TLDR'
      };
      __webpack_exports__.a = TLDR_TLDR;
      'undefined' != typeof STORYBOOK_REACT_CLASSES &&
        (STORYBOOK_REACT_CLASSES['stories/TLDR/index.js'] = {
          name: 'TLDR',
          docgenInfo: TLDR_TLDR.__docgenInfo,
          path: 'stories/TLDR/index.js'
        });
    },
    953: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = __webpack_require__(1),
        WithField_ScopedFieldState = function ScopedFieldState(_ref) {
          var name = _ref.name,
            value = Object(src.y)(name).value;
          return react_default.a.createElement(
            'pre',
            null,
            react_default.a.createElement(
              'code',
              null,
              JSON.stringify(value, null, 2)
            )
          );
        },
        WithField_UnScopedFieldState = function UnScopedFieldState(_ref2) {
          var name = _ref2.name,
            value = Object(src.y)(name, !1).value;
          return react_default.a.createElement(
            'pre',
            null,
            react_default.a.createElement(
              'code',
              null,
              JSON.stringify(value, null, 2)
            )
          );
        },
        Scope_WithField = Object(withDocs.a)(
          '# Scope\n\nScope is a very useful tool for simplifying your code but you can easily make\nmistakes when using it.\n\n## useFieldState:\n\nBelow is an example where you could misuse the `useFieldState`.\n\nType into the field and Note how the text below to `color:` gets updated while nothing changes next to `favorite.color:`\n\n\x3c!-- STORY --\x3e\n\nWhy? Lets take a look at the code below:\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, Input, Scope, useFieldState } from \'informed\';\n\nconst ScopedFieldState = ({ name }) => {\n  const { value } = useFieldState(name);\n  return (\n    <pre>\n      <code>{JSON.stringify(value, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst UnScopedFieldState = ({ name }) => {\n  const { value } = useFieldState(name, false); // << Note the false here\n  return (\n    <pre>\n      <code>{JSON.stringify(value, null, 2)}</code>\n    </pre>\n  );\n};\n\nconst ScopeGotcha = () => (\n  <div>\n    <Form>\n      <Scope scope="favorite">\n        <Input field="color" />\n        <h5>favorite.color: ( scoped )</h5>\n        <ScopedFieldState name="favorite.color" />\n        <h5>color: ( scoped )</h5>\n        <ScopedFieldState name="color" />\n        <h5>favorite.color: ( un-scoped )</h5>\n        <UnScopedFieldState name="favorite.color" />\n      </Scope>\n      <h5>Form State</h5>\n      <Debug values />\n    </Form>\n  </div>\n);\n```\n\n<br/>\n\nRemember that the result of the `useField` hooks is affected just like `Input` fields. In other words when you write:\n\n```jsx\n<Input name="color" />\n```\n\n<br/>\n\nWithin A:\n\n```jsx\n<Scope scope="favorite" />\n```\n\n<br/>\n\nThe result in the values is `favorite.color`. Putting a component that uses `useFieldState` or `useFieldApi` is affected in the exact same way!\n\nTo opt out of this. Pass `false` as a second parameter.\n',
          function ScopeGotcha() {
            return react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(
                src.f,
                null,
                react_default.a.createElement(
                  src.q,
                  { scope: 'favorite' },
                  react_default.a.createElement(src.j, { field: 'color' }),
                  react_default.a.createElement(
                    'h5',
                    null,
                    'favorite.color: ( scoped )'
                  ),
                  react_default.a.createElement(WithField_ScopedFieldState, {
                    name: 'favorite.color'
                  }),
                  react_default.a.createElement(
                    'h5',
                    null,
                    'color: ( scoped )'
                  ),
                  react_default.a.createElement(WithField_ScopedFieldState, {
                    name: 'color'
                  }),
                  react_default.a.createElement(
                    'h5',
                    null,
                    'favorite.color: ( un-scoped )'
                  ),
                  react_default.a.createElement(WithField_UnScopedFieldState, {
                    name: 'favorite.color'
                  })
                ),
                react_default.a.createElement('h5', null, 'Form State'),
                react_default.a.createElement(src.c, { values: !0 })
              )
            );
          }
        );
      __webpack_exports__.a = function() {
        return react_default.a.createElement(Scope_WithField, null);
      };
    },
    954: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var withDocs = __webpack_require__(2);
      __webpack_exports__.a = Object(withDocs.a)(
        '## 4.0.7 (December 10th, 2021)\n\n### Fixed\n\n- Issue with relevance subscription when no relevance function\n\n## 4.0.6 (December 9th, 2021)\n\n### Fixed\n\n- Missing functions setValues and setTheseValues\n\n## 4.0.5 (December 9th, 2021)\n\n### Fixed\n\n- Missing types for validate and validateField on FormApi\n\n## 4.0.4 (December 9th, 2021)\n\n### Fixed\n\n- Issue where we forgot to expose form validate\n- Missing utils types\n\n## Added\n\n- useScope and useScoper to exports\n\n## 4.0.3 (December 7th, 2021)\n\n### Fixed\n\n- Issue with forms valid and invalid when relevance changes\n\n## 4.0.2 (December 7th, 2021)\n\n### Fixed\n\n- Issue with schema path util `inverter[12].air_filter_ok` would not work\n\n## 4.0.1 (December 7th, 2021)\n\n### Fixed\n\n- Issue with initializing when becoming relevant\n\n## 4.0 !!!!\n\n### Breaking changes\n\n#### onSubmit signature\n\nOld\n\n```\nconst onSubmit = values => console.log( values );\n```\n\nNew\n\n```\nconst onSubmit = formState => console.log( formState.values );\n```\n\n#### informed:props ( schema )\n\n```\ninformed:props is now ui:props when using schema based forms\n```\n\n#### `asField` has been removed\n\nInstead of doing this\n\n```js\nconst CustomField = asField({ fieldState, fieldApi }) => {}\n```\n\nDo this\n\n```js\nconst CustomField = props => {\n  const { fieldState, fieldApi } = useField(props);\n};\n```\n\n#### Relevance\n\nThe when function for relevance now has this signature\n\n```\nwhen={({formState, formApi, scope}) => {...} }\n```\n\n#### yupSchema\n\n```\nvalidationSchema ---\x3e is now yupSchema\n```\n\n#### Array Fields\n\n##### Renamed `field` to `name`\n\n```js\n<ArrayField.Items>\n  {({ remove, field }) => (\n    <>\n      <Input name={field} />\n      <button type="button" onClick={remove}>\n        Remove\n      </button>\n    </>\n  )}\n</ArrayField.Items>\n```\n\nIs Now\n\n```js\n<ArrayField.Items>\n  {({ remove, name }) => (\n    <>\n      <Input name={name} />\n      <button type="button" onClick={remove}>\n        Remove\n      </button>\n    </>\n  )}\n</ArrayField.Items>\n```\n\n##### No more array field path prefixing\n\nOld:\n\n```js\n<ArrayField.Items>\n  {({ remove, field }) => (\n    <>\n      <Input name={`${field}.name`} />\n      <Input name={`${field}.age`} />\n      <button type="button" onClick={remove}>\n        Remove\n      </button>\n    </>\n  )}\n</ArrayField.Items>\n```\n\nNew:\n\n```js\n<ArrayField.Items>\n  {({ remove }) => (\n    <>\n      <Input name="name" />\n      <Input name="age" />\n      <button type="button" onClick={remove}>\n        Remove\n      </button>\n    </>\n  )}\n</ArrayField.Items>\n```\n\n##### No more values in array field render prop\n\nOld:\n\n```js\n// Some component you need to use state of array field item\nconst FieldState = ({ values }) => {\n  return (\n    <pre>\n      <code>{JSON.stringify(values, null, 2)}</code>\n    </pre>\n  );\n};\n\n<ArrayField.Items>\n  {({ remove, values }) => (\n    <>\n      <Input name="name" />\n      <Input name="age" />\n      <FieldState values={values} />\n      <button type="button" onClick={remove}>\n        Remove\n      </button>\n    </>\n  )}\n</ArrayField.Items>;\n```\n\nNew:\n\n```js\n// Some component you need to use state of array field item\nconst FieldState = () => {\n  const { values } = useArrayFieldItemState();\n  return (\n    <pre>\n      <code>{JSON.stringify(values, null, 2)}</code>\n    </pre>\n  );\n};\n\n<ArrayField.Items>\n  {({ remove }) => (\n    <>\n      <Input name="name" />\n      <Input name="age" />\n      <FieldState />\n      <button type="button" onClick={remove}>\n        Remove\n      </button>\n    </>\n  )}\n</ArrayField.Items>;\n```\n\n#### Debugging with `<FormState />`\n\nOld:\n\n```jsx\n<FormState values errors />\n```\n\nNew:\n\n```jsx\n<Debug values errors />\n```\n\n#### Custom Inputs\n\nMinor changes to custom inputs\n\nNew:\n\n```jsx\nconst CustomInput = props => {\n  const { fieldState, fieldApi, render, ref, userProps } = useField(props);\n\n  // The field state\n  const { value, error, showError } = fieldState;\n\n  // The field control\n  const { setValue, setTouched } = fieldApi;\n\n  // Everything else\n  const { label, id, ...rest } = userProps;\n\n  return render(\n    <>\n      {label ? <label htmlFor={id}>{label}</label> : null}\n      <input\n        {...rest}\n        id={id}\n        ref={ref}\n        value={!value && value !== 0 ? \'\' : value}\n        onChange={e => {\n          setValue(e.target.value, e);\n        }}\n        onBlur={e => {\n          setTouched(true, e);\n        }}\n        style={showError ? { border: \'solid 1px red\' } : null}\n      />\n      {showError ? <small style={{ color: \'red\' }}>{error}</small> : null}\n    </>\n  );\n};\n```\n\n#### Validation\n\nValidation is now controlled via validateOn="validationString"\n\nBy default fields will only validate on blur. To get\nmore granular validation, simply pass in `validateOn` props.\n\nSee table below for mapping:\n\n<br />\n\n| validateOn    | derived       | change       | blur         | submit       | default |\n| ------------- | ------------- | ------------ | ------------ | ------------ | ------- |\n| change        | change-change | sync + async | sync + async | sync + async |         |\n| blur          | blur-blur     | x            | sync + async | sync + async | x       |\n| change-blur   | change-blur   | sync         | sync + async | sync + async |         |\n| change-submit | change-submit | sync         | sync         | sync + async |         |\n| blur-submit   | submit-submit | x            | sync         | sync + async |         |\n| submit        | submit-submit | x            | x            | sync + async |         |\n\n<br />\n\nValidation is controlled via the `validateOn` prop, but in order to control when it shows,\nuse the `showErrorIfError` and `showErrorIfDirty` props. **This is because sometimes you may want the form to be invalid but not show the error to the user yet ( default is `showErrorIfTouched` )**\n\n| prop               | description                                                                                                  | default |\n| ------------------ | ------------------------------------------------------------------------------------------------------------ | ------- |\n| showErrorIfError   | will set `showError` for that field to true whenever there is an error (typically used with validateOnMount) |         |\n| showErrorIfTouched | will set `showError` for that field to true whenever there is an error and the field is touched              | x       |\n| showErrorIfDirty   | will set `showError` for that field to true whenever there is an error and the field is dirty                |         |\n\n<br />\n\nFinally we have a use case for validating right away ( on mount )\n\n| prop            | description                     | default |\n| --------------- | ------------------------------- | ------- |\n| validateOnMount | will trigger validation onMount | false   |\n\n<br />\n<br />\n\n---\n\n<br />\n\n## 3.34.0 (June 22, 2021)\n\n### Added\n\n- ability to control when async validation occurs with props\n\n## 3.33.0 (May 21, 2021)\n\n### Added\n\n- createIntlNumberFormatter\n\n## 3.32.3 (May 21, 2021)\n\n### Fixed\n\n- Issue with useFieldState, now returns empty object by default\n\n## 3.32.2 (May 21, 2021)\n\n### Fixed\n\n- Issue with mounting useFieldStates\n\n## 3.32.1 (May 21, 2021)\n\n### Fixed\n\n- Issue with layoutEffect in SSR\n\n## 3.32.0 (May 19, 2021)\n\n### Added\n\n- Ability to walk down a multistep with step selection.\n\n## 3.31.0 (April 26, 2021)\n\n### Added\n\n- formatter functions `formatter = [()=>{}, ()=>{}]`\n\n## 3.30.3 (April 2, 2021)\n\n### Added\n\n- memoized render back because I never should have removed it\n\n## 3.30.2 (March 15, 2021)\n\n### Refactored\n\n- To no longer use event emitter.\n\n## 3.30.1 (March 5, 2021)\n\n### Fixed\n\n- Issue where keep state in scope was not working.\n\n## 3.30.0 (March 2, 2021)\n\n### Added\n\n- Pristine and Dirty to formFieldState\n\n## 3.29.4 (February 24, 2021)\n\n### Updated\n\n- Peer deps to support react v 17\n\n## 3.29.3 (February 5, 2021)\n\n### Fixed\n\n- Issue where ObjectMap `has` would reference wrong get funciton fixes #327\n\n## 3.29.2 (February 4, 2021)\n\n### Fixed\n\n- Issue where carrot pos would be in the wrong place when formatting\n\n### Updated\n\n- `useField` hook to use the `useCarrotPosition` hook ( removed duplicate code )\n\n## 3.29.1 (February 4, 2021)\n\n### Added\n\n- Ability to call `setValue` function for custom formattedObject Inputs\n\n## 3.29.0 (February 2, 2021)\n\n### Added\n\n- Ability to pass `initialize` function for custom initialization of the initial value\n\n## 3.28.0 (February 2, 2021)\n\n### Exposed\n\n- Utils functions that can be used by end users\n\n## 3.27.0 (December 18, 2020)\n\n### Fixed\n\n- bug with update function in form controller where it would pull instead of delete on swap\n\n## 3.26.0 (December 17, 2020)\n\n### Added\n\n- `swap` to array fields\n\n### Rafactored\n\n- Internal state management\n\n## 3.25.0 (December 8, 2020)\n\n### Added\n\n- `onReset` to form props\n\n## 3.24.4 (December 5, 2020)\n\n### Updated\n\n- README and needed to get it to npm ... again again\n\n## 3.24.3 (December 5, 2020)\n\n### Updated\n\n- README and needed to get it to npm ... again\n\n## 3.24.2 (November 24, 2020)\n\n### Updated\n\n- README and needed to get it to npm\n\n## 3.24.1 (November 23, 2020)\n\n### Fixed\n\n- Type issue ( missing allow empty string from props def )\n\n## 3.24.0 (November 19, 2020)\n\n### Fixed\n\n- Issue where Id was not getting passed to default select field\n\n## 3.23.0 (November 18, 2020)\n\n### Removed\n\n- LODASH!!!!! SEE YA LATER NEVER\n\n## 3.22.0 (November 17, 2020)\n\n### Added\n\n- Ability to pass relevant to array fields!!!\n\n## 3.21.2 (November 14, 2020)\n\n### Fixed\n\n- Bug with field level relevant\n\n### Updated\n\n- Form to always evaluate relevance, and not force the user to pass notify.\n\n## 3.21.1 (November 12, 2020)\n\n### Fixed\n\n- Isssue where state would not update after submit\n\n## 3.21.0 (November 12, 2020)\n\n### Added\n\n- Ability to add async validation functions to inputs\n\n## 3.20.0 (November 11, 2020)\n\n### Added\n\n- Ability to not pass keep state to multistep fields, and also added docs for conditional relevant nested array fields\n\n## 3.19.0 (November 10, 2020)\n\n### Added\n\n- Ability to hide or show fields based on relevant, and notify relevant fields\n\n## 3.18.3 (November 10, 2020)\n\n### Fixed\n\n- bug with resetting array field items\n\n## 3.18.2 (November 9, 2020)\n\n### Fixed\n\n- bug with duplicate fields\n\n## 3.18.1 (November 9, 2020)\n\n### Fixed\n\n- bug with keep state registering phantom fields\n\n## 3.18.0 (November 5, 2020)\n\n### Added\n\n- ability to create custom schema fields\n\n## 3.17.1 (November 3, 2020)\n\n### Fixed\n\n- useField was not adding id to label by default\n\n## 3.17.0 (November 3, 2020)\n\n### Added\n\n- Required attribute to input and automatic type generation for useField hook\n\n## 3.16.1 (November 2, 2020)\n\n### Fixed\n\n- Issue where informed props were not passed down to array fields in schema\n\n## 3.16.0 (November 1, 2020)\n\n### Added\n\n- Ability to have conditional schemas!!!!\n\n## 3.15.0 (October 28, 2020)\n\n### Added\n\n- Ability to add array fields in schema!!!!\n\n## 3.14.0 (October 27, 2020)\n\n### Added\n\n- Formatter and Parser !!!!!\n\n## 3.13.2 (October 27, 2020)\n\n### Fixed\n\n- Issue with strict mode double registering\n\n## 3.13.1 (October 23, 2020)\n\n### Fixed\n\n- Bug where inforemd would crash if schema was missing field that was in JSX ( returns null )\n\n## 3.13.0 (October 23, 2020)\n\n### Added\n\n- Ability to render schema fields in specific paces within JSX!!\n\n## 3.12.0 (October 22, 2020)\n\n### Added\n\n- Added AJV Schema shit!!!\n\n## 3.11.0 (October 21, 2020)\n\n### Added\n\n- Schema shit\n\n## 3.10.1 (October 18, 2020)\n\n### Fixed\n\n- Array fields because I stupidly broke them\n\n#### Added\n\n- Tests for multistep fields\n- Better multistep form syntax\n- Better multistep docs\n\n## 3.10.0 (September 29, 2020)\n\n### Updated\n\n- internals to modify state direct to improve performance!\n\n## 3.9.0 (June 15, 2020)\n\n### Updated\n\n- useArray field to expose a reset that resets to initial values\n\n## 3.8.1 (May 11, 2020)\n\n### Fixed\n\n- Issue with back and next types for multistep fields\n\n## 3.8.0 (May 4, 2020)\n\n### Added\n\n- Array field Api control for ArrayFieldItems\n\n## 3.7.0 (May 4, 2020)\n\n### Refactored\n\n- To use field ids instead of names\n\n### Added\n\n- `<Relevant>` component\n\n## 3.6.1 (March 2, 2020)\n\n### Updated\n\n- Type file to include preventEnter on form props\n\n## 3.6.0 (March 1, 2020)\n\n### Added\n\n- Ability to pass formController to useField hook\n\n## 3.5.2 (February 28, 2020)\n\n### Fixed\n\n- [Issue](https://github.com/joepuzzo/informed/issues/275) where new version of react would throw warnings due to bad code\n\n## 3.5.1 (February 27, 2020)\n\n### Fixed\n\n- [Issue](https://github.com/joepuzzo/informed/issues/272) where dynamic nested array fields with keep state kept too much state :)\n\n## 3.5.0 (February 25, 2020)\n\n### Added\n\n- New multistep abilities via setCurrent in `formApi` and `Current` in `formState`. See compex multistep form in docs\n\n## 3.4.0 (February 22, 2020)\n\n### Added\n\n- Ability to spread `informed` object on inputs via the `useField` hook\n\n## 3.3.5 (February 22, 2020)\n\n### Updated\n\n- Readme to show useForm example\n\n## 3.3.4 (February 20, 2020)\n\n### Added\n\n- FormState component to assist when debugging!\n\n## 3.3.3 (February 18, 2020)\n\n### Added\n\n- Types for multisetp forms\n\n## 3.3.2 (February 16, 2020)\n\n### Added\n\n- Ability to use cursor position in mask function\n\n## 3.3.1 (February 16, 2020)\n\n### Updated\n\n- Intro examples to inculde on submit example\n\n## 3.3.0 (February 10, 2020)\n\n### Added\n\n- Field level Yup support\n\n## 3.2.1 (February 9, 2020)\n\n### Fixed\n\n- Typo in yup docs and readme\n\n## 3.2.0 (February 9, 2020)\n\n### Added\n\n- Yup support\n\n## 3.1.2 (February 9, 2020)\n\n### Updated\n\n- docs and readme to link to dicord channel\n\n## 3.1.1 (February 8, 2020)\n\n### Added\n\n- apiRef so you can just pass a ref to the form\n\n## 3.1.0 (February 5, 2020)\n\n### Added\n\n- Step functionality to support multistep forms\n\n## 3.0.2 (January 24, 2020)\n\n### Fixed\n\n- Issue https://github.com/joepuzzo/informed/issues/267\n\n## 3.0.1 (January 24, 2020)\n\n### Fixed\n\n- README ( I wish there was a way on npm to update readme without publishing version )\n\n## 3.0.0 (January 24, 2020)\n\n### Fixed\n\n- Issue with array field validation https://github.com/joepuzzo/informed/issues/259\n- Issue where informed would throw errors when fields were hidden but referenced\n\n### Added\n\n- Ability to ( in the near future ) add validations to scopes ( Enabled because of code refacotor... will add soon :)\n\n### Changed\n\n- The internals to no longer keep track of giant state object but instead generate it on demand\n\n### Removed\n\n- A bunch of useless code :)\n\n#### Cleaned up\n\n- Large portion of the code .. Mostly the formController!\n\n## 2.11.17 (January 21, 2020)\n\n## Update\n\n- useField to trigger validation when validation related props change\n\n## 2.11.16 (November 18, 2019)\n\n## Fixed\n\n- issue with array field where validation would fail\n\n## 2.11.15 (November 6, 2019)\n\n## Fixed\n\n- issue with array field where removing multiple fields did not remove the data from state\n\n## 2.11.14 (November 5, 2019)\n\n## Removed\n\n- removable prop to inputs because it was a bad idea... now it supports removal nativley\n\n## 2.11.13 (November 4, 2019)\n\n## Added\n\n- removable prop to inputs ( adds support for pairing keep state and array fields such that remove button actually removes field )\n\n## 2.11.12 (November 1, 2019)\n\n## Fixed\n\n- issue with keep state on array fields\n\n## 2.11.11 (November 1, 2019)\n\n## Added\n\n- comp name to useField hook\n\n## 2.11.10 (October 21, 2019)\n\n## Added\n\n- missing setFormError prop to FormApi interface\n\n## 2.11.9 (September 10, 2019)\n\n## Added\n\n- keepState to types\n\n## 2.11.8 (July 16, 2019)\n\n## Adds\n\n- allowEmptyStrings form level prop to types\n\n## 2.11.7 (July 8, 2019)\n\n## Fixes\n\n- issue 227 where allowEmptyStrings form level prop did not work\n\n## 2.11.6 (July 2, 2019)\n\n## Fixes\n\n- issue 219 where array fields would not work with scope\n\n## 2.11.5 (July 2, 2019)\n\n## Fixes\n\n- issue 225 where validation will occur on mount when there are initial values\n\n## 2.11.4 (July 1, 2019)\n\n## Fixes\n\n- issue 215 where selects dont work in Edge becase .. you know.. Microsoft\n\n## 2.11.3 (July 1, 2019)\n\n## Fixes\n\n- warning with useLayoutEffect when using SSR\n\n## 2.11.2 (June 27, 2019)\n\n## Updated\n\n- README file to include minzipped badge\n\n## 2.11.1 (June 18, 2019)\n\n## Fixed\n\n- Issue where initial values changing on multiselects caused looping .. oops\n\n## 2.11.0 (June 14, 2019)\n\n## Updated\n\n- useForm to return user props and a render method\n- Form provider to no longer render a `<form></form>` IT NEVER SHOULD HAVE.\n\n## 2.10.2 (June 13, 2019)\n\n## Fixed\n\n- Issue where initial values did not change when form was reset\n\n## 2.10.1 (June 11, 2019)\n\n## Fixed\n\n- Issue where array level validation would not trigger for complex nested fields within array field\n\n## Added\n\n- length as a second parameter to arrayFields validate function\n\n## 2.10.0 (June 7, 2019)\n\n## Added\n\n- ability to pass validation function to an array field\n- arrayFields are now treaded as "shadow" fields\n\n## 2.9.0 (June 6, 2019)\n\n## Added\n\n- useArrayField hook\n\n## 2.8.2 (June 5, 2019)\n\n## Added\n\n- ability to change out form options such as validateFields\n\n## 2.8.1 (June 5, 2019)\n\n## Fixed\n\n- issue with addWithInitialValue when using add and then addWithInitialValue\n\n## 2.8.0 (June 5, 2019)\n\n## Added\n\n- addWithInitialValue to the `ArrayField`\n\n## 2.7.8 (May 31, 2019)\n\n## Fixed\n\n- issue where initial values were not being formatted\n\n## 2.7.7 (May 30, 2019)\n\n## Fixed\n\n- issue where initial values were not being masked\n\n## 2.7.6 (May 29, 2019)\n\n## Updated\n\n- Types file to support validate on formApi\n\n## 2.7.5 (May 29, 2019)\n\n## Updated\n\n- Types file to support any type on form errors\n\n## 2.7.4 (May 23, 2019)\n\n### Fixed\n\n- documentation for creating custom inputs\n\n### Added\n\n- the ability to pass your own ref to inputs\n\n## 2.7.3 (May 22, 2019)\n\n### Fixed\n\n- issue with validation triggering when keep state and validate on blur\n\n## 2.7.2 (May 21, 2019)\n\n### Added\n\n- made `maskWithCursorOffset` optional in types\n\n## 2.7.1 (May 21, 2019)\n\n### Added\n\n- `maskWithCursorOffset` to the type defs\n\n## 2.7.0 (May 21, 2019)\n\n### Added\n\n- `maskWithCursorOffset` prop to inputs\n\n## 2.6.15 (May 20, 2019)\n\n### Added\n\n- maintainCursor to types\n\n## 2.6.14 (May 16, 2019)\n\n### Added\n\n- render and userProps to field context types\n\n## 2.6.13 (May 16, 2019)\n\n### Added\n\n- maskedValue to types\n\n## 2.6.12 (May 14, 2019)\n\n### Added\n\n- getters to useFields field api\n\n## 2.6.11 (May 11, 2019)\n\n### Added\n\n- useField hook to the docs\n\n### Updated\n\n- the interface for useField hook\n\n## 2.6.10 (May 10, 2019)\n\n### Fixed\n\n- issue where initialization code in useform was in the effect and not in constructor\n\n## 2.6.9 (May 10, 2019)\n\n### Fixed\n\n- attempting to fix issue that I think is caused by useEffect in useForm hook\n\n## 2.6.8 (May 10, 2019)\n\n### Fixed\n\n- issues cause by using `useMemo` instead of `useState` for initial render stuff\n\n## 2.6.7 (May 9, 2019)\n\n### Added\n\n- exists function to the field api types\n\n## 2.6.6 (May 9, 2019)\n\n### Added\n\n- exists function to the field api so you can check to see if that field exists\n\n## 2.6.5 (May 9, 2019)\n\n### Fixed\n\n- issue where inital render of useFieldApi would fail when field was not registered yet\n\n## 2.6.4 (May 9, 2019)\n\n### Updated\n\n- useForm hook so that the event handlers can change\n\n## 2.6.3 (May 7, 2019)\n\n### Removed\n\n- debug as a dependency and added my own :)\n\n## 2.6.2 (May 3, 2019)\n\n### Fixed\n\n- issue with default register context missin getField function\n\n## 2.6.1 (May 3, 2019)\n\n### Fixed\n\n- issue with `useFieldApi` hook and `withFieldApi` HOC where reset and validate were not there\n\n### Added\n\n- a few more tests to increase test coverage!!!! wooo\n\n## 2.6.0 (May 2, 2019)\n\n### Added\n\n- `useForm` hook!!! and `FormProvider` component!!!\n\n## 2.5.0 (April 30, 2019)\n\n### Updated\n\n- useField hook to useEffect instead of useLayoutEffect\n\n## 2.4.0 (April 30, 2019)\n\n### Added\n\n- preventEnter prop to the form so users can prevent enter key form submission\n\n## 2.3.2 (April 22, 2019)\n\n### Updated\n\n- Issue with dynamic arrays and initial values\n\n## 2.3.1 (April 12, 2019)\n\n### Updated\n\n- Babel build\n\n## 2.3.0 (April 3, 2019)\n\n### Added\n\n- `allowEmtyStrings` prop to the form\n- `allowEmtyString` prop to inputs\n\n### Fixed\n\n- issue where setValues would not allow empty strings\n\n## 2.2.0 (March 29, 2019)\n\n### Added\n\n- `setFormError` function to the form api\n- `validate` function to the form api\n\n## 2.1.15 (March 28, 2019)\n\n### Fixed\n\n- Issue with setValues missing from the default context\n\n## 2.1.14 (March 27, 2019)\n\n### Fixed\n\n- Issue where reset would call validation\n\n## 2.1.13 (March 18, 2019)\n\n### Updated\n\n- Allowing for optional generic on FormValue\n\n## 2.1.12 (March 13, 2019)\n\n### Updated\n\n- ref to be any type in typings\n\n## 2.1.11 (March 12, 2019)\n\n### Fixed\n\n- issue in typings for ref field on FieldContext\n\n## 2.1.10 (March 12, 2019)\n\n### Fixed\n\n- issue when using a field NOT in the context of a form\n\n## 2.1.9 (March 8, 2019)\n\n### Fixed\n\n- another issue where initial values did not work when keep state was passed\n\n## 2.1.8 (March 8, 2019)\n\n### Fixed\n\n- issue where initial values did not work when keep state was passed\n\n## 2.1.7 (March 3, 2019)\n\n### Fixed\n\n- issue where initial values did not work for `ArrayFields`\n\n## 2.1.6 (Feb 21, 2019)\n\n### Updated\n\n- typing files for type script users\n\n## 2.1.5 (Feb 19, 2019)\n\n### Fixed\n\n- Issue with text area input not setting typed value\n\n## 2.1.4 (Feb 19, 2019)\n\n### Added\n\n- `maskOnBlur` prop to inputs\n\n## 2.1.3 (Feb 14, 2019)\n\n### Added\n\n- `fieldExists` api function to check if field exists\n\n## 2.1.2 (Feb 14, 2019)\n\n### Fixed\n\n- Issue where form that is submitted through enter key would try to prevent default\n\n## 2.1.1 (Feb 14, 2019)\n\n### Fixed\n\n- Issue where form values would not get passed to validation function when touched\n\n## 2.1.0 (Feb 14, 2019)\n\n### Updated\n\n- Format and parse to set maskedValue instead of value\n\n## 2.0.5 (Feb 14, 2019)\n\n### Fixed\n\n- Issue where you could NOT set 0 null or false as initial values because they are falsey\n\n## 2.0.4 (Feb 13, 2019)\n\n### Added\n\n- validateFields function to the form!!!\n\n## 2.0.3 (Feb 13, 2019)\n\n### Fixed\n\n- Issue where reset would not work for scoped fields\n\n### Added\n\n- Set Values to the form api!!!\n\n## 2.0.2 (Feb 13, 2019)\n\n### Fixed\n\n- Issue where ArrayField was prefixing all fields with \'field\'\n- Issue where when input fields changed input did not rerender.\n\n## 2.0.1 (Feb 10, 2019)\n\n### Fixed\n\n- Issue where render and component props were getting passed to the dom form\n\n## 2.0.0 (Feb 7, 2019)\n\n### Added\n\n- useFieldApi\n- useFieldState\n- useFormApi\n- useFormState\n- useField\n- format\n- parse\n- maintianCursor ( fixes issue where cursor jumps to end on mask )\n- ArrayField ( Check out the docs! this is sick! )\n- Form Level validation ( function that can invalidate the form as a whole )\n- debug prop that allows you to visually view the rendering!\n\n### Changed\n\n- the field `"siblings.1"` now resolves to `values.siblings[1]`, it used to resolve to `values.siblings.1`\n- the field `"siblings[\'2\']"` now resolves to `values.siblings[2]`, it used to resolve to `values.siblings.2`\n- withFormApi will no longer trigger a rerender if the fomrs state changes. This is a great optimization for those who want to modify but dont care about the form state!\n- the `validate` prop now expects the validation function to return `undefined` if there is no error. Any other returned value (including falsey `null`, `0`, etc will be treated as an error for the field.\n\n### Removed\n\n- The Field Component\n- `fieldExists` not needed\n- `setState` will maybe add later but its complex and out of scope ATM\n- `setValues` will maybe add later but its complex and out of scope ATM ( as of V 2.0.3 its back! )\n- `preSubmit` was never needed.. developers can do this themselves\n- Async Validation. Async validation led to many issues that overcomplicated `informed`. We determined this is something that the developer could achive on there own for now but we may look into adding this in the future.\n\n## 1.10.12 ( December 4, 2018 )\n\n### Updated\n\n- typescript definition file\n\n## 1.10.11 & 1.10.10 I ran version patch twice lol ( December 4, 2018 )\n\n### Updated\n\n- Select forward ref\n\n## 1.10.9 ( November 16, 2018 )\n\n### Updated\n\n- files in package json to include typeigs\n\n## 1.10.8 ( November 8, 2018 )\n\n### Added\n\n- type file for typescript\n\n## 1.10.7 ( October 11, 2018 )\n\n### Updated\n\n- Name of withFormSate\n\n## 1.10.6 ( October 2, 2018 )\n\n### Fixed\n\n- Skipped test for select!!!\n\n### Updated\n\n- Select to use new ref interface\n\n## 1.10.5 ( September 14, 2018 )\n\n### Added\n\n- License\n\n## 1.10.4 ( August 13, 2018 )\n\n### Fixed\n\n- Issue with @babel/runtime was the dep when it should have ben @babel/runtime-corejs2\n\n## 1.10.3 ( August 13, 2018 )\n\n### Fixed\n\n- Issue with @babel/runtime for real this time\n\n## 1.10.2 ( August 13, 2018 )\n\n### Fixed\n\n- Issue with @babel/runtime\n\n## 1.10.1 ( August 13, 2018 )\n\n### Removed\n\n- mistakenly added dev deps that were deps... oops\n\n## 1.10.0 ( August 13, 2018 )\n\n### Added\n\n- submits to the form state\n\n## 1.9.0 ( August 8, 2018 )\n\n### Rebuilt\n\n- Added prettier so all the files have been changed... so i rebuilt to have source maps match code\n\n## 1.8.1 ( August 1, 2018 )\n\n### Rebuilt\n\n- Attempting to simply rebuild lib due to possible build issue\n\n## 1.8.0 ( August 1, 2018 )\n\n### Updated\n\n- initialValue to get exposed as prop to custom fields\n\n## 1.7.5 ( July 31, 2018 )\n\n### Added\n\n- Source maps\n\n## 1.7.4 ( July 26, 2018 )\n\n### Fixed\n\n- Issue where Basic radio group was not getting exported\n\n## 1.7.3 ( July 23, 2018 )\n\n### Fixed\n\n- issue where bind to field did not pass down the field prop.\n\n## 1.7.2 ( July 20, 2018 )\n\n### Fixed\n\n- Issue where element wont get removed from array when deregistering field... this is used when dynamically removing value\n\n## 1.7.1 ( July 20, 2018 )\n\n### Added\n\n- Field prop is now exposed to field elements and default inputs pass field as name to html inputs\n\n## 1.7.0 ( July 18, 2018 )\n\n### Added\n\n- fieldExists method to the formApi\n\n## 1.6.0 ( July 16, 2018 )\n\n### Added\n\n- onValueChange prop to inputs so you can tie into when values change!!\n\n## 1.5.2 ( July 13, 2018 )\n\n### Fixed\n\n- Issue where prop changes to fields would not get recognized\n\n## 1.5.1 ( July 13, 2018 )\n\n### Fixed\n\n- issue where i forgott to add @babel/runtime as dependency\n\n## 1.5.0 ( July 12, 2018 )\n\n### Added\n\n- asyncValidation prop to inputs\n- asyncValidateOnBlur prop to inputs\n\n## 1.4.0 ( July 5, 2018 )\n\n### Added\n\n- Basic input fields so users can more easily create custom inputs\n- Docs for creating custom inputs\n\n## 1.3.11 ( July 9, 2018 )\n\n### Fixed\n\n- issue where you could not nest scope\n\n## 1.3.10 ( July 5, 2018 )\n\n### Fixed\n\n- issue where you could not pass initialValue=false to checkbox\n\n## 1.3.9 ( July 5, 2018 )\n\n### Fixed\n\n- issue where mutable values were getting passed to onSubmit and getState\n\n## 1.3.8 ( July 2, 2018 )\n\n### Fixed\n\n- issue where path array was being build every get and set\n\n## 1.3.7 ( July 2, 2018 )\n\n### Fixed\n\n- issue where onChange was getting passed to internal form element\n\n## 1.3.6 ( June 28, 2018 )\n\n### Added\n\n- globalObject: \'this\' to the webpack dist config to support SSR\n\n## 1.3.5 ( June 28, 2018 )\n\n### Fixed\n\n- Issue with event emitter limit ( need to look into alternative solution )\n- Removed depricated sandbox sinon usage that was causing errors during tests\n\n## 1.3.3 ( June 28, 2018 )\n\n### Updated\n\n- Webpack dist configuration to keep class names\n\n## 1.3.2 ( June 28, 2018 )\n\n### Fixed\n\n- Issue were initialValue was getting passed all the way down to html input\n- Issue where form would not rerender when field was registered\n\n## 1.3.1 ( June 28, 2018 )\n\n### Fixed\n\n- Issue were validateOnMount was getting passed all the way down to html input\n\n## 1.3.0 ( June 28, 2018 )\n\n### Added\n\n- mask so you can mask values at field level. example `value => value + \'!!!\'`\n\n## 1.2.1 ( June 27, 2018 )\n\n### Added\n\n- hook so you can add a button with type=reset and it will reset the form\n\n## 1.2.0 ( June 27, 2018 )\n\n### Added\n\n- validateOnMount to input props\n\n## 1.1.2 ( June 25, 2018 )\n\n### Moved\n\n- React and React-Dom to dev dependencies\n\n## 1.1.1 ( June 18, 2018 )\n\n### Fixed\n\n- Bug where i did not do null check on event within on submit\n\n## 1.0.1 ( June 15, 2018 )\n\n### Added\n\n- Notify prop to inputs that allows you to notify other fields when your error state changes ( see docs )\n\n## 1.0.0 (June 12, 2018)\n\n### Added\n\n- Text\n- TextArea\n- Radio Group\n- Radio\n- Select\n- Select as Multiselect !!!\n- Checkbox\n- withRadioGroup\n- withFieldApi\n- withFieldState\n- withFormApi\n- withFormState\n- asField\n- Form\n- Field\n\n### Changed\n\n**\nNote: this was the first release but i wanted to include changes from\n`react-form` so here they are:\n**\n\n- `formApi` was split into two parts `formApi` ( contains just functions ) `formState` ( contains just form state )\n- Form level validation is gone. You do all validation via field validation.\n- `defaultValues` Form prop is now called `initialValues`\n- `onChange` Form prop only recieves the `formState`. It used to retrieve the form Api as well.\n- `preventDefault` Form prop is now `dontPreventDefault`\n- `getApi` Form prop just returns the formApi, not the state and the api.\n- `Form` component now renders the `form` element internally. So you dont have to "hook it up" anymore!!\n\n### Removed\n\n**\nNote: this was the first release but i wanted to include things that were removed from\n`react-form` so here they are:\n**\n\n- `NestedField` you can use `Scope` instead but all it does is scope internal fields to `scope="your-scope"`\n- validateOnSubmit was removed. Now the form always validates on submit by default and you can opt into sooner validation at field level.\n- `defaultValues` form prop is now called `initialValues`\n- `pure` Form prop. Its not needed anymore due to the use of `React.PureComponent` internally.\n- add, remove, and swap values. The developer can achive this on there own without the use of internal functionality.\n- Array Syntax. In order to keep things simple we now only support the string syntax for field names.\n- Async Validation. Async validation led to many issues that overcomplicated `react-form`. We determined this is something that the developer could achive on there own for now but we may look into adding this in the future.\n- Warning and Success have been removed for now to keep lib lean but we may add additional functions in the future.\n',
        function() {
          return null;
        }
      );
    },
    955: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        onSubmit = function onSubmit(_ref) {
          var values = _ref.values;
          window.alert(JSON.stringify(values, null, 2));
        };
      __webpack_exports__.a = Object(withDocs.a)(
        '# Basic Form\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, Debug } from \'informed\';\n\nconst onSubmit = ({ values }) => {\n  window.alert(JSON.stringify(values, null, 2));\n};\n\n<Form onSubmit={onSubmit}>\n  <Input field="name" label="First name:" />\n  <button type="submit">Submit</button>\n  <Debug values />\n</Form>;\n```\n',
        function Basic() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              { onSubmit: onSubmit, autocomplete: 'off' },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex', flexWrap: 'wrap' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '2rem' } },
                  react_default.a.createElement(src.j, {
                    name: 'name',
                    label: 'First name:'
                  }),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '300px', marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, { values: !0 })
                )
              )
            )
          );
        }
      );
    },
    956: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Path Syntax\n\nEvery input in `informed` needs an associated field name. In its simplest form, field names are just strings. However, sometimes you may have some complex forms that require special ways of organizing your fields, this is where the special syntax comes in.\n\nFields can be simple strings, strings that contain ".", and strings that contain "[ ]", much like how you access and write to objects and arrays in javascript. Below are some examples of field names and what they resolve to in the forms values object. This syntax is commonly referred to as `Java Script Property Access Notation` or JSPAN.\n\n| Field                 | Resolution                 |\n| --------------------- | -------------------------- |\n| `"username"`          | `values.username`          |\n| `"friends[0]"`        | `values.friends[0]`        |\n| `"siblings.1"`        | `values.siblings[1]`       |\n| `"parents[0].name"`   | `values.parents[0].name`   |\n| `"foo.bar[0].baz[1]"` | `values.foo.bar[0].baz[1]` |\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, Debug } from \'informed\';\n\nconst Example = () => (\n  <Form>\n    <Input name="username" label="Username:" />\n    <Input name="friends[0]" label="Friend[0]:" />\n    <Input name="siblings.1" label="Siblings.1:" />\n    <Input name="parents[0].name" label="parents[0].name" />\n    <Input name="foo.bar[0].baz[1]" label="foo.bar[0].baz[1]" />\n    <button type="submit">submit</button>\n    <Debug values />\n  </Form>\n);\n```\n',
        function Example() {
          return react_default.a.createElement(
            src.f,
            null,
            react_default.a.createElement(src.j, {
              name: 'username',
              label: 'username:'
            }),
            react_default.a.createElement(src.j, {
              name: 'friends[0]',
              label: 'friend[0]:'
            }),
            react_default.a.createElement(src.j, {
              name: 'siblings.1',
              label: 'siblings.1:'
            }),
            react_default.a.createElement(src.j, {
              name: 'parents[0].name',
              label: 'parents[0].name'
            }),
            react_default.a.createElement(src.j, {
              name: 'foo.bar[0].baz[1]',
              label: 'foo.bar[0].baz[1]'
            }),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'submit'
            ),
            react_default.a.createElement(src.c, { values: !0 })
          );
        }
      );
    },
    957: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        Context = __webpack_require__(4),
        src = __webpack_require__(1);
      function _slicedToArray(arr, i) {
        return (
          (function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function _iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o) return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return _arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function _nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function _arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var initialValues = {
          last: 'Puzzo',
          baz: 'BAZ',
          friends: [
            { first: 'Joe', last: 'Puzzo' },
            { first: 'Jill', last: 'Jillberg' },
            { first: 'Jane', last: 'Janney' }
          ]
        },
        FeatureTester_Reset = function Reset() {
          var formApi = Object(src.A)();
          return react_default.a.createElement(
            'button',
            { type: 'button', onClick: formApi.reset },
            'Reset Form'
          );
        },
        formatter = [
          '+',
          '1',
          ' ',
          /\d/,
          /\d/,
          /\d/,
          '-',
          /\d/,
          /\d/,
          /\d/,
          '-',
          /\d/,
          /\d/,
          /\d/,
          /\d/
        ],
        parser = function parser(value) {
          return value.replace('+1 ', '').replace(/-/g, '');
        },
        mask = function mask(value) {
          return value.toUpperCase();
        },
        onSubmit = function onSubmit(_ref) {
          var values = _ref.values;
          return console.log(values);
        },
        validateLength = function validateLength(value) {
          return !value || value.length < 5
            ? 'Field must be at least five characters'
            : void 0;
        },
        validateFields = function validateFields(values) {
          return {
            foo: validateLength(values.foo),
            bar: validateLength(values.bar),
            baz: validateLength(values.baz),
            friends: [
              { first: validateLength(values.friends[0].first) },
              { first: validateLength(values.friends[1].first) }
            ]
          };
        },
        FeatureTester_FieldState = function FieldState(_ref2) {
          var name = _ref2.name,
            fieldState = Object(src.y)(name);
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement(
              'h5',
              null,
              'Component using fieldState: ',
              name
            ),
            'Render: ',
            Math.random(),
            react_default.a.createElement(
              'pre',
              null,
              react_default.a.createElement(
                'code',
                null,
                JSON.stringify(fieldState, null, 2)
              )
            )
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        '# Feature Tester\n\nI literally made this to test lots of features in one form lols\n\n\x3c!-- STORY --\x3e\n\n```jsx\n```\n',
        function FeatureTester() {
          var _useState2 = _slicedToArray(Object(react.useState)(1), 2),
            step = _useState2[0],
            setStep = _useState2[1];
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              {
                onSubmit: onSubmit,
                autocomplete: 'off',
                onReset: function onReset(state) {
                  console.log('RESET', state);
                },
                onSubmitFailure: function onSubmitFailure(state) {
                  console.log('FAILURE', state);
                },
                initialValues: initialValues,
                validateFields: validateFields
              },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex', flexWrap: 'wrap' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '2rem' } },
                  react_default.a.createElement(FeatureTester_Reset, null),
                  react_default.a.createElement(src.i, null, function(_ref3) {
                    var submitted = _ref3.submitted;
                    return react_default.a.createElement(
                      react_default.a.Fragment,
                      null,
                      react_default.a.createElement(
                        'button',
                        { type: 'submit' },
                        'Submit ',
                        submitted ? '( Been Submitted )' : ''
                      )
                    );
                  }),
                  react_default.a.createElement('hr', null),
                  react_default.a.createElement('h3', null, 'Masking Test'),
                  react_default.a.createElement(src.j, {
                    name: 'phone',
                    formatter: formatter,
                    parser: parser,
                    maintainCursor: !0,
                    initialValue: '1231231234',
                    debug: !0
                  }),
                  react_default.a.createElement(src.j, {
                    name: 'uppercase',
                    formatter: [
                      mask,
                      mask,
                      '-',
                      mask,
                      mask,
                      '-',
                      mask,
                      mask,
                      mask,
                      mask
                    ],
                    maintainCursor: !0,
                    initialValue: 'abcdefgh',
                    debug: !0
                  }),
                  react_default.a.createElement('hr', null),
                  react_default.a.createElement('h3', null, 'Normal Form Test'),
                  react_default.a.createElement(src.j, {
                    label: 'First Name',
                    name: 'first',
                    initialValue: 'Joe',
                    debug: !0
                  }),
                  react_default.a.createElement(src.j, {
                    label: 'Last Name',
                    name: 'last',
                    debug: !0,
                    validate: function validate(v) {
                      return 'Puzzo' === v ? 'Ahhhh' : void 0;
                    }
                  }),
                  react_default.a.createElement(src.j, {
                    label: 'Foo',
                    name: 'foo',
                    defaultValue: 'foo',
                    debug: !0
                  }),
                  react_default.a.createElement(src.j, {
                    label: 'Bar',
                    name: 'bar',
                    initialValue: 'BAR',
                    defaultValue: 'bar',
                    debug: !0
                  }),
                  react_default.a.createElement(src.j, {
                    label: 'Baz',
                    name: 'baz',
                    defaultValue: 'bar',
                    debug: !0
                  }),
                  react_default.a.createElement('hr', null),
                  react_default.a.createElement('h3', null, 'Relevant Test'),
                  react_default.a.createElement(src.b, {
                    label: 'Show Info?',
                    name: 'showInfo',
                    debug: !0
                  }),
                  react_default.a.createElement(
                    src.o,
                    {
                      when: function when(_ref4) {
                        return _ref4.formState.values.showInfo;
                      }
                    },
                    react_default.a.createElement(src.j, {
                      type: 'number',
                      label: 'Age',
                      name: 'age',
                      debug: !0
                    }),
                    react_default.a.createElement(src.j, {
                      label: 'Favorite Color',
                      name: 'color',
                      keepState: !0,
                      debug: !0
                    })
                  ),
                  react_default.a.createElement(src.j, {
                    label: 'Favorite Food',
                    name: 'food',
                    debug: !0,
                    relevanceWhen: ['showInfo'],
                    relevant: function relevant(_ref5) {
                      return _ref5.formState.values.showInfo;
                    }
                  }),
                  react_default.a.createElement(src.j, {
                    label: 'Favorite Animal',
                    name: 'animal',
                    keepState: !0,
                    debug: !0,
                    relevanceWhen: ['showInfo'],
                    relevant: function relevant(_ref6) {
                      return _ref6.formState.values.showInfo;
                    }
                  }),
                  react_default.a.createElement('hr', null),
                  react_default.a.createElement('h3', null, 'Multistep Test'),
                  react_default.a.createElement(
                    Context.j.Provider,
                    { value: step },
                    react_default.a.createElement(
                      'button',
                      {
                        type: 'button',
                        onClick: function onClick() {
                          return setStep(1);
                        }
                      },
                      'Step1'
                    ),
                    react_default.a.createElement(
                      'button',
                      {
                        type: 'button',
                        onClick: function onClick() {
                          return setStep(2);
                        }
                      },
                      'Step2'
                    ),
                    1 === step
                      ? react_default.a.createElement(
                          react_default.a.Fragment,
                          null,
                          react_default.a.createElement(src.b, {
                            label: 'Show Info?',
                            name: 'multi.showInfo',
                            debug: !0
                          }),
                          react_default.a.createElement(
                            src.o,
                            {
                              when: function when(_ref7) {
                                var _formState$values$mul;
                                return null ===
                                  (_formState$values$mul =
                                    _ref7.formState.values.multi) ||
                                  void 0 === _formState$values$mul
                                  ? void 0
                                  : _formState$values$mul.showInfo;
                              }
                            },
                            react_default.a.createElement(src.j, {
                              type: 'number',
                              label: 'Age []',
                              name: 'multi.age',
                              debug: !0
                            }),
                            react_default.a.createElement(src.j, {
                              label: 'Favorite Color [keepState]',
                              name: 'multi.color',
                              keepState: !0,
                              debug: !0
                            })
                          ),
                          react_default.a.createElement(src.j, {
                            label: 'Favorite Food []',
                            name: 'multi.food',
                            debug: !0,
                            relevanceWhen: ['showInfo'],
                            relevant: function relevant(_ref8) {
                              var _formState$values$mul2;
                              return null ===
                                (_formState$values$mul2 =
                                  _ref8.formState.values.multi) ||
                                void 0 === _formState$values$mul2
                                ? void 0
                                : _formState$values$mul2.showInfo;
                            }
                          }),
                          react_default.a.createElement(src.j, {
                            label: 'Favorite Animal [keepState]',
                            name: 'multi.animal',
                            keepState: !0,
                            debug: !0,
                            relevanceWhen: ['showInfo'],
                            relevant: function relevant(_ref9) {
                              var _formState$values$mul3;
                              return null ===
                                (_formState$values$mul3 =
                                  _ref9.formState.values.multi) ||
                                void 0 === _formState$values$mul3
                                ? void 0
                                : _formState$values$mul3.showInfo;
                            }
                          })
                        )
                      : null,
                    2 === step
                      ? react_default.a.createElement(
                          react_default.a.Fragment,
                          null,
                          react_default.a.createElement(src.j, {
                            label: 'First Name',
                            name: 'multi.first',
                            initialValue: 'Joe',
                            debug: !0
                          }),
                          react_default.a.createElement(src.j, {
                            label: 'Last Name',
                            name: 'multi.last',
                            debug: !0
                          })
                        )
                      : null
                  ),
                  react_default.a.createElement('hr', null),
                  react_default.a.createElement('h3', null, 'Array Test'),
                  react_default.a.createElement(src.b, {
                    label: 'Show Friends?',
                    name: 'showFriends',
                    initialValue: !0,
                    debug: !0
                  }),
                  react_default.a.createElement('h5', null, 'Friends:'),
                  react_default.a.createElement(
                    src.a,
                    {
                      name: 'friends',
                      relevant: function relevant(_ref10) {
                        return _ref10.formState.values.showFriends;
                      }
                    },
                    function(_ref11) {
                      var add = _ref11.add,
                        addWithInitialValue = _ref11.addWithInitialValue,
                        swap = _ref11.swap,
                        reset = _ref11.reset;
                      return react_default.a.createElement(
                        react_default.a.Fragment,
                        null,
                        react_default.a.createElement(
                          'button',
                          {
                            onClick: function onClick() {
                              reset();
                            },
                            type: 'button'
                          },
                          'Reset'
                        ),
                        react_default.a.createElement(
                          'button',
                          {
                            onClick: function onClick() {
                              add();
                            },
                            type: 'button'
                          },
                          'Add'
                        ),
                        react_default.a.createElement(
                          'button',
                          {
                            onClick: function onClick() {
                              swap(0, 1);
                            },
                            type: 'button'
                          },
                          'Swap'
                        ),
                        react_default.a.createElement(
                          'button',
                          {
                            type: 'button',
                            onClick: function onClick() {
                              addWithInitialValue({ name: 'test' });
                            }
                          },
                          'Add with initialValue'
                        ),
                        react_default.a.createElement(
                          src.a.Items,
                          null,
                          function(_ref12) {
                            var remove = _ref12.remove,
                              name = _ref12.name;
                            return react_default.a.createElement(
                              'label',
                              null,
                              console.log('RENDER'),
                              react_default.a.createElement('h5', null, name),
                              react_default.a.createElement(src.j, {
                                label: 'First [ keepState ]',
                                name: 'first',
                                keepState: !0,
                                debug: !0
                              }),
                              react_default.a.createElement(src.j, {
                                label: 'Last [ keepState ]',
                                name: 'last',
                                debug: !0,
                                keepState: !0,
                                initialValue: 'bob-'.concat(name)
                              }),
                              react_default.a.createElement(src.j, {
                                label: 'Foo [ ]',
                                name: 'foo',
                                debug: !0,
                                initialValue: 'foo-'.concat(name)
                              }),
                              react_default.a.createElement(src.b, {
                                label: 'Show Info?',
                                name: 'showInfo',
                                debug: !0
                              }),
                              react_default.a.createElement(
                                src.o,
                                {
                                  when: function when(_ref13) {
                                    var formApi = _ref13.formApi,
                                      scope = _ref13.scope;
                                    return formApi.getValue(
                                      ''.concat(scope, '.showInfo')
                                    );
                                  }
                                },
                                react_default.a.createElement(src.j, {
                                  type: 'number',
                                  label: 'Age',
                                  name: 'age',
                                  debug: !0
                                }),
                                react_default.a.createElement(src.j, {
                                  label: 'Favorite Color',
                                  name: 'color',
                                  keepState: !0,
                                  debug: !0
                                })
                              ),
                              react_default.a.createElement(src.j, {
                                label: 'Favorite Food',
                                name: 'food',
                                debug: !0,
                                relevanceWhen: ['showInfo'],
                                relevant: function relevant(_ref14) {
                                  var formApi = _ref14.formApi,
                                    scope = _ref14.scope;
                                  return formApi.getValue(
                                    ''.concat(scope, '.showInfo')
                                  );
                                }
                              }),
                              react_default.a.createElement(
                                FeatureTester_FieldState,
                                { name: name }
                              ),
                              react_default.a.createElement(
                                'button',
                                { type: 'button', onClick: remove },
                                'Remove'
                              )
                            );
                          }
                        )
                      );
                    }
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '300px', marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, null)
                )
              )
            )
          );
        }
      );
    },
    958: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      function _slicedToArray(arr, i) {
        return (
          (function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function _iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o) return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return _arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function _nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function _arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var Dynamic_JoesState = function JoesState() {
          var fieldState = Object(src.y)('joe');
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement('strong', null, 'Joes State'),
            react_default.a.createElement(
              'pre',
              null,
              react_default.a.createElement(
                'code',
                null,
                JSON.stringify(fieldState, null, 2)
              )
            )
          );
        },
        Dynamic_ElonsState = function ElonsState() {
          var fieldState = Object(src.y)('elon');
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement('strong', null, 'Elons State'),
            react_default.a.createElement(
              'pre',
              null,
              react_default.a.createElement(
                'code',
                null,
                JSON.stringify(fieldState, null, 2)
              )
            )
          );
        },
        Dynamic_DynamicContent = function DynamicContent() {
          var _useState2 = _slicedToArray(Object(react.useState)('foo'), 2),
            field1 = _useState2[0],
            setField1 = _useState2[1],
            _useState4 = _slicedToArray(Object(react.useState)('baz'), 2),
            field2 = _useState4[0],
            setField2 = _useState4[1],
            _useState6 = _slicedToArray(Object(react.useState)('boo'), 2),
            field3 = _useState6[0],
            setField3 = _useState6[1],
            _useState8 = _slicedToArray(Object(react.useState)(!0), 2),
            disabled = _useState8[0],
            setDisabled = _useState8[1],
            _useState10 = _slicedToArray(Object(react.useState)('joe'), 2),
            field5 = _useState10[0],
            setField5 = _useState10[1];
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(
                'div',
                { style: { display: 'flex' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1 } },
                  react_default.a.createElement(
                    'label',
                    { htmlFor: 'field1', key: field1 },
                    field1,
                    ':',
                    react_default.a.createElement(src.j, {
                      name: field1,
                      id: 'field1'
                    })
                  ),
                  'baz' === field2
                    ? react_default.a.createElement(
                        'label',
                        { htmlFor: 'baz', key: 'baz' },
                        'baz:',
                        react_default.a.createElement(src.j, {
                          name: 'baz',
                          id: 'baz'
                        })
                      )
                    : react_default.a.createElement(
                        'label',
                        { htmlFor: 'taz', key: 'taz' },
                        'taz:',
                        react_default.a.createElement(src.j, {
                          name: 'taz',
                          id: 'taz'
                        })
                      ),
                  react_default.a.createElement(
                    'label',
                    { htmlFor: 'field3', key: field3 },
                    field3,
                    ':',
                    react_default.a.createElement(src.j, {
                      name: field3,
                      id: 'field3',
                      keepState: !0
                    })
                  ),
                  react_default.a.createElement(
                    'label',
                    { key: 'diabled' },
                    'Diabled:',
                    react_default.a.createElement(src.j, {
                      name: 'disabled',
                      disabled: disabled
                    })
                  ),
                  react_default.a.createElement(
                    'label',
                    null,
                    field5,
                    ':',
                    react_default.a.createElement(src.j, { name: field5 })
                  ),
                  react_default.a.createElement(Dynamic_JoesState, null),
                  react_default.a.createElement('br', null),
                  react_default.a.createElement(Dynamic_ElonsState, null),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1 } },
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function toggle1() {
                        setField1('foo' === field1 ? 'bar' : 'foo');
                      }
                    },
                    'Toggle Foo ',
                    '<->',
                    ' Bar'
                  ),
                  react_default.a.createElement('br', null),
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function toggle2() {
                        setField2('baz' === field2 ? 'taz' : 'baz');
                      }
                    },
                    'Toggle Baz ',
                    '<->',
                    ' Taz'
                  ),
                  react_default.a.createElement('br', null),
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function toggle3() {
                        setField3('boo' === field3 ? 'far' : 'boo');
                      }
                    },
                    'Toggle Boo ',
                    '<->',
                    ' Far'
                  ),
                  react_default.a.createElement('br', null),
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function toggle4() {
                        setDisabled(function(dis) {
                          return !dis;
                        });
                      }
                    },
                    'Toggle Disabled'
                  ),
                  react_default.a.createElement('br', null),
                  react_default.a.createElement(
                    'button',
                    {
                      type: 'button',
                      onClick: function toggle5() {
                        setField5('joe' === field5 ? 'elon' : 'joe');
                      }
                    },
                    'Toggle Joe ',
                    '<->',
                    ' Elon'
                  )
                )
              ),
              react_default.a.createElement(src.c, null)
            )
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Dynamic Form\n\nOften you need to \"pull the rug\" out from under a form and dynamically change\nthe contents. This is easily achieved with informed. Below is an example of three\ninputs, and three toggle buttons. The first two inputs are basically the same but are\nsimply toggled in two different ways ( same result different code ). The third one\nis special because it has an additional \"keep-state\" prop.\n\nDo this! Enter somthing in the first and second fields, then hit the first two toggle buttons.\nNotice how the old values are removed from the form state, and the fields are updated. Sometimes,\nthis is what a developer wants! When they change the field they want the old value to go away. BUT!\nsometimes this is not what a developer wants. Instead, they may want a fields value to stick around.\nIn order to achive this, you simply tell informed to \"keep the state\".\n\nDo this now! Enter somthing in the third field and hit the third toggle button. Enter a new value in the empty field,\nand then toggle again! You can see how the value persisted!\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport React, { useState } from 'react';\nimport { Form, Input, useFieldState } from 'informed';\n\nconst JoesState = () => {\n  const fieldState = useFieldState('joe');\n  return (\n    <>\n      <strong>Joes State</strong>\n      <pre>\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\nconst ElonsState = () => {\n  const fieldState = useFieldState('elon');\n  return (\n    <>\n      <strong>Elons State</strong>\n      <pre>\n        <code>{JSON.stringify(fieldState, null, 2)}</code>\n      </pre>\n    </>\n  );\n};\n\nconst DynamicForm = () => {\n  const [field1, setField1] = useState('foo');\n  const [field2, setField2] = useState('baz');\n  const [field3, setField3] = useState('boo');\n  const [disabled, setDisabled] = useState(true);\n  const [field5, setField5] = useState('joe');\n\n  const toggle1 = () => {\n    setField1(field1 === 'foo' ? 'bar' : 'foo');\n  };\n\n  const toggle2 = () => {\n    setField2(field2 === 'baz' ? 'taz' : 'baz');\n  };\n\n  const toggle3 = () => {\n    setField3(field3 === 'boo' ? 'far' : 'boo');\n  };\n\n  const toggle4 = () => {\n    setDisabled(dis => !dis);\n  };\n\n  const toggle5 = () => {\n    setField5(field5 === 'joe' ? 'elon' : 'joe');\n  };\n\n  return (\n    <div>\n      <Form>\n        <label htmlFor=\"field1\" key={field1}>\n          {field1}:<Input field={field1} id=\"field1\" />\n        </label>\n\n        {field2 === 'baz' ? (\n          <label htmlFor=\"baz\" key=\"baz\">\n            baz:\n            <Input field=\"baz\" id=\"baz\" />\n          </label>\n        ) : (\n          <label htmlFor=\"taz\" key=\"taz\">\n            taz:\n            <Input field=\"taz\" id=\"taz\" />\n          </label>\n        )}\n\n        <label htmlFor=\"field3\" key={field3}>\n          {field3}:<Input field={field3} id=\"field3\" keepState />\n        </label>\n\n        <label key=\"diabled\">\n          Diabled:\n          <Input field=\"disabled\" disabled={disabled} />\n        </label>\n\n        <label>\n          {field5}:<Input field={field5} />\n        </label>\n\n        <JoesState />\n        <br />\n        <ElonsState />\n\n        <button type=\"submit\">Submit</button>\n      </Form>\n      <button type=\"button\" onClick={toggle1}>\n        Toggle Foo {'<->'} Bar\n      </button>\n      <br />\n      <button type=\"button\" onClick={toggle2}>\n        Toggle Baz {'<->'} Taz\n      </button>\n      <br />\n      <button type=\"button\" onClick={toggle3}>\n        Toggle Boo {'<->'} Far\n      </button>\n      <br />\n      <button type=\"button\" onClick={toggle4}>\n        Toggle Disabled\n      </button>\n      <br />\n\n      <button type=\"button\" onClick={toggle5}>\n        Toggle Joe {'<->'} Elon\n      </button>\n    </div>\n  );\n};\n```\n",
        function Dynamic() {
          return react_default.a.createElement(Dynamic_DynamicContent, null);
        }
      );
    },
    959: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input',
              'ui:props': {
                validate: function validate(v) {
                  return null == v ? 'Required' : void 0;
                }
              },
              'informed:validate': {}
            },
            age: {
              type: 'number',
              title: 'Age',
              'ui:control': 'input',
              'ui:props': { type: 'number' }
            },
            bio: { type: 'string', title: 'Bio', 'ui:control': 'textarea' },
            authorize: {
              type: 'string',
              title: 'Authorize',
              'ui:control': 'checkbox'
            },
            color: {
              type: 'string',
              title: 'Color',
              'ui:control': 'select',
              oneOf: [
                {
                  const: '',
                  title: '- Select -',
                  'ui:props': { disabled: !0 }
                },
                { const: 'red', title: 'Red' },
                { const: 'black', title: 'Black' },
                { const: 'white', title: 'White' }
              ]
            },
            model: {
              type: 'string',
              title: 'Model',
              'ui:control': 'radio',
              oneOf: [
                { const: 'ms', title: 'Model S' },
                { const: 'm3', title: 'Model 3' },
                { const: 'mx', title: 'Model X' },
                { const: 'my', title: 'Model Y' }
              ],
              default: null,
              'ui:props': { initialValue: 'm3' }
            },
            cars: {
              type: 'array',
              title: 'Cars',
              'ui:control': 'select',
              'ui:props': {
                multiple: !0,
                style: { height: '100px', width: '200px' },
                initialValue: ['jeep', 'tesla']
              },
              items: {
                oneOf: [
                  { const: 'tesla', title: 'Tesla' },
                  { const: 'volvo', title: 'Volvo' },
                  { const: 'audi', title: 'Audi' },
                  { const: 'jeep', title: 'Jeep' }
                ]
              }
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# JSON Schema Form\n\n** Note: This is in beta and is subject to change! **\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields, Debug } from 'informed';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input',\n      'ui:props': {\n        validate: v => (v == null ? 'Required' : undefined)\n      }\n    },\n    age: {\n      type: 'number',\n      title: 'First name',\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    },\n    bio: {\n      type: 'string',\n      title: 'Bio',\n      'ui:control': 'textarea'\n    },\n    authorize: {\n      type: 'string',\n      title: 'Authorize',\n      'ui:control': 'checkbox'\n    },\n    color: {\n      type: 'string',\n      title: 'Color',\n      'ui:control': 'select',\n      oneOf: [\n        {\n          const: '',\n          title: '- Select -',\n          'ui:props': {\n            disabled: true\n          }\n        },\n        { const: 'red', title: 'Red' },\n        { const: 'black', title: 'Black' },\n        { const: 'white', title: 'White' }\n      ]\n    },\n    model: {\n      type: 'string',\n      title: 'Model',\n      'ui:control': 'radio',\n      oneOf: [\n        { const: 'ms', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      default: null,\n      'ui:props': {\n        initialValue: 'm3'\n      }\n    },\n    cars: {\n      type: 'array',\n      title: 'Cars',\n      'ui:control': 'select',\n      'ui:props': {\n        multiple: true,\n        style: { height: '100px', width: '200px' }\n      },\n      items: {\n        oneOf: [\n          { const: 'tesla', title: 'Tesla' },\n          { const: 'volvo', title: 'Volvo' },\n          { const: 'audi', title: 'Audi' },\n          { const: 'jeep', title: 'Jeep' }\n        ]\n      },\n      'ui:props': {\n        initialValue: ['jeep', 'tesla']\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            { schema: schema },
            react_default.a.createElement(src.p, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, null)
          );
        }
      );
    },
    960: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            brother: {
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                  title: 'Brother name',
                  'ui:control': 'input'
                },
                age: {
                  type: 'number',
                  title: 'Brother age',
                  'ui:control': 'input',
                  'ui:props': { type: 'number' }
                }
              }
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Formatted Schema\n\nSometimes you want to control where the fields will end up in the dom.\n\n** Note: This is in beta and is subject to change! **\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from '../../../src';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    brother: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n          title: 'Brother name',\n          'ui:control': 'input'\n        },\n        age: {\n          type: 'number',\n          title: 'Brother age',\n          'ui:control': 'input',\n          'ui:props': {\n            type: 'number'\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <h5>Your Info:</h5>\n    <FormField name=\"name\" />\n    <br />\n    <h5>Brothers Info:</h5>\n    <Scope scope=\"brother\">\n      <FormField name=\"name\" />\n      <FormField name=\"age\" />\n    </Scope>\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            { schema: schema },
            react_default.a.createElement('h5', null, 'Your Info:'),
            react_default.a.createElement(src.g, { name: 'name' }),
            react_default.a.createElement('br', null),
            react_default.a.createElement('h5', null, 'Brothers Info:'),
            react_default.a.createElement(
              src.q,
              { scope: 'brother' },
              react_default.a.createElement(src.g, { name: 'name' }),
              react_default.a.createElement(src.g, { name: 'age' })
            ),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, null)
          );
        }
      );
    },
    961: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            brother: {
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                  title: 'Brother name',
                  'ui:control': 'input'
                },
                age: {
                  type: 'number',
                  title: 'Brother age',
                  'ui:control': 'input',
                  'ui:props': { type: 'number' }
                }
              }
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Nested Schema\n\n** Note: This is in beta and is subject to change! **\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from 'informed';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    brother: {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n          title: 'Brother name',\n          'ui:control': 'input'\n        },\n        age: {\n          type: 'number',\n          title: 'Brother age',\n          'ui:control': 'input',\n          'ui:props': {\n            type: 'number'\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            { schema: schema },
            react_default.a.createElement(src.p, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, null)
          );
        }
      );
    },
    962: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        ajv = __webpack_require__(103),
        ajv_default = __webpack_require__.n(ajv),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          required: ['name', 'siblings'],
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            siblings: {
              type: 'array',
              minItems: 2,
              'ui:control': 'array',
              'ui:props': {
                initialValue: [
                  { name: 'Joe', age: '26' },
                  { name: 'Elon', age: '49' }
                ]
              },
              'ui:before': [{ 'ui:control': 'add' }],
              items: {
                type: 'object',
                required: ['name', 'age'],
                properties: {
                  name: {
                    type: 'string',
                    title: 'Sibling name',
                    'ui:control': 'input'
                  },
                  age: {
                    type: 'number',
                    title: 'Sibling age',
                    minimum: 0,
                    'ui:control': 'input',
                    'ui:props': { type: 'number' }
                  },
                  married: {
                    type: 'string',
                    title: 'Are you married?',
                    enum: ['yes', 'no'],
                    'ui:control': 'radio'
                  },
                  spouse: {
                    type: 'string',
                    title: 'Spouse name',
                    'ui:control': 'input',
                    'ui:props': {
                      relevant: function relevant(_ref) {
                        var scope = _ref.scope;
                        return (
                          'yes' ===
                          _ref.formApi.getValue(''.concat(scope, '.married'))
                        );
                      }
                    }
                  },
                  'ui:component:remove': { 'ui:control': 'remove' }
                }
              }
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Array Field in Schema !!!\n\n** Note: This is in beta and is subject to change! **\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from 'informed';\nimport Ajv from 'ajv';\n\nconst initialValue = [\n  {\n    name: 'Joe',\n    age: '26'\n  },\n  {\n    name: 'Elon',\n    age: '49'\n  }\n];\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'siblings'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    siblings: {\n      type: 'array',\n      minItems: 2,\n      'ui:control': 'array',\n      'ui:props': {\n        initialValue\n      },\n      'ui:before': [{ 'ui:control': 'add' }],\n      items: {\n        type: 'object',\n        required: ['name', 'age'],\n        properties: {\n          name: {\n            type: 'string',\n            title: 'Sibling name',\n            'ui:control': 'input'\n          },\n          age: {\n            type: 'number',\n            title: 'Sibling age',\n            minimum: 0,\n            'ui:control': 'input',\n            'ui:props': {\n              type: 'number'\n            }\n          },\n          married: {\n            type: 'string',\n            title: 'Are you married?',\n            enum: ['yes', 'no'],\n            'ui:control': 'radio',\n            'ui:props': {\n              notify: ['spouse']\n            }\n          },\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input',\n            'ui:props': {\n              relevant: (values, { parentPath, get }) => {\n                const married = get(values, `${parentPath}.married`);\n                return married === 'yes';\n              }\n            }\n          },\n          'ui:component:remove': { 'ui:control': 'remove' }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    ajv={Ajv}\n    schema={schema}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            {
              ajv: ajv_default.a,
              schema: schema,
              onSubmit: function onSubmit(_ref2) {
                var values = _ref2.values;
                return window.alert(JSON.stringify(values, null, 2));
              }
            },
            react_default.a.createElement(
              'div',
              { style: { display: 'flex' } },
              react_default.a.createElement(
                'div',
                { style: { flex: '1' } },
                react_default.a.createElement(src.p, null),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                )
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: '1' } },
                react_default.a.createElement(src.c, { errors: !0, values: !0 })
              )
            )
          );
        }
      );
    },
    963: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        ajv = __webpack_require__(103),
        ajv_default = __webpack_require__.n(ajv),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          required: ['name', 'siblings'],
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            siblings: {
              type: 'array',
              minItems: 2,
              'ui:control': 'array',
              'ui:before': [{ 'ui:control': 'add' }],
              'ui:props': {
                initialValue: [
                  { name: 'Joe', age: 26 },
                  { name: 'Elon', age: 49 }
                ],
                relevant: function relevant(_ref) {
                  var name = _ref.formState.values.name;
                  return !name || name.length < 10;
                }
              },
              items: {
                type: 'object',
                required: ['name', 'age'],
                properties: {
                  'ui:component:remove': { 'ui:control': 'remove' },
                  name: {
                    type: 'string',
                    title: 'Sibling name',
                    'ui:control': 'input',
                    'ui:props': { keepState: !0 }
                  },
                  age: {
                    type: 'number',
                    title: 'Sibling age',
                    minimum: 0,
                    'ui:control': 'input',
                    'ui:props': { keepState: !0, type: 'number' }
                  },
                  married: {
                    type: 'string',
                    title: 'Are you married?',
                    enum: ['yes', 'no'],
                    'ui:control': 'radio',
                    'ui:props': { keepState: !0 }
                  },
                  spouse: {
                    type: 'string',
                    title: 'Spouse name',
                    'ui:control': 'input',
                    'ui:props': {
                      relevant: function relevant(_ref2) {
                        var scope = _ref2.scope;
                        return (
                          'yes' ===
                          _ref2.formApi.getValue(''.concat(scope, '.married'))
                        );
                      },
                      keepStateIfRelevant: !0
                    }
                  }
                }
              }
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Relevant Array Field in Schema !!!\n\n** Note: This is in beta and is subject to change! **\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from 'informed';\nimport Ajv from 'ajv';\n\nconst initialValue = [\n  {\n    name: 'Joe',\n    age: '26'\n  },\n  {\n    name: 'Elon',\n    age: '49'\n  }\n];\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'siblings'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    siblings: {\n      type: 'array',\n      minItems: 2,\n      'ui:control': 'array',\n      'ui:before': [{ 'ui:control': 'add' }],\n      'ui:props': {\n        initialValue,\n        relevant: ({ formState }) => {\n          const { name } = formState.values;\n          return !name || name.length < 10;\n        }\n      },\n      items: {\n        type: 'object',\n        required: ['name', 'age'],\n        properties: {\n          'ui:component:remove': { 'ui:control': 'remove' },\n          name: {\n            type: 'string',\n            title: 'Sibling name',\n            'ui:control': 'input',\n            'ui:props': {\n              keepState: true\n            }\n          },\n          age: {\n            type: 'number',\n            title: 'Sibling age',\n            minimum: 0,\n            'ui:control': 'input',\n            'ui:props': {\n              keepState: true,\n              type: 'number'\n            }\n          },\n          married: {\n            type: 'string',\n            title: 'Are you married?',\n            enum: ['yes', 'no'],\n            'ui:control': 'radio',\n            'ui:props': {\n              keepState: true\n            }\n          },\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input',\n            'ui:props': {\n              relevant: ({ scope, formApi }) => {\n                const married = formApi.getValue(`${scope}.married`);\n                return married === 'yes';\n              },\n              keepStateIfRelevant: true\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    ajv={Ajv}\n    schema={schema}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            {
              ajv: ajv_default.a,
              schema: schema,
              onSubmit: function onSubmit(_ref3) {
                var values = _ref3.values;
                return window.alert(JSON.stringify(values, null, 2));
              }
            },
            react_default.a.createElement(
              'div',
              { style: { display: 'flex' } },
              react_default.a.createElement(
                'div',
                { style: { flex: '1' } },
                react_default.a.createElement(src.p, null),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                )
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: '1' } },
                react_default.a.createElement(src.c, { errors: !0, values: !0 })
              )
            )
          );
        }
      );
    },
    964: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        ajv = __webpack_require__(103),
        ajv_default = __webpack_require__.n(ajv),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          required: ['name', 'siblings'],
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            siblings: {
              type: 'array',
              minItems: 2,
              'ui:control': 'array',
              'ui:before': [
                { 'ui:control': 'add', 'ui:props': { text: 'Add Sibling' } }
              ],
              'ui:props': {
                initialValue: [
                  { name: 'Joe', age: '26', friends: [{ name: 'Andres' }] },
                  { name: 'Elon', age: '49', friends: [{ name: 'Kimbal' }] }
                ]
              },
              items: {
                type: 'object',
                required: ['name', 'age'],
                properties: {
                  'ui:component:remove': {
                    'ui:control': 'remove',
                    'ui:props': { text: 'Remove Sibling' }
                  },
                  name: {
                    type: 'string',
                    title: 'Sibling name',
                    'ui:control': 'input'
                  },
                  age: {
                    type: 'number',
                    title: 'Sibling age',
                    'ui:control': 'input'
                  },
                  married: {
                    type: 'string',
                    title: 'Are you married?',
                    enum: ['yes', 'no'],
                    'ui:control': 'radio'
                  },
                  spouse: {
                    type: 'string',
                    title: 'Spouse name',
                    'ui:control': 'input',
                    'ui:props': {
                      relevant: function relevant(_ref) {
                        var scope = _ref.scope;
                        return (
                          'yes' ===
                          _ref.formApi.getValue(''.concat(scope, '.married'))
                        );
                      }
                    }
                  },
                  friends: {
                    type: 'array',
                    minItems: 2,
                    'ui:control': 'array',
                    'ui:before': [
                      {
                        'ui:control': 'add',
                        'ui:props': { text: 'Add Friend' }
                      }
                    ],
                    items: {
                      type: 'object',
                      required: ['name'],
                      properties: {
                        'ui:component:remove': {
                          'ui:control': 'remove',
                          'ui:props': { text: 'Remove Friend' }
                        },
                        name: {
                          type: 'string',
                          title: 'Friends name',
                          'ui:control': 'input'
                        },
                        married: {
                          type: 'string',
                          title: 'Married?',
                          enum: ['yes', 'no'],
                          'ui:control': 'radio'
                        },
                        spouse: {
                          type: 'string',
                          title: 'Spouse',
                          'ui:control': 'input',
                          'ui:props': {
                            relevant: function relevant(_ref2) {
                              var scope = _ref2.scope;
                              return (
                                'yes' ===
                                _ref2.formApi.getValue(
                                  ''.concat(scope, '.married')
                                )
                              );
                            },
                            keepState: !0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Double Nested Array Fields\n\n** Note: This is in beta and is subject to change! **\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from 'informed';\nimport Ajv from 'ajv';\n\nconst initialValue = [\n  {\n    name: 'Joe',\n    age: '26',\n    friends: [\n      {\n        name: 'Andres'\n      }\n    ]\n  },\n  {\n    name: 'Elon',\n    age: '49',\n    friends: [\n      {\n        name: 'Kimbal'\n      }\n    ]\n  }\n];\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'siblings'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    siblings: {\n      type: 'array',\n      minItems: 2,\n      'ui:control': 'array',\n      'ui:before': [\n        { 'ui:control': 'add', 'ui:props': { text: 'Add Sibling' } }\n      ],\n      'ui:props': {\n        initialValue\n      },\n      items: {\n        type: 'object',\n        required: ['name', 'age'],\n        properties: {\n          'ui:component:remove': {\n            'ui:control': 'remove',\n            'ui:props': { text: 'Remove Sibling' }\n          },\n          name: {\n            type: 'string',\n            title: 'Sibling name',\n            'ui:control': 'input'\n          },\n          age: {\n            type: 'number',\n            title: 'Sibling age',\n            'ui:control': 'input'\n          },\n          married: {\n            type: 'string',\n            title: 'Are you married?',\n            enum: ['yes', 'no'],\n            'ui:control': 'radio'\n          },\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input',\n            'ui:props': {\n              relevant: ({ scope, formApi }) => {\n                const married = formApi.getValue(`${scope}.married`);\n                return married === 'yes';\n              }\n            }\n          },\n          friends: {\n            type: 'array',\n            minItems: 2,\n            'ui:control': 'array',\n            'ui:before': [\n              { 'ui:control': 'add', 'ui:props': { text: 'Add Friend' } }\n            ],\n            items: {\n              type: 'object',\n              required: ['name'],\n              properties: {\n                'ui:component:remove': {\n                  'ui:control': 'remove',\n                  'ui:props': { text: 'Remove Friend' }\n                },\n                name: {\n                  type: 'string',\n                  title: 'Friends name',\n                  'ui:control': 'input'\n                },\n                married: {\n                  type: 'string',\n                  title: 'Married?',\n                  enum: ['yes', 'no'],\n                  'ui:control': 'radio'\n                },\n                spouse: {\n                  type: 'string',\n                  title: 'Spouse',\n                  'ui:control': 'input',\n                  'ui:props': {\n                    relevant: ({ scope, formApi }) => {\n                      const married = formApi.getValue(`${scope}.married`);\n                      return married === 'yes';\n                    },\n                    keepState: true\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    schema={schema}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            {
              ajv: ajv_default.a,
              schema: schema,
              onSubmit: function onSubmit(_ref3) {
                var values = _ref3.values;
                return window.alert(JSON.stringify(values, null, 2));
              }
            },
            react_default.a.createElement(
              'div',
              { style: { display: 'flex' } },
              react_default.a.createElement(
                'div',
                { style: { flex: '1' } },
                react_default.a.createElement(src.p, null),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                )
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: '1' } },
                react_default.a.createElement(src.c, { errors: !0, values: !0 })
              )
            )
          );
        }
      );
    },
    965: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        _excluded = ['children'],
        _excluded2 = ['label'],
        _excluded3 = ['label'],
        _excluded4 = ['label', 'children', 'options'],
        _excluded5 = ['name', 'items'];
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ownKeys(Object(source), !0).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function _extends() {
        return (
          (_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          _extends.apply(this, arguments)
        );
      }
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var CustomSchema_Form = function Form(_ref) {
          var children = _ref.children,
            rest = _objectWithoutProperties(_ref, _excluded),
            _useForm = Object(src.z)(rest),
            formController = _useForm.formController,
            render = _useForm.render,
            userProps = _useForm.userProps;
          return render(
            react_default.a.createElement(
              'form',
              _extends({}, userProps, { onSubmit: formController.submitForm }),
              children
            )
          );
        },
        CustomSchema_AddButton = function AddButton() {
          var add = Object(src.t)().add;
          return react_default.a.createElement(
            'button',
            {
              onClick: function onClick() {
                add();
              },
              type: 'button'
            },
            'Add'
          );
        },
        CustomSchema_RemoveButton = function RemoveButton() {
          var remove = Object(src.u)().remove;
          return react_default.a.createElement(
            'button',
            {
              onClick: function onClick() {
                remove();
              },
              type: 'button'
            },
            'Remove'
          );
        },
        adapter = {
          select: function Select(_ref4) {
            var label = _ref4.label,
              children = _ref4.children,
              options = _ref4.options,
              props = _objectWithoutProperties(_ref4, _excluded4),
              _useField3 = Object(src.w)(
                _objectSpread({ type: 'select' }, props)
              ),
              render = _useField3.render,
              informed = _useField3.informed,
              userProps = _useField3.userProps,
              ref = _useField3.ref;
            return render(
              react_default.a.createElement(
                'label',
                null,
                label,
                react_default.a.createElement(
                  'select',
                  _extends({ ref: ref }, informed, userProps),
                  options
                    ? options.map(function(option) {
                        return react_default.a.createElement(
                          'option',
                          {
                            key: option.value,
                            value: option.value,
                            disabled: option.disabled
                          },
                          option.label
                        );
                      })
                    : children
                )
              )
            );
          },
          input: function Input(_ref2) {
            var label = _ref2.label,
              props = _objectWithoutProperties(_ref2, _excluded2),
              _useField = Object(src.w)(_objectSpread({ type: 'text' }, props)),
              render = _useField.render,
              informed = _useField.informed,
              userProps = _useField.userProps,
              ref = _useField.ref;
            return render(
              react_default.a.createElement(
                'label',
                null,
                label,
                react_default.a.createElement(
                  'input',
                  _extends({ ref: ref }, informed, userProps)
                )
              )
            );
          },
          checkbox: function Checkbox(_ref3) {
            var label = _ref3.label,
              props = _objectWithoutProperties(_ref3, _excluded3),
              _useField2 = Object(src.w)(
                _objectSpread({ type: 'checkbox' }, props)
              ),
              render = _useField2.render,
              informed = _useField2.informed,
              userProps = _useField2.userProps,
              ref = _useField2.ref;
            return render(
              react_default.a.createElement(
                'label',
                null,
                label,
                react_default.a.createElement(
                  'input',
                  _extends({ ref: ref }, informed, userProps)
                )
              )
            );
          },
          add: CustomSchema_AddButton,
          remove: CustomSchema_RemoveButton,
          array: function MyArrayField(_ref5) {
            var name = _ref5.name,
              items = _ref5.items,
              props = _objectWithoutProperties(_ref5, _excluded5);
            return react_default.a.createElement(
              src.a,
              _extends({ name: name }, props),
              react_default.a.createElement(CustomSchema_AddButton, null),
              react_default.a.createElement(src.a.Items, null, function() {
                return react_default.a.createElement(
                  react_default.a.Fragment,
                  null,
                  react_default.a.createElement(src.h, { schema: items }),
                  react_default.a.createElement(CustomSchema_RemoveButton, null)
                );
              })
            );
          }
        },
        schema = {
          type: 'object',
          required: ['name', 'siblings'],
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            authorize: {
              type: 'string',
              title: 'Authorize',
              'ui:control': 'checkbox'
            },
            model: {
              type: 'boolean',
              title: 'Model',
              'ui:control': 'select',
              oneOf: [
                { const: 'ms', title: 'Model S' },
                { const: 'm3', title: 'Model 3' },
                { const: 'mx', title: 'Model X' },
                { const: 'my', title: 'Model Y' }
              ],
              'ui:props': { initialValue: 'm3' }
            },
            siblings: {
              type: 'array',
              minItems: 2,
              'ui:control': 'array',
              'ui:props': {
                initialValue: [
                  { name: 'Joe', age: '26' },
                  { name: 'Elon', age: '49' }
                ]
              },
              items: {
                type: 'object',
                required: ['name', 'age'],
                properties: {
                  name: {
                    type: 'string',
                    title: 'Sibling name',
                    'ui:control': 'input'
                  },
                  age: {
                    type: 'number',
                    title: 'Sibling age',
                    minimum: 0,
                    'ui:control': 'input',
                    'ui:props': { type: 'number' }
                  }
                }
              }
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Custom Schema\n\nInformed comes with a custom schema adapter that maps field types to actual JSX elements.\n\nWhenever you create your own inputs, you have to create or add to informds `fieldMap`.\n\n```jsx\nimport {\n  useForm,\n  useField,\n  useArrayFieldApi,\n  useArrayFieldItemApi,\n  ArrayField,\n  FormComponents,\n  FormFields,\n  Relevant,\n  Debug\n} from 'informed';\n\n// Step 1. Build your form component ---------------------\n\nconst Form = ({ children, ...rest }) => {\n  const { formController, render, userProps } = useForm(rest);\n\n  return render(\n    <form {...userProps} onSubmit={formController.submitForm}>\n      {children}\n    </form>\n  );\n};\n\n// Step 2. Build your input components --------------------\n\nconst Input = ({ label, ...props }) => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'text',\n    ...props\n  });\n\n  return render(\n    <label>\n      {label}\n      <input ref={ref} {...informed} {...userProps} />\n    </label>\n  );\n};\n\nconst Checkbox = ({ label, ...props }) => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'checkbox',\n    ...props\n  });\n\n  return render(\n    <label>\n      {label}\n      <input ref={ref} {...informed} {...userProps} />\n    </label>\n  );\n};\n\nconst Select = ({ label, children, options, ...props }) => {\n  const { render, informed, userProps, ref } = useField({\n    type: 'select',\n    ...props\n  });\n\n  return render(\n    <label>\n      {label}\n      <select ref={ref} {...informed} {...userProps}>\n        {options\n          ? options.map(option => (\n              <option\n                key={option.value}\n                value={option.value}\n                disabled={option.disabled}>\n                {option.label}\n              </option>\n            ))\n          : children}\n      </select>\n    </label>\n  );\n};\n\nconst AddButton = () => {\n  const { add } = useArrayFieldApi();\n\n  return (\n    <button\n      onClick={() => {\n        add();\n      }}\n      type=\"button\">\n      Add\n    </button>\n  );\n};\n\nconst RemoveButton = () => {\n  const { remove } = useArrayFieldItemApi();\n\n  return (\n    <button\n      onClick={() => {\n        remove();\n      }}\n      type=\"button\">\n      Remove\n    </button>\n  );\n};\n\nconst MyArrayField = ({ name, items, ...props }) => {\n  return (\n    <ArrayField name={name} {...props}>\n      <AddButton />\n      <ArrayField.Items>\n        {() => (\n          <>\n            <FormFields schema={items} />\n            <RemoveButton />\n          </>\n        )}\n      </ArrayField.Items>\n    </ArrayField>\n  );\n};\n\n// Step 3. Define your field map --------------------\n\nconst adapter = {\n  select: Select,\n  input: Input,\n  checkbox: Checkbox,\n  add: AddButton,\n  remove: RemoveButton,\n  array: MyArrayField\n};\n\n// Step 4. Build your forms!! -----------------------\n\nconst initialValue = [\n  {\n    name: 'Joe',\n    age: '26'\n  },\n  {\n    name: 'Elon',\n    age: '49'\n  }\n];\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'siblings'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    authorize: {\n      type: 'boolean',\n      title: 'Authorize',\n      'ui:control': 'checkbox'\n    },\n    model: {\n      type: 'string',\n      title: 'Model',\n      'ui:control': 'select',\n      oneOf: [\n        { const: 'ms', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      'ui:props': {\n        initialValue: 'm3'\n      }\n    },\n    siblings: {\n      type: 'array',\n      minItems: 2,\n      'ui:control': 'array',\n      'ui:props': {\n        initialValue\n      },\n      items: {\n        type: 'object',\n        required: ['name', 'age'],\n        properties: {\n          name: {\n            type: 'string',\n            title: 'Sibling name',\n            'ui:control': 'input'\n          },\n          age: {\n            type: 'number',\n            title: 'Sibling age',\n            minimum: 0,\n            'ui:control': 'input',\n            'ui:props': {\n              type: 'number'\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form schema={schema} adapter={adapter}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n\n\x3c!-- STORY --\x3e\n",
        function Schema() {
          return react_default.a.createElement(
            CustomSchema_Form,
            { schema: schema, adapter: adapter },
            react_default.a.createElement(src.p, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, null)
          );
        }
      );
    },
    966: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        Big_MyButton = function MyButton() {
          var formApi = Object(src.A)();
          return react_default.a.createElement(
            'button',
            { type: 'button', onClick: formApi.reset },
            'Reset'
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Complex Form\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, useFormApi } from 'informed';\n```\n",
        function Big() {
          return react_default.a.createElement(
            src.f,
            null,
            react_default.a.createElement(
              'div',
              { style: { display: 'flex' } },
              react_default.a.createElement(
                'div',
                { style: { flex: '1' } },
                react_default.a.createElement(Big_MyButton, null),
                Array.from(Array(250)).map(function(_, i) {
                  return react_default.a.createElement(
                    react_default.a.Fragment,
                    null,
                    react_default.a.createElement(
                      'label',
                      { key: 'big-'.concat(i) },
                      'First name:',
                      react_default.a.createElement(src.j, {
                        name: 'field-'.concat(i)
                      })
                    )
                  );
                }),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                )
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: '1' } },
                react_default.a.createElement(src.c, null)
              )
            )
          );
        }
      );
    },
    967: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        validate = function validate(value) {
          return !value || value.length < 5
            ? 'Field must be at least five characters'
            : void 0;
        },
        validateForm = function validateForm(values) {
          return 'Joseph' === values.name
            ? 'Username is already taken!'
            : void 0;
        };
      __webpack_exports__.a = Object(withDocs.a)(
        '# Form State\n\n**`Informed` takes care of state so you don\'t have to!**\n\nBelow is a table that describes each value within a forms state.\n\n**Note:** Initial value is the default value for an attribute, and derived describes\nwhether or not the attribute is derived from other attributes. For example,\ninvalid is derived from the errors attribute and therefore cannot be set directly.\n\n| Attribute     | Example            | Initial Value | Description                                                                                                                                              |\n| ------------- | ------------------ | ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| values        | `{name:\'Joe\'}`     | `{}`          | Key value pair where key is the form field and value is the value entered or selected.                                                                   |\n| maskedValues  | `{name:\'Joe\'}`     | `{}`          | Key value pair where key is the form field and value is the value entered or selected after formatting has occurred.                                     |\n| initialValues | `{name:\'Joe\'}`     | `{}`          | Key value pair where key is the form field and value is an initial value for that field                                                                  |\n| touched       | `{name:true}`      | `{}`          | Key value pair where key is the form field and value is true or undefined ( touched or untouched ). Submitting form will cause all fields to be touched. |\n| errors        | `{name:\'Invalid\'}` | `{}`          | Key value pair where key is the form field and value is the error associated with that field.                                                            |\n| dirt          | `{name:true}`      | `{}`          | Key value pair where key is the form field and value is true or undefined ( dirty or pristine ).                                                         |\n| focused       | `{name:true}`      | `{}`          | Key value pair where key is the form field and value is true or undefined ( focused or unfocused ). PAST TENSE! ( true if it was focused at one point)   |\n| invalid       | `true`             | `false`       | Boolean that is true when form is invalid. A form is invalid when any of its inputs fails its validation function ( if there are errors ).               |\n| valid         | `true`             | `true`        | Opposite of invalid                                                                                                                                      |\n| pristine      | `true`             | `true`        | Boolean that is true when form is pristine. A form is pristine when no values have changed                                                               |\n| dirty         | `true`             | `false`       | Boolean that is true when pristine is false                                                                                                              |\n| submitted     | `true`             | `false`       | Boolean that is true when the form has been successfully submitted                                                                                       |\n| submitting    | `true`             | `false`       | Boolean that is true when the form is submitting ( may happen during async validation)                                                                   |\n| validating    | 1                  | 0             | Integer that represents how many fields are currently asynchronously validating                                                                          |  |\n\n**"Ok so informed takes care of state so I dont have to.. but how do i get my hands\non this state??**\n\nThats a great question! There are many ways so lets take a look at a few!\n\nBelow is an example that shows you how to access the form state and render out\nthe values that are changing.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, FormStateAccessor } from \'informed\';\n\nconst validate = value => {\n  return !value || value.length < 5\n    ? \'Field must be longer than five characters\'\n    : undefined;\n};\n\nconst validateForm = values => {\n  return values.name === \'Joseph\' ? \'Username is already taken!\' : undefined;\n};\n\n<Form validate={validateForm}>\n  <label>\n    First name:\n    <Input name="name" validate={validate} />\n  </label>\n  <button type="submit">Submit</button>\n  <label>State:</label>\n  <FormStateAccessor>\n    {formState => (\n      <pre>\n        <code>{JSON.stringify(formState, null, 2)}</code>\n      </pre>\n    )}\n  </FormStateAccessor>\n</Form>;\n```\n\n### What is this magic?\n\nIts not magic, its a Function As A Child, or otherwise known as [render props](https://reactjs.org/docs/render-props.html)\n\nThere are a few ways you can get access to `Informed`s form state.\n\n1. By accessing the `formState` as a parameter to a child render function via `FormStateAccess`.\n\n```jsx\n<Form validate={validateForm}>\n  <label>\n    First name:\n    <Input name="name" validate={validate} />\n  </label>\n  <button type="submit">Submit</button>\n  <label>State:</label>\n  <FormStateAccessor>\n    {formState => (\n      <pre>\n        <code>{JSON.stringify(formState, null, 2)}</code>\n      </pre>\n    )}\n  </FormStateAccessor>\n</Form>\n```\n\n<br/>\n2) By accessing the `formState` via Hooks!\n<br/>\n\n```jsx\nconst FormState = () => {\n  const formState = useFormState();\n  return (\n    <label>Values:</label>\n    <code>{JSON.stringify(formState.values)}</code>\n    <label>Touched:</label>\n    <code>{JSON.stringify(formState.touched)}</code>\n  );\n};\n\n<Form>\n  <div>\n    <Input field="hello" />\n    <button type="submit">Submit</button>\n    <Debug />\n  </div>\n</Form>\n```\n\n3. By accessing the `formState` as a parameter to a child render function.\n\n```jsx\n<Form>\n  {({ formState }) => (\n    <div>\n      <Input field="hello" />\n      <button type="submit">Submit</button>\n      <label>Values:</label>\n      <code>{JSON.stringify(formState.values)}</code>\n      <label>Touched:</label>\n      <code>{JSON.stringify(formState.touched)}</code>\n    </div>\n  )}\n</Form>\n```\n\n<br/>\nSo if you do need access to the form state, any of these methods will work.\n\n### Ok so what if i need the state outside of the `<Form />` ??\n\nDon\'t fret! This is also very simple. You have two options:\n\n1. Use the Forms `onChange` prop.\n\n  <br/>\n\n```jsx\n<Form onChange={formState => console.log(formState)}>\n  <Input field="hello" />\n  <button type="submit">Submit</button>\n</Form>\n```\n\n  <br/>\n  2. Use the Forms `formApiRef` prop, and then use the apis `getState` function.\n  <br/>\n\n```jsx\nimport React, { useRef } from \'react\';\nimport { Form, Input } from \'informed\';\n\nconst MyAwesomeForm = () => {\n  const formApiRef = useRef();\n\n  const handleClick = () => {\n    console.log(formApiRef.current.getState());\n  };\n\n  return (\n    <div>\n      <Form formApiRef={formApiRef}>\n        <Input name="hello" />\n        <button type="submit">Submit</button>\n      </Form>\n      <button onClick={handleClick}>Print Form State</button>\n    </div>\n  );\n};\n```\n',
        function FormStateExample() {
          return react_default.a.createElement(
            src.f,
            { validate: validateForm },
            react_default.a.createElement(
              'label',
              null,
              'First name:',
              react_default.a.createElement(src.j, {
                name: 'name',
                validate: validate
              })
            ),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement('label', null, 'State:'),
            react_default.a.createElement(src.i, null, function(formState) {
              return react_default.a.createElement(
                'pre',
                null,
                react_default.a.createElement(
                  'code',
                  null,
                  JSON.stringify(formState, null, 2)
                )
              );
            })
          );
        }
      );
    },
    968: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Debug Components\n\nSometimes you just want to see whats going on with the form state.\nThis can easily be achieved by rendering Debug components.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, Debug, DebugField } from \'informed\';\n\n<Form>\n  <Input name="name" label="Name:" />\n  <button type="submit">Submit</button>\n  <Debug />\n  <DebugField name="name" />\n</Form>;\n```\n\n## Debugging Logs\n\nIn addition to the exported helpers, informed also comes with internal logging that can be enabled in one of two ways.\n\n#### When running in a browser ( development )\n\n```js\nlocalStorage.debug = \'informed:.*\';\n```\n\n#### When running in node ( unit tests )\n\n```js\nDEBUG = \'informed:.*\';\n```\n',
        function DebugExample() {
          return react_default.a.createElement(
            src.f,
            null,
            react_default.a.createElement(
              'div',
              { style: { display: 'flex' } },
              react_default.a.createElement(
                'div',
                { style: { flex: 2, marginRight: '2rem' } },
                react_default.a.createElement(src.j, {
                  name: 'name',
                  label: 'Name:'
                }),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                )
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: 2, marginLeft: '2rem' } },
                react_default.a.createElement(src.c, null)
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: 2, marginLeft: '2rem' } },
                react_default.a.createElement(src.d, { name: 'name' })
              )
            )
          );
        }
      );
    },
    969: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      __webpack_require__(0);
      var storybook_readme = __webpack_require__(137);
      __webpack_exports__.a = Object(storybook_readme.doc)(
        '# Form Props\n\n`Informed`s Form element can take many props. Below is table that defines what\nprops are available and what they do.\n\n| Name               | Type         | Description                                                                                                                                                                                                                         |\n| ------------------ | ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| children           | node OR func | A function that is given the form api and form state as props parameter FAAC ( Function As A Child ). Or normal JSX children                                                                                                        |\n| onSubmit           | func         | A function that gets called when form is submitted successfully. The function receives the formState as a parameter                                                                                                                 |\n| initialValues      | obj          | Use this if you want to populate the form with initial values.                                                                                                                                                                      |\n| onChange           | func         | Function that gets called when form updates. Function receives the formState as a parameter.                                                                                                                                        |\n| dontPreventDefault | bool         | The default is to always "preventDefault" when a form submits. Pass this to disable "preventingDefault". You would, for example, pass this in when you want to use a good old form submission using action="/foo.php" on your form. |\n| onSubmitFailure    | func         | Function that gets called when submission fails due to errors. Function will receive the formState.                                                                                                                                 |\n| validate           | func         | Function that gets called when form is attempting to submit. Function accepts the values as a parameter and must return either an error or undefined.                                                                               |\n| validateFields     | func         | Function that gets called when form is attempting to submit. Function accepts the values as a parameter and must return an object where the key is the field and the value is an error or undefined                                 |\n| validationSchema   | yup schema   | A yup schema to perform validation                                                                                                                                                                                                  |\n| allowEmptyStrings  | bool         | Enable empty strings in the form values ( by default when you backspace everything in a text field it will remove the value from the values )                                                                                       |\n| preventEnter       | bool         | Prevents the enter key from submitting the form                                                                                                                                                                                     |\n| onReset            | func         | Function that gets called when form is reset.                                                                                                                                                                                       |\n| schema             | object       | A valid JSON Schema used for validation OR Rendering                                                                                                                                                                                |\n| ajv                | object       | Instance of AJV for informed to use to validate                                                                                                                                                                                     |\n'
      );
    },
    970: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        Basic_Info = function Info() {
          var next = Object(src.C)().next;
          return react_default.a.createElement(
            src.k.Step,
            { step: 'info' },
            react_default.a.createElement(src.j, {
              name: 'first',
              label: 'First Name',
              required: !0
            }),
            react_default.a.createElement(src.j, {
              name: 'last',
              label: 'First Name',
              required: !0
            }),
            react_default.a.createElement(
              'button',
              { type: 'button', onClick: next },
              'Next'
            )
          );
        },
        Basic_Favorite = function Favorite() {
          var _useMultistepApi2 = Object(src.C)(),
            next = _useMultistepApi2.next,
            previous = _useMultistepApi2.previous;
          return react_default.a.createElement(
            src.k.Step,
            { step: 'favorite' },
            react_default.a.createElement(src.j, {
              name: 'color',
              label: 'Favorite Color:',
              required: !0
            }),
            react_default.a.createElement(src.j, {
              name: 'food',
              label: 'Favorite Food:',
              required: !0
            }),
            react_default.a.createElement(
              'div',
              { className: 'button-group' },
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: previous },
                'Previous'
              ),
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: next },
                'Next'
              )
            )
          );
        },
        Basic_Additional = function Additional() {
          var previous = Object(src.C)().previous;
          return react_default.a.createElement(
            src.k.Step,
            { step: 'additional' },
            react_default.a.createElement(src.j, {
              name: 'height',
              label: 'Height:',
              required: !0
            }),
            react_default.a.createElement(src.j, {
              name: 'weight',
              label: 'Weight:',
              required: !0
            }),
            react_default.a.createElement(
              'div',
              { className: 'button-group' },
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: previous },
                'Previous'
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              )
            )
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        '# Multistep Forms\n\nSometimes you have forms with multiple steps.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport {\n  Form,\n  Input,\n  Multistep,\n  Checkbox,\n  Debug,\n  useMultistepApi\n} from \'informed\';\n\nconst Info = () => {\n  const { next } = useMultistepApi();\n  return (\n    <Multistep.Step step="info">\n      <Input name="first" label="First Name" required />\n      <Input name="last" label="First Name" required />\n      <button type="button" onClick={next}>\n        Next\n      </button>\n    </Multistep.Step>\n  );\n};\n\nconst Favorite = () => {\n  const { next, previous } = useMultistepApi();\n  return (\n    <Multistep.Step step="favorite">\n      <Input name="color" label="Favorite Color:" required />\n      <Input name="food" label="Favorite Food:" required />\n      <div className="button-group">\n        <button type="button" onClick={previous}>\n          Previous\n        </button>\n        <button type="button" onClick={next}>\n          Next\n        </button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Additional = () => {\n  const { previous } = useMultistepApi();\n  return (\n    <Multistep.Step step="additional">\n      <Input name="height" label="Height:" required />\n      <Input name="weight" label="Weight:" required />\n      <div className="button-group">\n        <button type="button" onClick={previous}>\n          Previous\n        </button>\n        <button type="submit">Submit</button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Example = () => {\n  return (\n    <Form autocomplete="off">\n      <Multistep>\n        <Info />\n        <Favorite />\n        <Additional />\n      </Multistep>\n      <Debug />\n    </Form>\n  );\n};\n```\n',
        function Basic() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              { autocomplete: 'off' },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex', flexWrap: 'wrap' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '2rem' } },
                  react_default.a.createElement(
                    src.k,
                    null,
                    react_default.a.createElement(
                      'div',
                      { style: { padding: '10px', marginBottom: '10px' } },
                      react_default.a.createElement(Basic_Info, null),
                      react_default.a.createElement(Basic_Favorite, null),
                      react_default.a.createElement(Basic_Additional, null)
                    )
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '300px', marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, null)
                )
              )
            )
          );
        }
      );
    },
    971: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      function _slicedToArray(arr, i) {
        return (
          (function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function _iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o) return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return _arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function _nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function _arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var Complex_Info = function Info() {
          var next = Object(src.C)().next;
          return react_default.a.createElement(
            src.k.Step,
            { step: 'info' },
            react_default.a.createElement(src.j, {
              name: 'first',
              label: 'First Name',
              required: !0
            }),
            react_default.a.createElement(src.j, {
              name: 'last',
              label: 'First Name',
              required: !0
            }),
            react_default.a.createElement(
              'button',
              { type: 'button', onClick: next },
              'Next'
            )
          );
        },
        Complex_Allergic = function Allergic() {
          var _useMultistepApi2 = Object(src.C)(),
            next = _useMultistepApi2.next,
            previous = _useMultistepApi2.previous;
          return react_default.a.createElement(
            src.k.Step,
            { step: 'allergies' },
            react_default.a.createElement(
              'h5',
              null,
              'Are you allergic to any of the following?'
            ),
            react_default.a.createElement(src.b, {
              name: 'peanuts',
              label: 'Peanut butter?:'
            }),
            react_default.a.createElement(src.b, {
              name: 'shellfish',
              label: 'Shellfish:'
            }),
            react_default.a.createElement(
              'div',
              { className: 'button-group' },
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: previous },
                'Previous'
              ),
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: next },
                'Next'
              )
            )
          );
        },
        Complex_EpiPen = function EpiPen() {
          var _useMultistepApi3 = Object(src.C)(),
            next = _useMultistepApi3.next,
            previous = _useMultistepApi3.previous;
          return react_default.a.createElement(
            src.k.Step,
            {
              step: 'treatment',
              relevant: function relevant(_ref2) {
                var allergies = _ref2.formState.values.allergies;
                return (
                  allergies &&
                  Object.values(allergies).some(function(a) {
                    return !!a;
                  })
                );
              }
            },
            react_default.a.createElement(
              'label',
              null,
              'Do you have an epipen?:',
              react_default.a.createElement(
                src.n,
                { name: 'epipen', required: !0 },
                react_default.a.createElement(src.m, {
                  value: 'yes',
                  label: 'Yes'
                }),
                react_default.a.createElement(src.m, {
                  value: 'no',
                  label: 'No'
                })
              )
            ),
            react_default.a.createElement(
              'div',
              { className: 'button-group' },
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: previous },
                'Previous'
              ),
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: next },
                'Next'
              )
            )
          );
        },
        Complex_Color = function Color() {
          var _useMultistepApi4 = Object(src.C)(),
            next = _useMultistepApi4.next,
            previous = _useMultistepApi4.previous,
            nextStep = Object(src.D)().nextStep;
          return react_default.a.createElement(
            src.k.Step,
            { step: 'favorite' },
            react_default.a.createElement(src.j, {
              name: 'color',
              label: 'Favorite Color:',
              required: !0
            }),
            react_default.a.createElement(src.j, {
              name: 'food',
              label: 'Favorite Food:',
              required: !0
            }),
            react_default.a.createElement(src.b, {
              name: 'pet',
              label: 'Do you have a pet?'
            }),
            react_default.a.createElement(
              'div',
              { className: 'button-group' },
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: previous },
                'Previous'
              ),
              nextStep
                ? react_default.a.createElement(
                    'button',
                    { type: 'button', onClick: next },
                    'Next'
                  )
                : null,
              nextStep
                ? null
                : react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
            )
          );
        },
        Complex_Dog = function Dog() {
          var previous = Object(src.C)().previous;
          return react_default.a.createElement(
            src.k.Step,
            {
              step: 'pets',
              previous: 'color',
              relevant: function relevant(_ref3) {
                var favorite = _ref3.formState.values.favorite;
                return null == favorite ? void 0 : favorite.pet;
              }
            },
            react_default.a.createElement(src.b, {
              name: 'hasDog',
              label: 'Do you have a dog?'
            }),
            react_default.a.createElement(
              src.o,
              {
                when: function when(_ref4) {
                  var formApi = _ref4.formApi,
                    scope = _ref4.scope;
                  return formApi.getValue(''.concat(scope, '.hasDog'));
                }
              },
              react_default.a.createElement(src.j, {
                name: 'dogName',
                label: 'Whats your dogs name?',
                required: !0
              })
            ),
            react_default.a.createElement(src.b, {
              name: 'hasCat',
              label: 'Do you have a cat?'
            }),
            react_default.a.createElement(src.j, {
              name: 'catName',
              label: 'Whats your cats name?',
              required: !0,
              relevant: function relevant(_ref5) {
                var formApi = _ref5.formApi,
                  scope = _ref5.scope;
                return formApi.getValue(''.concat(scope, '.hasCat'));
              }
            }),
            react_default.a.createElement(
              'div',
              { className: 'button-group' },
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: previous },
                'Previous'
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              )
            )
          );
        },
        Complex_Buttons = function Buttons() {
          var setCurrent = Object(src.C)().setCurrent;
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              'button',
              {
                type: 'button',
                onClick: function onClick() {
                  return setCurrent('info');
                }
              },
              'Jump2 Info'
            ),
            react_default.a.createElement(
              'button',
              {
                type: 'button',
                onClick: function onClick() {
                  return setCurrent('allergies');
                }
              },
              'Jump2 Allergic'
            ),
            react_default.a.createElement(
              'button',
              {
                type: 'button',
                onClick: function onClick() {
                  return setCurrent('treatment');
                }
              },
              'Jump2 EpiPen'
            ),
            react_default.a.createElement(
              'button',
              {
                type: 'button',
                onClick: function onClick() {
                  return setCurrent('favorite');
                }
              },
              'Jump2 Color'
            ),
            react_default.a.createElement(
              'button',
              {
                type: 'button',
                onClick: function onClick() {
                  return setCurrent('pets');
                }
              },
              'Jump2 Dog'
            )
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        '# Multistep Forms\n\nSomtimes you need to create a form with multiple steps and the steps are dynamic, meaning the next\nsteps depend on the previous steps. This can easliy be done with informed.\nBelow is an example of a form that has four steps. It will not proceed to the next step,\nunless the previous step is valid. In addition it will only validate relevant fields where a fields "relevance"\ncan be defined by a `relevant` function.\n\nThis is hard to describe in words so hopefully the example below helps!\n\n**Hint:** Perform the user flow described below.\n\n1. Click the next button to trigger validation.\n1. Fill out the fields and click next.\n1. Select the checkbox because you\'re allergic to peanut butter, then click next.\n1. Select that you have an epipen, then click next.\n1. Type in your favorite color and food, DONT CLICK NEXT.\n1. You just remembered that you actually are NOT allergic to peanut butter. So Jump back to the allergies question.\n1. Uncheck the checkbox and note how the form state changes! The souse name goes away!\n1. Click next and note how you go to the favorite question instead of the epipen question.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport {\n  Form,\n  Input,\n  Multistep,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  Relevant,\n  Debug,\n  useMultistepApi,\n  useMultistepState\n} from \'informed\';\n\nconst validate = value =>\n  value == null ? \'This field is required\' : undefined;\n\nconst Info = () => {\n  const { next } = useMultistepApi();\n  return (\n    <Multistep.Step step="info">\n      <Input name="first" label="First Name" required />\n      <Input name="last" label="First Name" required />\n      <button type="button" onClick={next}>\n        Next\n      </button>\n    </Multistep.Step>\n  );\n};\n\nconst Allergic = () => {\n  const { next, previous } = useMultistepApi();\n  return (\n    <Multistep.Step step="allergies">\n      <h5>Are you allergic to any of the following?</h5>\n      <Checkbox name="peanuts" label="Peanut butter?:" />\n      <Checkbox name="shellfish" label="Shellfish:" />\n      <div className="button-group">\n        <button type="button" onClick={previous}>\n          Previous\n        </button>\n        <button type="button" onClick={next}>\n          Next\n        </button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst EpiPen = () => {\n  const { next, previous } = useMultistepApi();\n\n  // Only relevant if the person is allergic to something\n  const relevant = ({ formState }) => {\n    const { allergies } = formState.values;\n    return allergies && Object.values(allergies).some(a => !!a);\n  };\n\n  return (\n    <Multistep.Step step="treatment" relevant={relevant}>\n      <label>\n        Do you have an epipen?:\n        <RadioGroup name="epipen" required>\n          <Radio value="yes" label="Yes" />\n          <Radio value="no" label="No" />\n        </RadioGroup>\n      </label>\n      <div className="button-group">\n        <button type="button" onClick={previous}>\n          Previous\n        </button>\n        <button type="button" onClick={next}>\n          Next\n        </button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Color = () => {\n  const { next, previous } = useMultistepApi();\n  const { nextStep } = useMultistepState();\n\n  return (\n    <Multistep.Step step="favorite">\n      <Input name="color" label="Favorite Color:" required />\n      <Input name="food" label="Favorite Food:" required />\n      <Checkbox name="pet" label="Do you have a pet?" />\n      <div className="button-group">\n        <button type="button" onClick={previous}>\n          Previous\n        </button>\n        {nextStep ? (\n          <button type="button" onClick={next}>\n            Next\n          </button>\n        ) : null}\n        {!nextStep ? <button type="submit">Submit</button> : null}\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Dog = () => {\n  const { previous } = useMultistepApi();\n\n  // Only relevant if the person is has a pet\n  const relevant = ({ formState }) => {\n    const { favorite } = formState.values;\n    return favorite?.pet;\n  };\n\n  return (\n    <Multistep.Step step="pets" previous="color" relevant={relevant}>\n      <Checkbox name="hasDog" label="Do you have a dog?" />\n      <Relevant\n        when={({ formApi, scope }) => formApi.getValue(`${scope}.hasDog`)}>\n        <Input name="dogName" label="Whats your dogs name?" required />\n      </Relevant>\n      <Checkbox name="hasCat" label="Do you have a cat?" />\n      <Input\n        name="catName"\n        label="Whats your cats name?"\n        required\n        relevant={({ formApi, scope }) => formApi.getValue(`${scope}.hasCat`)}\n      />\n      <div className="button-group">\n        <button type="button" onClick={previous}>\n          Previous\n        </button>\n        <button type="submit">Submit</button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Buttons = () => {\n  const { setCurrent } = useMultistepApi();\n\n  return (\n    <div>\n      <button type="button" onClick={() => setCurrent(\'info\')}>\n        Jump2 Info\n      </button>\n      <button type="button" onClick={() => setCurrent(\'allergies\')}>\n        Jump2 Allergic\n      </button>\n      <button type="button" onClick={() => setCurrent(\'treatment\')}>\n        Jump2 EpiPen\n      </button>\n      <button type="button" onClick={() => setCurrent(\'favorite\')}>\n        Jump2 Color\n      </button>\n      <button type="button" onClick={() => setCurrent(\'pets\')}>\n        Jump2 Dog\n      </button>\n    </div>\n  );\n};\n\nconst Example = () => {\n  return (\n    <Form autocomplete="off">\n      <Multistep>\n        <Info />\n        <Allergic />\n        <EpiPen />\n        <Color />\n        <Dog />\n        <Buttons />\n      </Multistep>\n      <Debug />\n    </Form>\n  );\n};\n```\n',
        function Basic() {
          var _useState2 = _slicedToArray(Object(react.useState)(0), 2),
            state = _useState2[0],
            multistepApiRef = (_useState2[1], Object(react.useRef)());
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              { autocomplete: 'off' },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex', flexWrap: 'wrap' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '2rem' } },
                  react_default.a.createElement(
                    src.k,
                    { multistepApiRef: multistepApiRef },
                    react_default.a.createElement(
                      'div',
                      { style: { padding: '10px', marginBottom: '10px' } },
                      react_default.a.createElement(Complex_Info, null),
                      react_default.a.createElement(Complex_Allergic, {
                        state: state
                      }),
                      react_default.a.createElement(Complex_EpiPen, null),
                      react_default.a.createElement(Complex_Color, null),
                      react_default.a.createElement(Complex_Dog, null)
                    ),
                    react_default.a.createElement(Complex_Buttons, null)
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '300px', marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, null)
                )
              )
            )
          );
        }
      );
    },
    972: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      function _slicedToArray(arr, i) {
        return (
          (function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function _iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o) return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return _arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function _nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function _arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var Actions_Info = function Info() {
          var next = Object(src.C)().next,
            _useState2 = _slicedToArray(Object(react.useState)(!1), 2),
            loading = _useState2[0],
            setLoading = _useState2[1],
            _useState4 = _slicedToArray(Object(react.useState)(), 2),
            error = _useState4[0],
            setError = _useState4[1],
            doSomething = function doSomething(_ref) {
              var first = _ref.values.first;
              return new Promise(function(resolve, reject) {
                setLoading(!0),
                  setTimeout(function() {
                    if (['joe', 'tanner', 'billy', 'bob'].includes(first)) {
                      setLoading(!1);
                      return (
                        setError('That name is taken'),
                        reject('That name is taken')
                      );
                    }
                    if ('reject' === first) {
                      setLoading(!1);
                      var _error2 = 'Unable to validate name.';
                      return setError(_error2), reject(new Error(_error2));
                    }
                    return setLoading(!1), setError(), resolve();
                  }, 2e3);
              });
            };
          return react_default.a.createElement(
            src.k.Step,
            { step: 'info' },
            react_default.a.createElement(src.j, {
              name: 'first',
              label: 'First Name',
              required: !0
            }),
            react_default.a.createElement(src.j, {
              name: 'last',
              label: 'First Name',
              required: !0
            }),
            react_default.a.createElement(
              'button',
              {
                type: 'button',
                onClick: function onClick() {
                  return next(doSomething);
                }
              },
              'Next'
            ),
            loading
              ? react_default.a.createElement(
                  'div',
                  { class: 'loader' },
                  'Loading...'
                )
              : null,
            error
              ? react_default.a.createElement(
                  'div',
                  { style: { color: 'red' } },
                  'Error: ',
                  error
                )
              : null
          );
        },
        Actions_Favorite = function Favorite() {
          var _useMultistepApi2 = Object(src.C)(),
            next = _useMultistepApi2.next,
            previous = _useMultistepApi2.previous;
          return react_default.a.createElement(
            src.k.Step,
            { step: 'favorite' },
            react_default.a.createElement(src.j, {
              name: 'color',
              label: 'Favorite Color:',
              required: !0
            }),
            react_default.a.createElement(src.j, {
              name: 'food',
              label: 'Favorite Food:',
              required: !0
            }),
            react_default.a.createElement(
              'div',
              { className: 'button-group' },
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: previous },
                'Previous'
              ),
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: next },
                'Next'
              )
            )
          );
        },
        Actions_Additional = function Additional() {
          var previous = Object(src.C)().previous;
          return react_default.a.createElement(
            src.k.Step,
            { step: 'additional' },
            react_default.a.createElement(src.j, {
              name: 'height',
              label: 'Height:',
              required: !0
            }),
            react_default.a.createElement(src.j, {
              name: 'weight',
              label: 'Weight:',
              required: !0
            }),
            react_default.a.createElement(
              'div',
              { className: 'button-group' },
              react_default.a.createElement(
                'button',
                { type: 'button', onClick: previous },
                'Previous'
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              )
            )
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        '# Multistep Forms\n\nSomtimes you need to take actions when moving from step A to B.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport {\n  Form,\n  Input,\n  Multistep,\n  Checkbox,\n  Debug,\n  useMultistepApi\n} from \'informed\';\n\nconst Info = () => {\n  const { next } = useMultistepApi();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const doSomething = ({ values }) => {\n    const { first } = values;\n    return new Promise((resolve, reject) => {\n      setLoading(true);\n      setTimeout(() => {\n        // Simulate username check\n        if ([\'joe\', \'tanner\', \'billy\', \'bob\'].includes(first)) {\n          setLoading(false);\n          const error = \'That name is taken\';\n          setError(error);\n          return reject(error);\n        }\n        // Simulate request faulure\n        if (first === \'reject\') {\n          setLoading(false);\n          const error = \'Unable to validate name.\';\n          setError(error);\n          return reject(new Error(error));\n        }\n        setLoading(false);\n        setError();\n        return resolve();\n      }, 2000);\n    });\n  };\n\n  return (\n    <Multistep.Step step="info">\n      <Input\n        name="first"\n        label="First Name"\n        required\n        // asyncValidate={asyncValidate}\n      />\n      <Input name="last" label="First Name" required />\n      <button type="button" onClick={() => next(doSomething)}>\n        Next\n      </button>\n      {loading ? <div class="loader">Loading...</div> : null}\n      {error ? <div style={{ color: \'red\' }}>Error: {error}</div> : null}\n    </Multistep.Step>\n  );\n};\n\nconst Favorite = () => {\n  const { next, previous } = useMultistepApi();\n  return (\n    <Multistep.Step step="favorite">\n      <Input name="color" label="Favorite Color:" required />\n      <Input name="food" label="Favorite Food:" required />\n      <div className="button-group">\n        <button type="button" onClick={previous}>\n          Previous\n        </button>\n        <button type="button" onClick={next}>\n          Next\n        </button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Additional = () => {\n  const { previous } = useMultistepApi();\n  return (\n    <Multistep.Step step="additional">\n      <Input name="height" label="Height:" required />\n      <Input name="weight" label="Weight:" required />\n      <div className="button-group">\n        <button type="button" onClick={previous}>\n          Previous\n        </button>\n        <button type="submit">Submit</button>\n      </div>\n    </Multistep.Step>\n  );\n};\n\nconst Example = () => {\n  return (\n    <Form autocomplete="off">\n      <Multistep>\n        <Info />\n        <Favorite />\n        <Additional />\n      </Multistep>\n      <Debug />\n    </Form>\n  );\n};\n```\n',
        function Basic() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              { autocomplete: 'off' },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex', flexWrap: 'wrap' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 1, marginRight: '2rem' } },
                  react_default.a.createElement(
                    src.k,
                    null,
                    react_default.a.createElement(
                      'div',
                      { style: { padding: '10px', marginBottom: '10px' } },
                      react_default.a.createElement(Actions_Info, null),
                      react_default.a.createElement(Actions_Favorite, null),
                      react_default.a.createElement(Actions_Additional, null)
                    )
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '300px', marginLeft: '3rem' } },
                  react_default.a.createElement(src.c, null)
                )
              )
            )
          );
        }
      );
    },
    973: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = (__webpack_require__(119), __webpack_require__(1));
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var validate = function validate(value) {
          if (!value || value.length < 5)
            return 'Field must be at least five characters';
        },
        SimpleValidation_SimpleValidation = (function(_Component) {
          !(function _inherits(subClass, superClass) {
            if ('function' != typeof superClass && null !== superClass)
              throw new TypeError(
                'Super expression must either be null or a function'
              );
            (subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: { value: subClass, writable: !0, configurable: !0 }
              }
            )),
              superClass && _setPrototypeOf(subClass, superClass);
          })(SimpleValidation, _Component);
          var _super = _createSuper(SimpleValidation);
          function SimpleValidation() {
            return (
              _classCallCheck(this, SimpleValidation),
              _super.apply(this, arguments)
            );
          }
          return (
            (function _createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  _defineProperties(Constructor.prototype, protoProps),
                staticProps && _defineProperties(Constructor, staticProps),
                Constructor
              );
            })(SimpleValidation, [
              {
                key: 'render',
                value: function render() {
                  return react_default.a.createElement(
                    'div',
                    null,
                    react_default.a.createElement(
                      src.f,
                      {
                        onSubmit: function onSubmit(_ref) {
                          var values = _ref.values;
                          return window.alert(JSON.stringify(values, null, 2));
                        }
                      },
                      react_default.a.createElement(
                        'div',
                        { style: { display: 'flex', flexWrap: 'wrap' } },
                        react_default.a.createElement(
                          'div',
                          { style: { flex: 1, marginRight: '2rem' } },
                          react_default.a.createElement(src.j, {
                            name: 'color',
                            label: 'Color:',
                            validate: validate
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'food',
                            label: 'Food:',
                            validate: validate
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'car',
                            label: 'Car:',
                            validate: validate
                          }),
                          react_default.a.createElement(
                            'button',
                            { type: 'submit' },
                            'Submit'
                          )
                        ),
                        react_default.a.createElement(
                          'div',
                          {
                            style: {
                              flex: 2,
                              minWidth: '300px',
                              marginLeft: '3rem'
                            }
                          },
                          react_default.a.createElement(src.c, {
                            values: !0,
                            errors: !0,
                            invalid: !0,
                            valid: !0
                          })
                        )
                      )
                    )
                  );
                }
              }
            ]),
            SimpleValidation
          );
        })(react.Component);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Simple Validation\n\nSimple validation can be achieved by passing a validation function to the input.\nBelow is an example form that has validation functions. The function defined\nwill return an error when the input has less than five characters, or there is\nno value at all, and undefined otherwise. We pass this validation function to every\ninput and validation will **occur on submission**.\n\n**Try clicking the submit button and see what happens:**\n\n\x3c!-- STORY --\x3e\n\nWhat just happened? When you clicked on the submit button all of the validation\nfunctions were triggered for each field. Because every validation failed, the\nform never actually called onSubmit. In other words, informed will only\nsubmit a valid form.\n\n**Get rid of the errors by typing at least 5 characters in each field and\nclick the submit button again and see what happens:**\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, Text } from \'informed\';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return \'Field must be at least five characters\';\n};\n\nconst Example = () => {\n  return (\n    <Form\n      onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n      <Input name="color" label="Color:" validate={validate} />\n      <Input name="food" label="Food:" validate={validate} />\n      <Input name="car" label="Car:" validate={validate} />\n      <button type="submit">Submit</button>\n    </Form>\n  );\n};\n```\n',
        function() {
          return react_default.a.createElement(
            SimpleValidation_SimpleValidation,
            null
          );
        }
      );
    },
    974: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = (__webpack_require__(119), __webpack_require__(1));
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var Required_SimpleValidation = (function(_Component) {
        !(function _inherits(subClass, superClass) {
          if ('function' != typeof superClass && null !== superClass)
            throw new TypeError(
              'Super expression must either be null or a function'
            );
          (subClass.prototype = Object.create(
            superClass && superClass.prototype,
            { constructor: { value: subClass, writable: !0, configurable: !0 } }
          )),
            superClass && _setPrototypeOf(subClass, superClass);
        })(SimpleValidation, _Component);
        var _super = _createSuper(SimpleValidation);
        function SimpleValidation() {
          return (
            _classCallCheck(this, SimpleValidation),
            _super.apply(this, arguments)
          );
        }
        return (
          (function _createClass(Constructor, protoProps, staticProps) {
            return (
              protoProps &&
                _defineProperties(Constructor.prototype, protoProps),
              staticProps && _defineProperties(Constructor, staticProps),
              Constructor
            );
          })(SimpleValidation, [
            {
              key: 'render',
              value: function render() {
                return react_default.a.createElement(
                  'div',
                  null,
                  react_default.a.createElement(
                    src.f,
                    {
                      onSubmit: function onSubmit(_ref) {
                        var values = _ref.values;
                        return window.alert(JSON.stringify(values, null, 2));
                      }
                    },
                    react_default.a.createElement(
                      'div',
                      { style: { display: 'flex', flexWrap: 'wrap' } },
                      react_default.a.createElement(
                        'div',
                        { style: { flex: 1, marginRight: '2rem' } },
                        react_default.a.createElement(src.j, {
                          name: 'name',
                          label: 'First name:',
                          required: !0
                        }),
                        react_default.a.createElement(src.j, {
                          name: 'favorite.color',
                          label: 'Favorite color:',
                          required: !0
                        }),
                        react_default.a.createElement(
                          src.q,
                          { scope: 'favorite' },
                          react_default.a.createElement(src.j, {
                            name: 'food',
                            label: 'Favorite food:',
                            required: !0
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'animal',
                            label: 'Favorite animal:',
                            required: !0
                          })
                        ),
                        react_default.a.createElement(src.j, {
                          name: 'friends[0]',
                          label: 'Friend 1:',
                          required: !0
                        }),
                        react_default.a.createElement(src.j, {
                          name: 'friends[1]',
                          label: 'Friend 2:',
                          required: !0
                        }),
                        react_default.a.createElement(src.j, {
                          name: 'friends[2]',
                          label: 'Friend 3:',
                          required: !0
                        }),
                        react_default.a.createElement(src.s, {
                          name: 'bio',
                          label: 'Bio',
                          required: !0
                        }),
                        react_default.a.createElement(
                          src.n,
                          { name: 'gender', label: 'Gender', required: !0 },
                          react_default.a.createElement(src.m, {
                            value: 'male',
                            label: 'Male:'
                          }),
                          react_default.a.createElement(src.m, {
                            value: 'female',
                            label: 'Female:'
                          })
                        ),
                        react_default.a.createElement(
                          src.r,
                          {
                            name: 'status',
                            label: 'Relationship status:',
                            required: !0
                          },
                          react_default.a.createElement(
                            src.l,
                            { value: '', disabled: !0 },
                            'Select One...'
                          ),
                          react_default.a.createElement(
                            src.l,
                            { value: 'single' },
                            'Single'
                          ),
                          react_default.a.createElement(
                            src.l,
                            { value: 'relationship' },
                            'Relationship'
                          ),
                          react_default.a.createElement(
                            src.l,
                            { value: 'complicated' },
                            'Complicated'
                          )
                        ),
                        react_default.a.createElement(
                          src.r,
                          {
                            name: 'colors',
                            label: 'Colors:',
                            multiple: !0,
                            required: !0,
                            style: { height: '100px', width: '200px' }
                          },
                          react_default.a.createElement(
                            src.l,
                            { value: 'red' },
                            'Red'
                          ),
                          react_default.a.createElement(
                            src.l,
                            { value: 'green' },
                            'Green'
                          ),
                          react_default.a.createElement(
                            src.l,
                            { value: 'blue' },
                            'Blue'
                          ),
                          react_default.a.createElement(
                            src.l,
                            { value: 'yellow' },
                            'Yellow'
                          ),
                          react_default.a.createElement(
                            src.l,
                            { value: 'orange' },
                            'Orange'
                          ),
                          react_default.a.createElement(
                            src.l,
                            { value: 'purple' },
                            'Purple'
                          )
                        ),
                        react_default.a.createElement(src.b, {
                          name: 'authorize',
                          label: 'Authorize:',
                          required: !0
                        }),
                        react_default.a.createElement(
                          'button',
                          { type: 'submit' },
                          'Submit'
                        )
                      ),
                      react_default.a.createElement(
                        'div',
                        {
                          style: {
                            flex: 2,
                            minWidth: '300px',
                            marginLeft: '3rem'
                          }
                        },
                        react_default.a.createElement(src.c, {
                          values: !0,
                          errors: !0,
                          invalid: !0,
                          valid: !0
                        })
                      )
                    )
                  )
                );
              }
            }
          ]),
          SimpleValidation
        );
      })(react.Component);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Required\n\nOne of the most common validation rules is marking a field as required. We make this dead simple for you.\n\n```jsx\nimport {\n  Form,\n  Input,\n  TextArea,\n  RadioGroup,\n  Radio,\n  Select,\n  Option,\n  Checkbox,\n  Scope,\n  Debug\n} from \'informed\';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return \'Field must be at least five characters\';\n};\n\nconst Example = () => (\n  <Form\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <Input name="name" label="First name:" required />\n    <Input name="favorite.color" label="Favorite color:" required />\n    <Scope scope="favorite">\n      <Input name="food" label="Favorite food:" required />\n      <Input name="animal" label="Favorite animal:" required />\n    </Scope>\n    <Input name="friends[0]" label="Friend 1:" required />\n    <Input name="friends[1]" label="Friend 2:" required />\n    <Input name="friends[2]" label="Friend 3:" required />\n    <TextArea name="bio" label="Bio" required />\n    <RadioGroup name="gender" label="Gender" required>\n      <Radio value="male" label="Male:" />\n      <Radio value="female" label="Female:" />\n    </RadioGroup>\n    <Select name="status" label="Relationship status:" required>\n      <Option value="" disabled>\n        Select One...\n      </Option>\n      <Option value="single">Single</Option>\n      <Option value="relationship">Relationship</Option>\n      <Option value="complicated">Complicated</Option>\n    </Select>\n    <Select\n      name="colors"\n      label="Colors:"\n      multiple\n      required\n      style={{ height: \'100px\', width: \'200px\' }}>\n      <Option value="red">Red</Option>\n      <Option value="green">Green</Option>\n      <Option value="blue">Blue</Option>\n      <Option value="yellow">Yellow</Option>\n      <Option value="orange">Orange</Option>\n      <Option value="purple">Purple</Option>\n    </Select>\n    <Checkbox name="authorize" label="Authorize:" required />\n    <button type="submit">Submit</button>\n    <Debug values errors invalid valid />\n  </Form>\n);\n```\n',
        function() {
          return react_default.a.createElement(Required_SimpleValidation, null);
        }
      );
    },
    975: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = (__webpack_require__(119), __webpack_require__(1)),
        es = __webpack_require__(106);
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var SignupSchema = es.a().shape({
          firstName: es
            .b()
            .min(2, 'Too Short!')
            .max(50, 'Too Long!')
            .required('Required'),
          lastName: es
            .b()
            .min(2, 'Too Short!')
            .max(50, 'Too Long!')
            .required('Required'),
          email: es
            .b()
            .email('Invalid email')
            .required('Required')
        }),
        YupValidation_SimpleValidation = (function(_Component) {
          !(function _inherits(subClass, superClass) {
            if ('function' != typeof superClass && null !== superClass)
              throw new TypeError(
                'Super expression must either be null or a function'
              );
            (subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: { value: subClass, writable: !0, configurable: !0 }
              }
            )),
              superClass && _setPrototypeOf(subClass, superClass);
          })(SimpleValidation, _Component);
          var _super = _createSuper(SimpleValidation);
          function SimpleValidation() {
            return (
              _classCallCheck(this, SimpleValidation),
              _super.apply(this, arguments)
            );
          }
          return (
            (function _createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  _defineProperties(Constructor.prototype, protoProps),
                staticProps && _defineProperties(Constructor, staticProps),
                Constructor
              );
            })(SimpleValidation, [
              {
                key: 'render',
                value: function render() {
                  return react_default.a.createElement(
                    'div',
                    null,
                    react_default.a.createElement(
                      src.f,
                      {
                        yupSchema: SignupSchema,
                        onSubmit: function onSubmit(_ref) {
                          var values = _ref.values;
                          return window.alert(JSON.stringify(values, null, 2));
                        }
                      },
                      react_default.a.createElement(
                        'div',
                        { style: { display: 'flex', flexWrap: 'wrap' } },
                        react_default.a.createElement(
                          'div',
                          { style: { flex: 1, marginRight: '2rem' } },
                          react_default.a.createElement(src.j, {
                            name: 'firstName',
                            label: 'First Name:'
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'lastName',
                            label: 'Last Name:'
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'email',
                            label: 'Email:'
                          }),
                          react_default.a.createElement(
                            'button',
                            { type: 'submit' },
                            'Submit'
                          )
                        ),
                        react_default.a.createElement(
                          'div',
                          {
                            style: {
                              flex: 2,
                              minWidth: '300px',
                              marginLeft: '3rem'
                            }
                          },
                          react_default.a.createElement(src.c, {
                            values: !0,
                            errors: !0,
                            invalid: !0,
                            valid: !0
                          })
                        )
                      )
                    )
                  );
                }
              }
            ]),
            SimpleValidation
          );
        })(react.Component);
      __webpack_exports__.a = Object(withDocs.a)(
        "# Yup Validation\n\nValidation via yup can be achieved by passing a validationSchema to the form.\n\n**Try clicking the submit button and see what happens:**\n\n\x3c!-- STORY --\x3e\n\nWhat just happened? When you clicked on the submit button informed triggered validate on the yup schema.\n\n**Get rid of the errors by typing at least 2 characters in each name field and a valid email, then\nclick the submit button again and see what happens:**\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, Text } from 'informed';\nimport * as Yup from 'yup';\n\nconst SignupSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  lastName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required')\n});\n\n<Form\n  yupSchema={SignupSchema}\n  onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n  ><Input name=\"firstName\" label=\"First Name:\" />\n  <Input name=\"lastName\" label=\"Last Name:\" />\n  <Input name=\"email\" label=\"Email:\" />\n  <button type=\"submit\">Submit</button>\n</Form>;\n```\n",
        function() {
          return react_default.a.createElement(
            YupValidation_SimpleValidation,
            null
          );
        }
      );
    },
    976: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = (__webpack_require__(119), __webpack_require__(1)),
        es = __webpack_require__(106);
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var SignupSchema = es.a().shape({
          firstName: es
            .b()
            .min(2, 'Too Short!')
            .max(50, 'Too Long!')
            .required('Required'),
          email: es
            .b()
            .email('Invalid email')
            .required('Required')
        }),
        lastNameSchema = es
          .b()
          .min(2, 'Last Name Too Short!')
          .max(50, 'Last Name Too Long!')
          .required('Last Name Required'),
        FieldLevelYupValidation_SimpleValidation = (function(_Component) {
          !(function _inherits(subClass, superClass) {
            if ('function' != typeof superClass && null !== superClass)
              throw new TypeError(
                'Super expression must either be null or a function'
              );
            (subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: { value: subClass, writable: !0, configurable: !0 }
              }
            )),
              superClass && _setPrototypeOf(subClass, superClass);
          })(SimpleValidation, _Component);
          var _super = _createSuper(SimpleValidation);
          function SimpleValidation() {
            return (
              _classCallCheck(this, SimpleValidation),
              _super.apply(this, arguments)
            );
          }
          return (
            (function _createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  _defineProperties(Constructor.prototype, protoProps),
                staticProps && _defineProperties(Constructor, staticProps),
                Constructor
              );
            })(SimpleValidation, [
              {
                key: 'render',
                value: function render() {
                  return react_default.a.createElement(
                    'div',
                    null,
                    react_default.a.createElement(
                      src.f,
                      {
                        yupSchema: SignupSchema,
                        onSubmit: function onSubmit(_ref) {
                          var values = _ref.values;
                          return window.alert(JSON.stringify(values, null, 2));
                        }
                      },
                      react_default.a.createElement(
                        'div',
                        { style: { display: 'flex', flexWrap: 'wrap' } },
                        react_default.a.createElement(
                          'div',
                          { style: { flex: 1, marginRight: '2rem' } },
                          react_default.a.createElement(src.j, {
                            name: 'firstName',
                            label: 'First Name:'
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'lastName',
                            label: 'Last Name:',
                            yupSchema: lastNameSchema
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'email',
                            label: 'Email:'
                          }),
                          react_default.a.createElement(
                            'button',
                            { type: 'submit' },
                            'Submit'
                          )
                        ),
                        react_default.a.createElement(
                          'div',
                          {
                            style: {
                              flex: 2,
                              minWidth: '300px',
                              marginLeft: '3rem'
                            }
                          },
                          react_default.a.createElement(src.c, {
                            values: !0,
                            errors: !0,
                            invalid: !0,
                            valid: !0
                          })
                        )
                      )
                    )
                  );
                }
              }
            ]),
            SimpleValidation
          );
        })(react.Component);
      __webpack_exports__.a = Object(withDocs.a)(
        "# Field Level Yup Validation\n\nValidation via yup can be achieved at the field level by passing a validationSchema to a field.\n\n**Try clicking the submit button and see what happens:**\n\n\x3c!-- STORY --\x3e\n\nWhat just happened? When you clicked on the submit button informed triggered validate on the yup schema.\nThen it triggered validation at the field level. How cool is that!\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, Text } from 'informed';\nimport * as Yup from 'yup';\n\nconst SignupSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required')\n});\n\nconst lastNameSchema = Yup.string()\n  .min(2, 'Last Name Too Short!')\n  .max(50, 'Last Name Too Long!')\n  .required('Last Name Required');\n\n<Form yupSchema={SignupSchema}>\n  <label>\n    First Name:\n    <Input field=\"firstName\" />\n  </label>\n  <label>\n    Last Name:\n    <Input field=\"lastName\" validationSchema={lastNameSchema} />\n  </label>\n  <label>\n    Email:\n    <Input field=\"email\" />\n  </label>\n  <button type=\"submit\">Submit</button>\n</Form>;\n```\n",
        function() {
          return react_default.a.createElement(
            FieldLevelYupValidation_SimpleValidation,
            null
          );
        }
      );
    },
    977: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = (__webpack_require__(119), __webpack_require__(1));
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var basicValidation = function basicValidation(value) {
          return !value || value.length < 5
            ? 'Field must be at least five characters'
            : void 0;
        },
        friendValidation = function friendValidation(value, values) {
          return (
            basicValidation(value) ||
            (function duplicateValidation(value, values) {
              return values.filter(function(v) {
                return v === value;
              }).length > 1
                ? 'This field must be unique.'
                : void 0;
            })(value, values.friends)
          );
        },
        ComplexValidation_ComplexValidation = (function(_React$Component) {
          !(function _inherits(subClass, superClass) {
            if ('function' != typeof superClass && null !== superClass)
              throw new TypeError(
                'Super expression must either be null or a function'
              );
            (subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: { value: subClass, writable: !0, configurable: !0 }
              }
            )),
              superClass && _setPrototypeOf(subClass, superClass);
          })(ComplexValidation, _React$Component);
          var _super = _createSuper(ComplexValidation);
          function ComplexValidation() {
            return (
              _classCallCheck(this, ComplexValidation),
              _super.apply(this, arguments)
            );
          }
          return (
            (function _createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  _defineProperties(Constructor.prototype, protoProps),
                staticProps && _defineProperties(Constructor, staticProps),
                Constructor
              );
            })(ComplexValidation, [
              {
                key: 'render',
                value: function render() {
                  return react_default.a.createElement(
                    'div',
                    null,
                    react_default.a.createElement(
                      src.f,
                      {
                        onSubmit: function onSubmit(_ref) {
                          var values = _ref.values;
                          return window.alert(JSON.stringify(values, null, 2));
                        }
                      },
                      react_default.a.createElement(
                        'div',
                        { style: { display: 'flex', flexWrap: 'wrap' } },
                        react_default.a.createElement(
                          'div',
                          { style: { flex: 1, marginRight: '2rem' } },
                          react_default.a.createElement(src.j, {
                            name: 'name',
                            label: 'First name:',
                            validate: basicValidation
                          }),
                          react_default.a.createElement(
                            src.q,
                            { scope: 'favorite' },
                            react_default.a.createElement(src.j, {
                              name: 'color',
                              label: 'Favorite color:',
                              validate: basicValidation
                            }),
                            react_default.a.createElement(src.j, {
                              name: 'food',
                              label: 'Favorite food:',
                              validate: basicValidation
                            })
                          ),
                          react_default.a.createElement(src.j, {
                            name: 'friends[0]',
                            label: 'Friend 1:',
                            validate: friendValidation
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'friends[1]',
                            label: 'Friend 2:',
                            validate: friendValidation
                          }),
                          react_default.a.createElement(src.j, {
                            name: 'friends[2]',
                            label: 'Friend 3:',
                            validate: friendValidation
                          }),
                          react_default.a.createElement(
                            'button',
                            { type: 'submit' },
                            'Submit'
                          )
                        ),
                        react_default.a.createElement(
                          'div',
                          {
                            style: {
                              flex: 2,
                              minWidth: '300px',
                              marginLeft: '3rem'
                            }
                          },
                          react_default.a.createElement(src.c, {
                            values: !0,
                            errors: !0,
                            invalid: !0,
                            valid: !0
                          })
                        )
                      )
                    )
                  );
                }
              }
            ]),
            ComplexValidation
          );
        })(react_default.a.Component);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Complex Validation\n\nComplex validation can be achieved by passing a validation function to an input,\nthat also accepts all the values in the form. Below is an example form\nthat has validation functions on each input. The Basic validation function will\nreturn an error when the input has less than five characters, or there is no\nvalue at all, and undefined otherwise. The friendValidation function will show errors\nwhen basic validation fails OR two friends have the same name. We pass the input\nvalidation function to every input and the friendValidation function to the\nfriend fields. Validation will **occur on submission**.\n\n**Try clicking the submit button and see what happens:**\n\n\x3c!-- STORY --\x3e\n\nWhat just happened? When you clicked on the submit button all of the validation\nfunctions were triggered for each field. Because every validation failed, the\nform never actually called onSubmit. In other words, informed will only\nsubmit a valid form.\n\n**Get rid of the errors by typing more than 5 characters in each field and\nalso type "George" in two of the friend fields. Click the submit button again\nand see what happens:**\n\nAll of our basic level validation passed but when the form attempted to submit\nthe additional friend checks failed.\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, Input, Scope } from \'informed\';\n\nconst basicValidation = value => {\n  return !value || value.length < 5\n    ? \'Field must be longer than five characters\'\n    : undefined;\n};\n\nconst duplicateValidation = (value, values) => {\n  return values.filter(v => v === value).length > 1\n    ? \'This field must be unique.\'\n    : undefined;\n};\n\nconst friendValidation = (value, values) => {\n  return basicValidation(value) || duplicateValidation(value, values.friends);\n};\n\nconst Example = () => (\n  <Form id="complex-validate-form">\n    <Input name="name" label="First name:" validate={basicValidation} />\n    <Scope scope="favorite">\n      <Input name="color" label="Favorite color:" validate={basicValidation} />\n      <Input name="food" label="Favorite food:" validate={basicValidation} />\n    </Scope>\n    <Input name="friends[0]" label="Friend 1:" validate={friendValidation} />\n    <Input name="friends[1]" label="Friend 2:" validate={friendValidation} />\n    <Input name="friends[2]" label="Friend 3:" validate={friendValidation} />\n    <button type="submit">Submit</button>\n  </Form>\n);\n```\n',
        function() {
          return react_default.a.createElement(
            ComplexValidation_ComplexValidation,
            null
          );
        }
      );
    },
    978: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = __webpack_require__(1),
        validate = function validate(value) {
          if (!value || value.length < 5)
            return 'Field must be at least five characters';
        },
        asyncValidate = function asyncValidate(username) {
          return new Promise(function(resolve, reject) {
            setTimeout(function() {
              return ['joseph', 'tanner', 'billy', 'bobby'].includes(username)
                ? resolve('That username is taken')
                : 'reject' === username
                  ? reject(new Error('Unable to validate username.'))
                  : resolve();
            }, 2e3);
          });
        };
      __webpack_exports__.a = Object(withDocs.a)(
        '# Validation Control\n\nBy default fields will only validate on blur. To get\nmore granular validation, simply pass in `validateOn` props.\n\nSee table below for mapping:\n\n<br />\n\n| validateOn    | derived       | change       | blur         | submit       | default |\n| ------------- | ------------- | ------------ | ------------ | ------------ | ------- |\n| change        | change-change | sync + async | sync + async | sync + async |         |\n| blur          | blur-blur     | x            | sync + async | sync + async | x       |\n| change-blur   | change-blur   | sync         | sync + async | sync + async |         |\n| change-submit | change-submit | sync         | sync         | sync + async |         |\n| blur-submit   | submit-submit | x            | sync         | sync + async |         |\n| submit        | submit-submit | x            | x            | sync + async |         |\n\n<br />\n\nValidation is controlled via the `validateOn` prop, but in order to control when it shows,\nuse the `showErrorIfError` and `showErrorIfDirty` props. **This is because sometimes you may want the form to be invalid but not show the error to the user yet ( default is `showErrorIfTouched` )**\n\n| prop               | description                                                                                                  | default |\n| ------------------ | ------------------------------------------------------------------------------------------------------------ | ------- |\n| showErrorIfError   | will set `showError` for that field to true whenever there is an error (typically used with validateOnMount) |         |\n| showErrorIfTouched | will set `showError` for that field to true whenever there is an error and the field is touched              | x       |\n| showErrorIfDirty   | will set `showError` for that field to true whenever there is an error and the field is dirty                |         |\n\n<br />\n\nFinally we have a use case for validating right away ( on mount )\n\n| prop            | description                     | default |\n| --------------- | ------------------------------- | ------- |\n| validateOnMount | will trigger validation onMount | false   |\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input } from \'informed\';\n\nconst validate = value => {\n  if (!value || value.length < 5)\n    return \'Field must be at least five characters\';\n};\n\nconst asyncValidate = username => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if ([\'joseph\', \'tanner\', \'billy\', \'bobby\'].includes(username)) {\n        return resolve(\'That username is taken\');\n      }\n      // Simulate request faulure\n      if (username === \'reject\') {\n        return reject(new Error(\'Unable to validate username.\'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst ValidationControl = () => (\n  <div>\n    <Form autocomplete="off">\n      <h4>validateOn="blur" ( default )</h4>\n      <Input\n        name="username1"\n        label="Username1"\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <h4>validateOn="change"</h4>\n      <Input\n        name="username2"\n        label="Username2"\n        validateOn="change"\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <h4>validateOn="change" && showErrorIfDirty</h4>\n      <Input\n        name="username3"\n        label="Username3"\n        validateOn="change"\n        showErrorIfDirty\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <h4>validateOn="change-blur"</h4>\n      <Input\n        name="username4"\n        label="Username4"\n        validateOn="change-blur"\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <h4>validateOn="change-submit"</h4>\n      <Input\n        name="username5"\n        label="Username5"\n        validateOn="change-submit"\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <h4>validateOn="blur-submit"</h4>\n      <Input\n        name="username6"\n        label="Username6"\n        validateOn="blur-submit"\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <h4>validateOn="submit"</h4>\n      <Input\n        name="username7"\n        label="Username7"\n        validateOn="submit"\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <h4>validateOnMount</h4>\n      <Input\n        name="username8"\n        label="Username8"\n        validateOnMount\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <h4>validateOnMount && showErrorIfError</h4>\n      <Input\n        name="username9"\n        label="Username9"\n        validateOnMount\n        showErrorIfError\n        required\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <button type="submit">Submit</button>\n      <Debug values errors invalid validating />\n    </Form>\n  </div>\n);\n```\n',
        function ValidationControl() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              { autocomplete: 'off' },
              function(_ref) {
                _ref.formApi, _ref.formState;
                return react_default.a.createElement(
                  'div',
                  { style: { display: 'flex', flexWrap: 'wrap' } },
                  react_default.a.createElement(
                    'div',
                    { style: { flex: 1, marginRight: '2rem' } },
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOn="blur" ( default )'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username1',
                      label: 'Username1',
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOn="change"'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username2',
                      label: 'Username2',
                      validateOn: 'change',
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOn="change" && showErrorIfDirty'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username3',
                      label: 'Username3',
                      validateOn: 'change',
                      showErrorIfDirty: !0,
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOn="change-blur"'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username4',
                      label: 'Username4',
                      validateOn: 'change-blur',
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOn="change-submit"'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username5',
                      label: 'Username5',
                      validateOn: 'change-submit',
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOn="blur-submit"'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username6',
                      label: 'Username6',
                      validateOn: 'blur-submit',
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOn="submit"'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username7',
                      label: 'Username7',
                      validateOn: 'submit',
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOnMount'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username8',
                      label: 'Username8',
                      validateOnMount: !0,
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'h4',
                      null,
                      'validateOnMount && showErrorIfError'
                    ),
                    react_default.a.createElement(src.j, {
                      name: 'username9',
                      label: 'Username9',
                      validateOnMount: !0,
                      showErrorIfError: !0,
                      required: !0,
                      validate: validate,
                      asyncValidate: asyncValidate
                    }),
                    react_default.a.createElement(
                      'button',
                      { type: 'submit' },
                      'Submit'
                    )
                  ),
                  react_default.a.createElement(
                    'div',
                    {
                      style: { flex: 2, minWidth: '300px', marginLeft: '3rem' }
                    },
                    react_default.a.createElement(src.c, {
                      values: !0,
                      errors: !0,
                      invalid: !0,
                      validating: !0
                    })
                  )
                );
              }
            )
          );
        }
      );
    },
    979: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = (__webpack_require__(119), __webpack_require__(1));
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var validate = src.e.inspect([
          function(value, values) {
            if ('US' === values.country && !value)
              return 'this field should not be empty when in the US';
          },
          function(value, values) {
            if (value && value.length < 2)
              return 'this field should contain more than 2 characters';
          }
        ]),
        Elon_SimpleValidation = (function(_Component) {
          !(function _inherits(subClass, superClass) {
            if ('function' != typeof superClass && null !== superClass)
              throw new TypeError(
                'Super expression must either be null or a function'
              );
            (subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: { value: subClass, writable: !0, configurable: !0 }
              }
            )),
              superClass && _setPrototypeOf(subClass, superClass);
          })(SimpleValidation, _Component);
          var _super = _createSuper(SimpleValidation);
          function SimpleValidation() {
            return (
              _classCallCheck(this, SimpleValidation),
              _super.apply(this, arguments)
            );
          }
          return (
            (function _createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  _defineProperties(Constructor.prototype, protoProps),
                staticProps && _defineProperties(Constructor, staticProps),
                Constructor
              );
            })(SimpleValidation, [
              {
                key: 'render',
                value: function render() {
                  return react_default.a.createElement(
                    'div',
                    null,
                    react_default.a.createElement(
                      src.f,
                      {
                        onSubmit: function onSubmit(_ref) {
                          var values = _ref.values;
                          return window.alert(JSON.stringify(values, null, 2));
                        }
                      },
                      react_default.a.createElement(
                        'div',
                        { style: { display: 'flex', flexWrap: 'wrap' } },
                        react_default.a.createElement(
                          'div',
                          { style: { flex: 1, marginRight: '2rem' } },
                          react_default.a.createElement(
                            src.r,
                            {
                              label: 'Country',
                              name: 'country',
                              initialValue: 'US'
                            },
                            react_default.a.createElement(
                              'option',
                              { value: 'US' },
                              'US'
                            ),
                            react_default.a.createElement(
                              'option',
                              { value: 'CA' },
                              'Canada'
                            )
                          ),
                          react_default.a.createElement(src.j, {
                            label: 'Some field',
                            name: 'some-field',
                            validate: validate
                          }),
                          react_default.a.createElement(
                            'button',
                            { type: 'submit' },
                            'Submit'
                          )
                        ),
                        react_default.a.createElement(
                          'div',
                          {
                            style: {
                              flex: 2,
                              minWidth: '300px',
                              marginLeft: '3rem'
                            }
                          },
                          react_default.a.createElement(src.c, {
                            values: !0,
                            errors: !0,
                            invalid: !0,
                            valid: !0
                          })
                        )
                      )
                    )
                  );
                }
              }
            ]),
            SimpleValidation
          );
        })(react.Component);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Elon Validator\n\nSimple validation can be achieved by passing a validation function to the input. But what if you want to perform multiple validations??\n\nWell, Elon is here to help you out!\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport { Form, Input, Select, Elon } from \'informed\';\n\nconst validate = Elon.inspect([\n  (value, values) => {\n    if (values.country === \'US\' && !value) {\n      return \'this field should not be empty when in the US\';\n    }\n  },\n  (value, values) => {\n    if (value && value.length < 2) {\n      return \'this field should contain more than 2 characters\';\n    }\n  }\n]);\n\nconst Example = () => {\n  return (\n    <Form\n      onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n      <Select label="Country" name="country" initialValue="US">\n        <option value="US">US</option>\n        <option value="CA">Canada</option>\n      </Select>\n      <Input label="Some field" name="some-field" validate={validate} />\n      <button type="submit">Submit</button>\n    </Form>\n  );\n};\n```\n',
        function() {
          return react_default.a.createElement(Elon_SimpleValidation, null);
        }
      );
    },
    980: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        Modal = __webpack_require__(119),
        src = __webpack_require__(1);
      function _typeof(obj) {
        return (
          (_typeof =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function _typeof(obj) {
                  return typeof obj;
                }
              : function _typeof(obj) {
                  return obj &&
                    'function' == typeof Symbol &&
                    obj.constructor === Symbol &&
                    obj !== Symbol.prototype
                    ? 'symbol'
                    : typeof obj;
                }),
          _typeof(obj)
        );
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError('Cannot call a class as a function');
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          (descriptor.enumerable = descriptor.enumerable || !1),
            (descriptor.configurable = !0),
            'value' in descriptor && (descriptor.writable = !0),
            Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _setPrototypeOf(o, p) {
        return (
          (_setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              return (o.__proto__ = p), o;
            }),
          _setPrototypeOf(o, p)
        );
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = (function _isNativeReflectConstruct() {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function() {})
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function _createSuperInternal() {
          var result,
            Super = _getPrototypeOf(Derived);
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && ('object' === _typeof(call) || 'function' == typeof call))
          return call;
        if (void 0 !== call)
          throw new TypeError(
            'Derived constructors may only return object or undefined'
          );
        return (function _assertThisInitialized(self) {
          if (void 0 === self)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return self;
        })(self);
      }
      function _getPrototypeOf(o) {
        return (
          (_getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              }),
          _getPrototypeOf(o)
        );
      }
      var passwordValidation = function passwordValidation(
          password1,
          password2
        ) {
          return (
            (function basicValidation(value) {
              return !value || value.length < 5
                ? 'Password must be at least five characters'
                : void 0;
            })(password1) ||
            (function matchValidation(password1, password2) {
              return password1 !== password2 ? 'Passwords must match' : void 0;
            })(password1, password2)
          );
        },
        validatePassword = function validatePassword(value, values) {
          return passwordValidation(value, values.confirmPassword);
        },
        validateConfim = function validateConfim(value, values) {
          return passwordValidation(value, values.password);
        },
        Notifications_Notifications = (function(_React$Component) {
          !(function _inherits(subClass, superClass) {
            if ('function' != typeof superClass && null !== superClass)
              throw new TypeError(
                'Super expression must either be null or a function'
              );
            (subClass.prototype = Object.create(
              superClass && superClass.prototype,
              {
                constructor: { value: subClass, writable: !0, configurable: !0 }
              }
            )),
              superClass && _setPrototypeOf(subClass, superClass);
          })(Notifications, _React$Component);
          var _super = _createSuper(Notifications);
          function Notifications() {
            return (
              _classCallCheck(this, Notifications),
              _super.apply(this, arguments)
            );
          }
          return (
            (function _createClass(Constructor, protoProps, staticProps) {
              return (
                protoProps &&
                  _defineProperties(Constructor.prototype, protoProps),
                staticProps && _defineProperties(Constructor, staticProps),
                Constructor
              );
            })(Notifications, [
              {
                key: 'render',
                value: function render() {
                  var _this = this;
                  return react_default.a.createElement(
                    'div',
                    null,
                    react_default.a.createElement(
                      src.f,
                      {
                        onSubmit: function onSubmit() {
                          return _this.modal.open();
                        },
                        id: 'notify-validation-form'
                      },
                      function(_ref) {
                        _ref.formState;
                        return react_default.a.createElement(
                          'div',
                          { style: { display: 'flex', flexWrap: 'wrap' } },
                          react_default.a.createElement(
                            'div',
                            { style: { flex: 1, marginRight: '2rem' } },
                            react_default.a.createElement(
                              'label',
                              { htmlFor: 'notify-password' },
                              'Password:'
                            ),
                            react_default.a.createElement(src.j, {
                              name: 'password',
                              id: 'notify-password',
                              validate: validatePassword,
                              validateOn: 'change',
                              validateWhen: ['confirmPassword']
                            }),
                            react_default.a.createElement(
                              'label',
                              { htmlFor: 'notify-confirm-password' },
                              'Confirm password:'
                            ),
                            react_default.a.createElement(src.j, {
                              name: 'confirmPassword',
                              id: 'notify-confirm-password',
                              validate: validateConfim,
                              validateOn: 'change',
                              validateWhen: ['password']
                            }),
                            react_default.a.createElement(
                              'button',
                              { type: 'submit' },
                              'Submit'
                            )
                          ),
                          react_default.a.createElement(
                            'div',
                            {
                              style: {
                                flex: 2,
                                minWidth: '300px',
                                marginLeft: '3rem'
                              }
                            },
                            react_default.a.createElement(src.c, {
                              values: !0,
                              errors: !0,
                              invalid: !0
                            })
                          ),
                          react_default.a.createElement(
                            Modal.a,
                            {
                              getControl: function getControl(model) {
                                return (_this.modal = model);
                              }
                            },
                            react_default.a.createElement(
                              'strong',
                              null,
                              'Form Successfully Submitted!'
                            )
                          )
                        );
                      }
                    )
                  );
                }
              }
            ]),
            Notifications
          );
        })(react_default.a.Component);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Paired Validation\n\nSometimes when validating you may need to revalidate when a sibling field changes.\nA great example of this is when you have a password and confirm password field,\nand when one changes you want the other to validate as well. To achieve this, `informed`\nallows you to pass validateWhen to an input with an array of field names that will re-trigger validation on the field.\n\n**The form below is an example of this scenario:**\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input } from \'informed\';\n\nconst basicValidation = value => {\n  return !value || value.length < 5\n    ? \'Password must be at least five characters\'\n    : undefined;\n};\n\nconst matchValidation = (password1, password2) => {\n  return password1 !== password2 ? \'Passwords must match\' : undefined;\n};\n\nconst passwordValidation = (password1, password2) => {\n  return basicValidation(password1) || matchValidation(password1, password2);\n};\n\nconst validatePassword = (value, values) =>\n  passwordValidation(value, values.confirmPassword);\nconst validateConfim = (value, values) =>\n  passwordValidation(value, values.password);\n\n<Form id="notify-validation-form">\n  <Input\n    name="password"\n    id="notify-password"\n    validate={validatePassword}\n    validateOnChange\n    validateWhen={[\'confirmPassword\']}\n  />\n  <label htmlFor="notify-confirm-password">Confirm password:</label>\n  <Input\n    name="confirmPassword"\n    id="notify-confirm-password"\n    validate={validateConfim}\n    validateOnChange\n    validateWhen={[\'password\']}\n  />\n  <button type="submit">Submit</button>\n</Form>;\n```\n',
        function() {
          return react_default.a.createElement(
            Notifications_Notifications,
            null
          );
        }
      );
    },
    981: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        ajv = __webpack_require__(103),
        ajv_default = __webpack_require__.n(ajv),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          required: ['name', 'friend', 'age', 'bio', 'color', 'model', 'cars'],
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            friend: {
              type: 'string',
              title: 'Friend',
              'ui:control': 'input',
              oneOf: [{ const: 'Elon' }, { const: 'Kimbal' }]
            },
            age: {
              type: 'number',
              title: 'Age',
              minimum: 0,
              'ui:control': 'input',
              'ui:props': { type: 'number' }
            },
            bio: {
              type: 'string',
              title: 'Bio',
              'ui:control': 'textarea',
              minLength: 10
            },
            authorize: {
              type: 'boolean',
              title: 'Authorize',
              'ui:control': 'checkbox'
            },
            color: {
              type: 'string',
              title: 'Color',
              'ui:control': 'select',
              oneOf: [
                {
                  const: '',
                  title: '- Select -',
                  'ui:props': { disabled: !0 }
                },
                { const: 'red', title: 'Red' },
                { const: 'black', title: 'Black' },
                { const: 'white', title: 'White' }
              ]
            },
            model: {
              type: 'string',
              title: 'Model',
              'ui:control': 'radio',
              oneOf: [
                { const: 'ms', title: 'Model S' },
                { const: 'm3', title: 'Model 3' },
                { const: 'mx', title: 'Model X' },
                { const: 'my', title: 'Model Y' }
              ],
              'ui:props': { initialValue: 'm3' }
            },
            cars: {
              type: 'array',
              title: 'Cars',
              minItems: 3,
              'ui:control': 'select',
              'ui:props': {
                multiple: !0,
                style: { height: '100px', width: '200px' },
                initialValue: ['jeep', 'tesla']
              },
              items: {
                oneOf: [
                  { const: 'tesla', title: 'Tesla' },
                  { const: 'volvo', title: 'Volvo' },
                  { const: 'audi', title: 'Audi' },
                  { const: 'jeep', title: 'Jeep' }
                ]
              }
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# AJV Validation\n\nYou can pass a JSON schema to the form to both build and validate the form!\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields, Debug } from 'informed';\nimport Ajv from 'ajv';\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'friend', 'age', 'bio', 'color', 'model', 'cars'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    friend: {\n      type: 'string',\n      title: 'Friend',\n      'ui:control': 'input',\n      oneOf: [{ const: 'Elon' }, { const: 'Kimbal' }]\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      minimum: 0,\n      'ui:control': 'input',\n      'ui:props': {\n        type: 'number'\n      }\n    },\n    bio: {\n      type: 'string',\n      title: 'Bio',\n      'ui:control': 'textarea',\n      minLength: 10\n    },\n    authorize: {\n      type: 'boolean',\n      title: 'Authorize',\n      'ui:control': 'checkbox'\n    },\n    color: {\n      type: 'string',\n      title: 'Color',\n      'ui:control': 'select',\n      oneOf: [\n        {\n          const: '',\n          title: '- Select -',\n          'ui:props': {\n            disabled: true\n          }\n        },\n        { const: 'red', title: 'Red' },\n        { const: 'black', title: 'Black' },\n        { const: 'white', title: 'White' }\n      ]\n    },\n    model: {\n      type: 'string',\n      title: 'Model',\n      'ui:control': 'radio',\n      oneOf: [\n        { const: 'ms', title: 'Model S' },\n        { const: 'm3', title: 'Model 3' },\n        { const: 'mx', title: 'Model X' },\n        { const: 'my', title: 'Model Y' }\n      ],\n      'ui:props': {\n        initialValue: 'm3'\n      }\n    },\n    cars: {\n      type: 'array',\n      title: 'Cars',\n      minItems: 3,\n      'ui:control': 'select',\n      'ui:props': {\n        multiple: true,\n        style: { height: '100px', width: '200px' }\n      },\n      items: {\n        oneOf: [\n          { const: 'tesla', title: 'Tesla' },\n          { const: 'volvo', title: 'Volvo' },\n          { const: 'audi', title: 'Audi' },\n          { const: 'jeep', title: 'Jeep' }\n        ]\n      },\n      'ui:props': {\n        initialValue: ['jeep', 'tesla']\n      }\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    schema={schema}\n    ajv={Ajv}\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug errors values />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            {
              schema: schema,
              ajv: ajv_default.a,
              onSubmit: function onSubmit(_ref) {
                var values = _ref.values;
                return window.alert(JSON.stringify(values, null, 2));
              }
            },
            react_default.a.createElement(src.p, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, { errors: !0, values: !0 })
          );
        }
      );
    },
    982: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        ajv = __webpack_require__(103),
        ajv_default = __webpack_require__.n(ajv),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          required: ['name', 'age', 'friend'],
          properties: {
            name: { type: 'string', title: 'First name' },
            age: { type: 'number', title: 'Age', minimum: 0 },
            friend: {
              type: 'string',
              title: 'Friend',
              oneOf: [{ const: 'Elon' }, { const: 'Kimbal' }]
            }
          }
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# AJV Validation\n\nYou can pass a JSON schema to the form but manually render the fields. ( Validation Only )\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input, Debug } from 'informed';\nimport Ajv from 'ajv';\n\nconst schema = {\n  type: 'object',\n  required: ['name', 'age', 'friend'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name'\n    },\n    age: {\n      type: 'number',\n      title: 'Age',\n      minimum: 0\n    },\n    friend: {\n      type: 'string',\n      title: 'Friend',\n      oneOf: [{ const: 'Elon' }, { const: 'Kimbal' }]\n    }\n  }\n};\n\nconst Schema = () => (\n  <Form\n    schema={schema}\n    ajv={Ajv}\n    onlyValidateSchema\n    onSubmit={({ values }) => window.alert(JSON.stringify(values, null, 2))}>\n    <button type=\"submit\">Submit</button>\n    <Input name=\"name\" label=\"First name:\" />\n    <Input name=\"age\" label=\"Age:\" type=\"number\" />\n    <Input name=\"friend\" label=\"Friend:\" />\n    <Debug errors values />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            {
              schema: schema,
              ajv: ajv_default.a,
              onlyValidateSchema: !0,
              onSubmit: function onSubmit(_ref) {
                var values = _ref.values;
                return window.alert(JSON.stringify(values, null, 2));
              }
            },
            react_default.a.createElement(src.j, {
              name: 'name',
              label: 'First name:'
            }),
            react_default.a.createElement(src.j, {
              name: 'age',
              label: 'Age:',
              type: 'number'
            }),
            react_default.a.createElement(src.j, {
              name: 'friend',
              label: 'Friend:'
            }),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, { errors: !0, values: !0 })
          );
        }
      );
    },
    983: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = (__webpack_require__(12), __webpack_require__(2)),
        src = (__webpack_require__(119), __webpack_require__(1)),
        validate = function validate(username) {
          return username && '' !== username.trim()
            ? void 0
            : 'Username is a required field';
        },
        asyncValidate = function asyncValidate(username) {
          return new Promise(function(resolve, reject) {
            setTimeout(function() {
              return ['joe', 'tanner', 'billy', 'bob'].includes(username)
                ? resolve('That username is taken')
                : 'reject' === username
                  ? reject(new Error('Unable to validate username.'))
                  : resolve();
            }, 2e3);
          });
        },
        AsyncValidation_AsyncValidation = function AsyncValidation() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(
              src.f,
              {
                onSubmit: function onSubmit(_ref) {
                  var values = _ref.values;
                  return console.log('Submitted', values);
                }
              },
              react_default.a.createElement(
                'div',
                { style: { display: 'flex', flexWrap: 'wrap' } },
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, marginRight: '2rem' } },
                  react_default.a.createElement(src.j, {
                    name: 'username',
                    label: 'Username',
                    autocomplete: 'off',
                    validateOn: 'change',
                    validate: validate,
                    asyncValidate: asyncValidate
                  }),
                  react_default.a.createElement(
                    'button',
                    { type: 'submit' },
                    'Submit'
                  )
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '150px', marginLeft: '3rem' } },
                  react_default.a.createElement('h5', null, 'Form State:'),
                  react_default.a.createElement(src.c, null)
                ),
                react_default.a.createElement(
                  'div',
                  { style: { flex: 2, minWidth: '150px', marginLeft: '3rem' } },
                  react_default.a.createElement('h5', null, 'Field State:'),
                  react_default.a.createElement(src.d, { name: 'username' })
                )
              )
            )
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Async Validation\n\nAsync validation can be achieved by passing an asyncValidation function to the input.\nBelow is an example form that has validation functions. The synchronous function defined\nwill return an error when the input is empty, and nothing otherwise. The second asynchronous\nfunction defined will, after two seconds, resolve an error or nothing depending on what is typed.\nWe pass these validation functions to the username input and validation will **occur on blur by default**.\n\n**Try clicking the submit button WITH AN EMPTY FIELD! and see what happens:**\n\n\x3c!-- STORY --\x3e\n\nWhat just happened? When you clicked on the submit button the synchronous\nvalidation function was triggered. Because the field was empty ( if you left it empty )\nit failed synchronous validation, and therefore did not run the async validation or\nactually submit the form.\n\n**Get rid of the synchronous error by typing \"FooBar\" in the username field, then\nclick the submit button again, WAIT TWO SECONDS, and see what happens:**\n\nThe form submitted!! Why? Because both our synchronous and asynchronous validation passed.\nLets make our asynchronous validation fail!\n\n**Ok now type \"billy\" into the field, click on the submit button, and wait two more seconds.**\n\nThe form did NOT submit!! Why? Because asynchronous validation failed.\n\n**Ok now type \"reject\" into the field, click on the submit button, and wait two more seconds.**\n\nThe form did not submit because the \"apicall\" to validate failed.\n\n```jsx\nimport { Form, Input } from 'informed';\n\nconst validate = username =>\n  !username || username.trim() === ''\n    ? 'Username is a required field'\n    : undefined;\n\nconst asyncValidate = username => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // Simulate username check\n      if (['joe', 'tanner', 'billy', 'bob'].includes(username)) {\n        return resolve('That username is taken');\n      }\n      // Simulate request faulure\n      if (username === 'reject') {\n        return reject(new Error('Unable to validate username.'));\n      }\n      return resolve();\n    }, 2000);\n  });\n};\n\nconst ExampleForm = () => {\n  return (\n    <Form onSubmit={({ values }) => console.log(values)}>\n      <Input\n        name=\"username\"\n        label=\"Username\"\n        validate={validate}\n        asyncValidate={asyncValidate}\n      />\n      <button type=\"submit\">Submit</button>\n      <Debug />\n      <DebugField name=\"username\" />\n    </Form>\n  );\n};\n```\n",
        function() {
          return react_default.a.createElement(
            AsyncValidation_AsyncValidation,
            null
          );
        }
      );
    },
    984: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        parser = function parser(value) {
          return value.replace('+1 ', '').replace(/-/g, '');
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Formatters\n\nYou can provide a pattern for formatting dates, credit cards, etc. To do this you can either provide a `\"Formatter String\"` or a `\"Formatter Array\"` where regular expression are used as a placeholder for the user input.\n\nAs simple credit card pattern could be:\n\n```js\nconst mask = '####-####-####-####';\n```\n\n<br />\n\nOr\n\n```js\nconst formatter = [/\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/ '-', /\\d/, /\\d/, /\\d/, /\\d/];\n```\n\n<br />\n\nFormatter strings syntax\n\n| Character | RegEx  | Example Formatter String | Derived Formatter Array                               |\n| --------- | ------ | ------------------------ | ----------------------------------------------------- |\n| #         | /\\d/   | ###-###                  | [/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]             |\n| \\*        | /[\\w]/ | \\*\\*_-_\\*\\*              | [/[\\w]/, /[\\w]/, /[\\w]/, '-', /[\\w]/, /[\\w]/, /[\\w]/] |\n\n#### Below is an example with a formatter and parser using formatter strings\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Text } from 'informed';\n\nconst formatter = '+1 ###-###-####';\n\nconst parser = value => {\n  return value.replace('+1 ', '').replace(/-/g, '');\n};\n\n<Form>\n  <label>\n    <Input\n      name=\"phone\"\n      label=\"Phone Number:\"\n      formatter={formatter}\n      parser={parser}\n      initialValue=\"1231231234\"\n    />\n    <Input\n      name=\"maskedField\"\n      label=\"Word Formatting\"\n      formatter=\"$***-**(**)***\"\n      initialValue=\"HelloWorld\"\n    />\n  </label>\n  <button type=\"submit\">Submit</button>\n</Form>;\n```\n",
        function FormatParse() {
          return react_default.a.createElement(
            src.f,
            null,
            react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(src.j, {
                name: 'phone',
                label: 'Phone Number:',
                formatter: '+1 ###-###-####',
                parser: parser,
                initialValue: '1231231234'
              }),
              react_default.a.createElement(src.j, {
                name: 'maskedField',
                label: 'Word Formatting',
                formatter: '$***-**(**)***',
                initialValue: 'HelloWorld'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, {
                values: !0,
                maskedValues: !0
              })
            )
          );
        }
      );
    },
    985: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        mask = function mask(value) {
          return value.toUpperCase();
        },
        formatter = [mask, mask, '-', mask, mask, '-', mask, mask, mask, mask];
      __webpack_exports__.a = Object(withDocs.a)(
        '# Formatter Functions\n\nYou can achive highly custom fomatting by passing a function to each location in the formatter.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Input } from \'informed\';\n\nconst mask = value => value.toUpperCase();\n\nconst formatter = [mask, mask, \'-\', mask, mask, \'-\', mask, mask, mask, mask];\n\n<Form>\n  <Input\n    field="uppercase"\n    label="Uppercase"\n    formatter={formatter}\n    initialValue="abcdefg"\n  />\n  <button type="submit">Submit</button>\n  <Debug values maskedValues />\n</Form>;\n```\n',
        function Uppercase() {
          return react_default.a.createElement(
            src.f,
            null,
            react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(src.j, {
                field: 'uppercase',
                label: 'Uppercase',
                formatter: formatter,
                initialValue: 'abcdefg'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, {
                values: !0,
                maskedValues: !0
              })
            )
          );
        }
      );
    },
    986: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      function _slicedToArray(arr, i) {
        return (
          (function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          })(arr) ||
          (function _iterableToArrayLimit(arr, i) {
            var _i =
              null == arr
                ? null
                : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
                  arr['@@iterator'];
            if (null == _i) return;
            var _s,
              _e,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              for (
                _i = _i.call(arr);
                !(_n = (_s = _i.next()).done) &&
                (_arr.push(_s.value), !i || _arr.length !== i);
                _n = !0
              );
            } catch (err) {
              (_d = !0), (_e = err);
            } finally {
              try {
                _n || null == _i.return || _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          })(arr, i) ||
          (function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if ('string' == typeof o) return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            'Object' === n && o.constructor && (n = o.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(o);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return _arrayLikeToArray(o, minLen);
          })(arr, i) ||
          (function _nonIterableRest() {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
            );
          })()
        );
      }
      function _arrayLikeToArray(arr, len) {
        (null == len || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      var profiles = [
          { name: 'Joe', age: 25 },
          { name: 'Kimbal', age: 47 },
          { name: 'Elon', age: 48 }
        ],
        ChangingInitialValues_ProfileForm = function ProfileForm(_ref) {
          var initialValues = _ref.profile,
            formApiRef = Object(react.useRef)();
          return (
            Object(react.useEffect)(
              function() {
                formApiRef.current.reset();
              },
              [initialValues]
            ),
            react_default.a.createElement(
              src.f,
              { formApiRef: formApiRef, initialValues: initialValues },
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'First Name'
              }),
              react_default.a.createElement(src.j, {
                type: 'number',
                name: 'age',
                label: 'Age'
              }),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'submit'
              ),
              react_default.a.createElement(src.c, {
                values: !0,
                initialValues: !0
              })
            )
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        '# Changing initialValues\n\n<br/>\n\nCommonly you will have use cases where you want the values to change when the users has made a different selection.\n\nBelow we have example where there is a profile editor. Depending on which profile you would like to edit, you want to pre populate the profile form with that users profile information.\n\n\x3c!-- STORY --\x3e\n\n#### Code:\n\n```jsx\nimport React, { useState, useEffect, useRef } from \'react\';\nimport { Form, Input, Select, Debug } from \'../../../src\';\n\n// Use your imagination and pretend these came from an api call :)\nconst profiles = [\n  {\n    name: \'Joe\',\n    age: 25\n  },\n  {\n    name: \'Kimbal\',\n    age: 47\n  },\n  {\n    name: \'Elon\',\n    age: 48\n  }\n];\n\nconst ProfileForm = ({ profile: initialValues }) => {\n  // Ref to the form api\n  const formApiRef = useRef();\n\n  // Reset the form whenever initial values change ( happens when user selects profile )\n  useEffect(\n    () => {\n      formApiRef.current.reset();\n    },\n    [initialValues]\n  );\n\n  return (\n    // Remember to get access to the formApi and pass in the initial values\n    <Form formApiRef={formApiRef} initialValues={initialValues}>\n      <Input name="name" label="First Name" />\n      <Input type="number" name="age" label="Age" />\n      <button type="submit">submit</button>\n      <Debug values />\n    </Form>\n  );\n};\n\nconst Profiles = () => {\n  // Select the first profile by default\n  const [selectedProfile, setSelectedProfile] = useState(profiles[0]);\n\n  const selectProfile = ({ value }) => setSelectedProfile(profiles[value]);\n\n  return (\n    <React.Fragment>\n      <h2>Select Profile</h2>\n      <Form>\n        {/* A rare case where we want to track the value instead of rcf ( onChange ) */}\n        <Select name="profile" label="Profile" onChange={selectProfile}>\n          {profiles.map((profile, i) => (\n            <option value={i}>{profile.name}</option>\n          ))}\n        </Select>\n      </Form>\n      <h2>Edit {selectedProfile.name}</h2>\n      <ProfileForm profile={selectedProfile} />\n    </React.Fragment>\n  );\n};\n```\n',
        function Profiles() {
          var _useState2 = _slicedToArray(
              Object(react.useState)(profiles[0]),
              2
            ),
            selectedProfile = _useState2[0],
            setSelectedProfile = _useState2[1];
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement('h2', null, 'Select Profile'),
            react_default.a.createElement(
              src.f,
              null,
              react_default.a.createElement(
                src.r,
                {
                  name: 'profile',
                  label: 'Profile',
                  onChange: function selectProfile(_ref2) {
                    var value = _ref2.value;
                    return setSelectedProfile(profiles[value]);
                  }
                },
                profiles.map(function(profile, i) {
                  return react_default.a.createElement(
                    'option',
                    { value: i },
                    profile.name
                  );
                })
              )
            ),
            react_default.a.createElement(
              'h2',
              null,
              'Edit ',
              selectedProfile.name
            ),
            react_default.a.createElement(ChangingInitialValues_ProfileForm, {
              profile: selectedProfile
            })
          );
        }
      );
    },
    987: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Initial Vs Default\n\n<br/>\n\nSometimes you may want to have a default value for an input that is NOT affected by initial values.\n\nBelow is an example where we have some inputs. One of the inputs asks if we love Tesla!\n\nOf course, we want that field to default to `true`!\n\nHowever, if we decide to achieve this by passing `initialValue` at the fieldLevel we screw ourselves!\n\nWhy? Because if the user for some stupid reason, had selected "no" and then we wanted to pre populate the form ( during an edit ). It would never get set.\n\n\x3c!-- STORY --\x3e\n\n#### Code:\n\n```jsx\nimport React from \'react\';\nimport { Form, Input, RadioGroup, Radio, Debug } from \'informed\';\n\nconst Example = () => {\n  const initialValues = {\n    name: \'Joe\',\n    age: 26,\n    love: \'no\' // << GOAL the form should read NO\n  };\n\n  return (\n    <React.Fragment>\n      <Form initialValues={initialValues}>\n        <Input name="name" label="First Name" />\n        <Input type="number" name="age" label="Age" />\n        {/* Note we passed defaultValue here ( GOOD ) */}\n        <RadioGroup name="love" label="Do You Love Tesla?" defaultValue="yes">\n          <Radio value="yes" label="Yes" />\n          <Radio value="no" label="No" />\n        </RadioGroup>\n        <button type="submit" variant="primary">\n          submit\n        </button>\n        <Debug values initialValues defaultValues />\n      </Form>\n      <Form initialValues={initialValues}>\n        <Input name="name" label="First Name" />\n        <Input type="number" name="age" label="Age" />\n        {/* Note we passed initialValue here ( BAD ) */}\n        <RadioGroup name="love" label="Do You Love Tesla?" initialValue="yes">\n          <Radio value="yes" label="Yes" />\n          <Radio value="no" label="No" />\n        </RadioGroup>\n        <button type="submit" variant="primary">\n          submit\n        </button>\n        <Debug values initialValues defaultValues />\n      </Form>\n    </React.Fragment>\n  );\n};\n```\n',
        function Example() {
          var initialValues = { name: 'Joe', age: 26, love: 'no' };
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement(
              src.f,
              { initialValues: initialValues },
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'First Name'
              }),
              react_default.a.createElement(src.j, {
                type: 'number',
                name: 'age',
                label: 'Age'
              }),
              react_default.a.createElement(
                src.n,
                {
                  name: 'love',
                  label: 'Do You Love Tesla?',
                  defaultValue: 'yes'
                },
                react_default.a.createElement(src.m, {
                  value: 'yes',
                  label: 'Yes'
                }),
                react_default.a.createElement(src.m, {
                  value: 'no',
                  label: 'No'
                })
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit', variant: 'primary' },
                'submit'
              ),
              react_default.a.createElement(src.c, {
                values: !0,
                initialValues: !0,
                defaultValues: !0
              })
            ),
            react_default.a.createElement(
              src.f,
              { initialValues: initialValues },
              react_default.a.createElement(src.j, {
                name: 'name',
                label: 'First Name'
              }),
              react_default.a.createElement(src.j, {
                type: 'number',
                name: 'age',
                label: 'Age'
              }),
              react_default.a.createElement(
                src.n,
                {
                  name: 'love',
                  label: 'Do You Love Tesla?',
                  initialValue: 'yes'
                },
                react_default.a.createElement(src.m, {
                  value: 'yes',
                  label: 'Yes'
                }),
                react_default.a.createElement(src.m, {
                  value: 'no',
                  label: 'No'
                })
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit', variant: 'primary' },
                'submit'
              ),
              react_default.a.createElement(src.c, {
                values: !0,
                initialValues: !0,
                defaultValues: !0
              })
            )
          );
        }
      );
    },
    988: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1);
      __webpack_exports__.a = Object(withDocs.a)(
        '# Initialize Value If Pristine\n\nSometimes you need to conditionally show or hide things based on the values in your form. This can easily be achieved with `<Relevant />`. However you may have initial values that you only want to use when the form fields were rendered on form load ( i.e ) `$pristine` state.\n\nTo achieve this you can optionally pass `initializeValueIfPristine` to a field.\n\n#### Code:\n\n```jsx\nimport { Button } from \'@tesla/design-system-react\';\nimport { Form, Input, RadioGroup, Radio, Relevant, Debug } from \'informed\';\n\nconst RelevantExample = () => (\n  <Form\n    initialValues={{\n      married: \'yes\',\n      spouseFirst: \'Hope\',\n      spouseLast: \'Foobar\'\n    }}>\n    <Input name="name" label="First Name" />\n    <RadioGroup name="married" label="Are You Married?">\n      <Radio value="yes" label="Yes" />\n      <Radio value="no" label="No" />\n    </RadioGroup>\n    <Relevant when={({ formState }) => formState.values.married === \'yes\'}>\n      <Input name="spouseFirst" label="Spouse First Name" />\n      <Input\n        name="spouseLast"\n        label="Spouse Last Name"\n        initializeValueIfPristine\n      />\n    </Relevant>\n    <Button type="submit" variant="primary">\n      submit\n    </Button>\n    <Debug values />\n  </Form>\n);\n```\n\n\x3c!-- STORY --\x3e\n',
        function RelevantExample() {
          var formApiRef = Object(react.useRef)();
          return react_default.a.createElement(
            src.f,
            {
              formApiRef: formApiRef,
              initialValues: {
                married: 'yes',
                spouseFirst: 'Hope',
                spouseLast: 'Foobar'
              }
            },
            react_default.a.createElement(src.j, {
              name: 'name',
              label: 'First Name'
            }),
            react_default.a.createElement(
              src.n,
              { name: 'married', label: 'Are You Married?' },
              react_default.a.createElement(src.m, {
                value: 'yes',
                label: 'Yes'
              }),
              react_default.a.createElement(src.m, { value: 'no', label: 'No' })
            ),
            react_default.a.createElement(
              src.o,
              {
                when: function when(_ref) {
                  return 'yes' === _ref.formState.values.married;
                }
              },
              react_default.a.createElement(src.j, {
                name: 'spouseFirst',
                label: 'Spouse First Name'
              }),
              react_default.a.createElement(src.j, {
                name: 'spouseLast',
                label: 'Spouse Last Name',
                initializeValueIfPristine: !0
              })
            ),
            react_default.a.createElement(
              'button',
              { type: 'submit', variant: 'primary' },
              'submit'
            ),
            react_default.a.createElement(src.c, { values: !0 })
          );
        }
      );
    },
    989: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          required: ['name'],
          properties: {
            name: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            married: {
              type: 'string',
              title: 'Are you married?',
              enum: ['yes', 'no'],
              'ui:control': 'radio'
            }
          },
          allOf: [
            {
              if: {
                properties: { married: { const: 'yes' } },
                required: ['married']
              },
              then: {
                properties: {
                  spouse: {
                    type: 'string',
                    title: 'Spouse name',
                    'ui:control': 'input'
                  }
                }
              }
            }
          ]
        },
        ConditionalSchema_DivComp = function DivComp(_ref) {
          var children = _ref.children;
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement('h3', null, 'Hello World'),
            children
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Conditional Schema\n\n** Note: This is in beta and is subject to change! **\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from 'informed';\n\nconst schema = {\n  type: 'object',\n  required: ['name'],\n  properties: {\n    name: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    married: {\n      type: 'string',\n      title: 'Are you married?',\n      enum: ['yes', 'no'],\n      'ui:control': 'radio'\n    }\n  },\n  allOf: [\n    {\n      if: {\n        properties: {\n          married: { const: 'yes' }\n        },\n        required: ['married']\n      },\n      then: {\n        properties: {\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input'\n          }\n        }\n      }\n    }\n  ]\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            {
              schema: schema,
              components: { DivComp: ConditionalSchema_DivComp }
            },
            react_default.a.createElement(src.p, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, null)
          );
        }
      );
    },
    990: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          properties: {
            firstName: {
              type: 'string',
              title: 'First name',
              'ui:control': 'input'
            },
            'ui:lastName': {},
            email: {
              type: 'string',
              title: 'Email',
              format: 'email',
              'ui:control': 'input'
            },
            married: {
              type: 'string',
              title: 'Are you married?',
              enum: ['yes', 'no'],
              'ui:control': 'radio'
            },
            'ui:spouse': {},
            drinking: {
              type: 'object',
              properties: {
                age: {
                  type: 'number',
                  title: 'your age?',
                  'ui:control': 'input'
                },
                'ui:idrink': {}
              },
              allOf: [
                {
                  $id: 'idrink',
                  if: {
                    properties: { age: { minimum: 21, maximum: 30 } },
                    required: ['age']
                  },
                  then: {
                    properties: {
                      doDrink: {
                        type: 'boolean',
                        title: 'I drink',
                        'ui:control': 'checkbox',
                        'ui:props': { initialValue: !0 }
                      },
                      'ui:favoriteDrink': {}
                    },
                    allOf: [
                      {
                        $id: 'favoriteDrink',
                        if: { properties: { doDrink: { not: !1 } } },
                        then: {
                          properties: {
                            favoriteDrink: {
                              type: 'string',
                              title: 'Favorite drink',
                              'ui:control': 'input'
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          allOf: [
            {
              $id: 'spouse',
              if: {
                properties: { married: { const: 'yes' } },
                required: ['married']
              },
              then: {
                properties: {
                  spouse: {
                    type: 'string',
                    title: 'Spouse name',
                    'ui:control': 'input'
                  }
                },
                required: ['spouse']
              }
            },
            {
              $id: 'lastName',
              if: {
                properties: { firstName: { not: { enum: ['Robin', 'Joe'] } } }
              },
              then: {
                properties: {
                  lastName: {
                    type: 'string',
                    title: 'Last name',
                    'ui:control': 'input'
                  }
                }
              }
            }
          ],
          required: ['name', 'email']
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Conditional Schema\n\n** Note: This is in beta and is subject to change! **\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from 'informed';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    firstName: {\n      type: 'string',\n      title: 'First name',\n      'ui:control': 'input'\n    },\n    'ui:lastName': {},\n    email: {\n      type: 'string',\n      title: 'Email',\n      format: 'email',\n      'ui:control': 'input'\n    },\n    married: {\n      type: 'string',\n      title: 'Are you married?',\n      enum: ['yes', 'no'],\n      'ui:control': 'radio'\n    },\n    'ui:spouse': {},\n    drinking: {\n      type: 'object',\n      properties: {\n        age: {\n          type: 'number',\n          title: 'your age?',\n          'ui:control': 'input'\n        },\n        'ui:idrink': {}\n      },\n      allOf: [\n        {\n          $id: 'idrink',\n          if: {\n            properties: {\n              age: { minimum: 21, maximum: 30 }\n            },\n            required: ['age']\n          },\n          then: {\n            properties: {\n              doDrink: {\n                type: 'boolean',\n                title: 'I drink',\n                'ui:control': 'checkbox',\n                'ui:props': {\n                  initialValue: true\n                }\n              },\n              'ui:favoriteDrink': {}\n            },\n            allOf: [\n              {\n                $id: 'favoriteDrink',\n                if: {\n                  properties: { doDrink: { not: false } }\n                },\n                then: {\n                  properties: {\n                    favoriteDrink: {\n                      type: 'string',\n                      title: 'Favorite drink',\n                      'ui:control': 'input'\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  },\n  allOf: [\n    {\n      $id: 'spouse',\n      if: {\n        properties: {\n          married: { const: 'yes' }\n        },\n        required: ['married']\n      },\n      then: {\n        properties: {\n          spouse: {\n            type: 'string',\n            title: 'Spouse name',\n            'ui:control': 'input'\n          }\n        },\n        required: ['spouse']\n      }\n    },\n    {\n      $id: 'lastName',\n      if: {\n        properties: {\n          firstName: { not: { enum: ['Robin', 'Joe'] } }\n        }\n      },\n      then: {\n        properties: {\n          lastName: {\n            type: 'string',\n            title: 'Last name',\n            'ui:control': 'input'\n          }\n        }\n      }\n    }\n  ],\n  required: ['name', 'email']\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            { schema: schema },
            react_default.a.createElement(src.p, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, null)
          );
        }
      );
    },
    991: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        schema = {
          type: 'object',
          properties: {
            type: {
              type: 'string',
              'ui:control': 'select',
              title: 'Would you like a car or truck?',
              oneOf: [
                { const: 'car', title: 'Car' },
                { const: 'truck', title: 'Truck' }
              ],
              'ui:props': { initialValue: 'car' }
            },
            product: {
              type: 'string',
              'ui:control': 'select',
              title: 'Product'
            }
          },
          allOf: [
            {
              if: {
                properties: { type: { const: 'car' } },
                required: ['type']
              },
              then: {
                properties: {
                  product: {
                    oneOf: [
                      { const: '', title: '- Select -' },
                      { const: 'modelS', title: 'Model S' },
                      { const: 'modelX', title: 'Model X' },
                      { const: 'model3', title: 'Model 3' }
                    ]
                  }
                }
              }
            },
            {
              if: {
                properties: { type: { const: 'truck' } },
                required: ['type']
              },
              then: {
                properties: {
                  product: {
                    oneOf: [
                      { const: '', title: '- Select -' },
                      { const: 'semi', title: 'Semi Truck' },
                      { const: 'cyber', title: 'Cyber Truck' }
                    ]
                  }
                }
              }
            }
          ]
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Conditional Options\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from 'informed';\n\nconst schema = {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      'ui:control': 'select',\n      title: 'Would you like a car or truck?',\n      oneOf: [\n        { const: 'car', title: 'Car' },\n        { const: 'truck', title: 'Truck' }\n      ],\n      'ui:props': {\n        initialValue: 'car'\n      }\n    },\n    product: {\n      type: 'string',\n      'ui:control': 'select',\n      title: 'Product'\n    }\n  },\n  allOf: [\n    {\n      if: { properties: { type: { const: 'car' } }, required: ['type'] },\n      then: {\n        properties: {\n          product: {\n            oneOf: [\n              { const: '', title: '- Select -' },\n              { const: 'modelS', title: 'Model S' },\n              { const: 'modelX', title: 'Model X' },\n              { const: 'model3', title: 'Model 3' }\n            ]\n          }\n        }\n      }\n    },\n    {\n      if: { properties: { type: { const: 'truck' } }, required: ['type'] },\n      then: {\n        properties: {\n          product: {\n            oneOf: [\n              { const: '', title: '- Select -' },\n              { const: 'semi', title: 'Semi Truck' },\n              { const: 'cyber', title: 'Cyber Truck' }\n            ]\n          }\n        }\n      }\n    }\n  ]\n};\n\nconst Schema = () => (\n  <Form schema={schema}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            { schema: schema },
            react_default.a.createElement(src.p, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, null)
          );
        }
      );
    },
    992: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        schema = {
          properties: {
            'ui:fullName_wrapper': {},
            favorite: {
              'ui:control': 'PurpleBorder',
              type: 'object',
              properties: {
                color: {
                  type: 'string',
                  title: 'Favorite color',
                  'ui:control': 'input'
                },
                food: {
                  type: 'string',
                  title: 'Favorite Food',
                  'ui:control': 'input'
                }
              }
            }
          },
          allOf: [
            {
              $id: 'fullName_wrapper',
              'ui:control': 'PurpleBorder',
              type: 'object',
              properties: {
                firstName: {
                  type: 'string',
                  title: 'First name',
                  'ui:control': 'input'
                },
                lastName: {
                  type: 'string',
                  title: 'Last name',
                  'ui:control': 'input'
                }
              }
            }
          ]
        },
        SchemaComponents_PurpleBorder = function PurpleBorder(_ref) {
          var children = _ref.children;
          return react_default.a.createElement(
            'div',
            {
              style: {
                border: '3px solid purple',
                marginBottom: '1rem',
                padding: '1rem'
              }
            },
            children
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Schema Components\n\nInformed 5.0 added the ability to add custom components to schema based forms, using special property names in the form of ui:[$id].\n\n```js\n{\n  \"properties\": {\n    \"ui:myId\": {}\n  }\n}\n```\n\n<br />\n\nWhen wanting to render fields as children of your component, you should add these inside an allOf[] in the parent of the properties object. The entry in allOf[] should have an $id property to be able to reference those fields.\n\n```js\n{\n  \"allOf\": [\n    {\n      \"$id\": \"myId\",\n      \"properties\": {\n        \"myField\": {\n          \"type\": \"string\",\n          \"title\": \"My field\"\n        }\n      }\n    }\n  ]\n}\n```\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, SchemaFields } from 'informed';\n\nconst schema = {\n  properties: {\n    'ui:fullName_wrapper': {},\n    favorite: {\n      'ui:control': 'PurpleBorder',\n      type: 'object',\n      properties: {\n        color: {\n          type: 'string',\n          title: 'Favorite color',\n          'ui:control': 'input'\n        },\n        food: {\n          type: 'string',\n          title: 'Favorite Food',\n          'ui:control': 'input'\n        }\n      }\n    }\n  },\n  allOf: [\n    {\n      $id: 'fullName_wrapper',\n      'ui:control': 'PurpleBorder',\n      type: 'object',\n      properties: {\n        firstName: {\n          type: 'string',\n          title: 'First name',\n          'ui:control': 'input'\n        },\n        lastName: {\n          type: 'string',\n          title: 'Last name',\n          'ui:control': 'input'\n        }\n      }\n    }\n  ]\n};\n\nconst PurpleBorder = ({ children }) => {\n  return (\n    <div style={{ border: '3px solid purple', padding: '1rem' }}>\n      {children}\n    </div>\n  );\n};\n\nconst Schema = () => (\n  <Form schema={schema} components={{ PurpleBorder }}>\n    <SchemaFields />\n    <button type=\"submit\">Submit</button>\n    <Debug />\n  </Form>\n);\n```\n",
        function Schema() {
          return react_default.a.createElement(
            src.f,
            {
              schema: schema,
              components: { PurpleBorder: SchemaComponents_PurpleBorder }
            },
            react_default.a.createElement(src.p, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(src.c, null)
          );
        }
      );
    },
    993: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        FormatDependent_CarOrTruck = function CarOrTruck() {
          return react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement(
              'label',
              null,
              'Would you like a car or truck?'
            ),
            react_default.a.createElement(
              src.n,
              { name: 'type', initialValue: 'car' },
              react_default.a.createElement(src.m, {
                value: 'car',
                label: 'Car'
              }),
              react_default.a.createElement(src.m, {
                value: 'truck',
                label: 'Truck'
              })
            )
          );
        },
        options = {
          car: [
            { value: '', label: '- Select -', disabled: !0 },
            { value: 'modelS', label: 'Model S' },
            { value: 'model3', label: 'Model 3' },
            { value: 'modelX', label: 'Model X' },
            { value: 'modely', label: 'Model Y' }
          ],
          truck: [
            { value: '', label: '- Select -', disabled: !0 },
            { value: 'semi', label: 'Semi Truck' },
            { value: 'cyber', label: 'Cyber Truck' }
          ]
        },
        FormatDependent_ProductSelect = function ProductSelect() {
          var _useFieldState = Object(src.y)('type'),
            value = _useFieldState.value,
            dirty = _useFieldState.dirty,
            reset = Object(src.x)('product').reset,
            opts = Object(react.useMemo)(
              function() {
                return options[value] || [];
              },
              [value]
            );
          return (
            Object(react.useEffect)(
              function() {
                dirty && reset();
              },
              [value]
            ),
            react_default.a.createElement(src.r, {
              field: 'product',
              label: 'Product',
              disabled: !value,
              options: opts
            })
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Dependent Fields\n\nSometimes fields values depend on what you input in other parts of the form.\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport {\n  Form,\n  RadioGroup,\n  Radio,\n  Select,\n  Debug,\n  useFieldState,\n  useFieldApi\n} from 'informed';\n\nconst options = {\n  car: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'modelS',\n      label: 'Model S'\n    },\n    {\n      value: 'model3',\n      label: 'Model 3'\n    },\n    {\n      value: 'modelX',\n      label: 'Model X'\n    },\n    {\n      value: 'modely',\n      label: 'Model Y'\n    }\n  ],\n  truck: [\n    {\n      value: '',\n      label: '- Select -',\n      disabled: true\n    },\n    {\n      value: 'semi',\n      label: 'Semi Truck'\n    },\n    {\n      value: 'cyber',\n      label: 'Cyber Truck'\n    }\n  ]\n};\n\nconst CarOrTruck = () => {\n  return (\n    <>\n      <label>Would you like a car or truck?</label>\n      <RadioGroup name=\"type\" initialValue=\"car\">\n        <Radio value=\"car\" label=\"Car\" />\n        <Radio value=\"truck\" label=\"Truck\" />\n      </RadioGroup>\n    </>\n  );\n};\n\nconst ProductSelect = () => {\n  const { value, dirty } = useFieldState('type');\n  const { reset } = useFieldApi('product');\n\n  const opts = useMemo(() => options[value] || [], [value]);\n\n  useEffect(\n    () => {\n      if (dirty) reset();\n    },\n    [value]\n  );\n\n  return (\n    <Select field=\"product\" label=\"Product\" disabled={!value}>\n      <option value=\"\" disabled>\n        - Select -\n      </option>\n      {opts.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </Select>\n  );\n};\n\nconst DependentFields = () => (\n  <Form>\n    <CarOrTruck />\n    <ProductSelect />\n    <button type=\"submit\">Submit</button>\n    <Debug values />\n    <DebugField name=\"type\" value dirty />\n    <DebugField name=\"product\" value dirty />\n  </Form>\n);\n```\n",
        function DependentFields() {
          return react_default.a.createElement(
            src.f,
            null,
            react_default.a.createElement(FormatDependent_CarOrTruck, null),
            react_default.a.createElement(FormatDependent_ProductSelect, null),
            react_default.a.createElement(
              'button',
              { type: 'submit' },
              'Submit'
            ),
            react_default.a.createElement(
              'div',
              { style: { display: 'flex' } },
              react_default.a.createElement(
                'div',
                { style: { flex: 1 } },
                react_default.a.createElement('h5', null, 'Form State:'),
                react_default.a.createElement(src.c, { values: !0 })
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: 1, marginLeft: '2rem' } },
                react_default.a.createElement('h5', null, 'Type State:'),
                react_default.a.createElement(src.d, {
                  name: 'type',
                  value: !0,
                  dirty: !0
                })
              ),
              react_default.a.createElement(
                'div',
                { style: { flex: 1, marginLeft: '2rem' } },
                react_default.a.createElement('h5', null, 'Product State:'),
                react_default.a.createElement(src.d, {
                  name: 'product',
                  value: !0,
                  dirty: !0
                })
              )
            )
          );
        }
      );
    },
    994: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        Code = __webpack_require__(12),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        _excluded = ['onChange', 'onBlur'];
      function _extends() {
        return (
          (_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          _extends.apply(this, arguments)
        );
      }
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ownKeys(Object(source), !0).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      src.E.informedFormat;
      var formatter = [
          '+',
          '1',
          ' ',
          /\d/,
          /\d/,
          /\d/,
          '-',
          /\d/,
          /\d/,
          /\d/,
          '-',
          /\d/,
          /\d/,
          /\d/,
          /\d/
        ],
        parser = function parser(value) {
          return value.replace('+1 ', '').replace(/-/g, '');
        },
        FormattedObjectInput_FormattedObjectInput = function FormattedObjectInput(
          props
        ) {
          var refA = Object(react.useRef)(),
            refB = Object(react.useRef)(),
            _useField = Object(src.w)(
              _objectSpread(
                _objectSpread({}, props),
                {},
                {
                  inputRefs: { a: refA, b: refB },
                  formatter: { a: formatter, b: formatter },
                  parser: { a: parser, b: parser }
                }
              )
            ),
            fieldState = _useField.fieldState,
            fieldApi = _useField.fieldApi,
            render = _useField.render,
            userProps = _useField.userProps,
            maskedValue = fieldState.maskedValue,
            setValue = fieldApi.setValue,
            setTouched = fieldApi.setTouched,
            rest = (userProps.onChange,
            userProps.onBlur,
            _objectWithoutProperties(userProps, _excluded)),
            v = maskedValue || {},
            a = v.a,
            b = v.b;
          return render(
            react_default.a.createElement(
              react_default.a.Fragment,
              null,
              react_default.a.createElement(
                'input',
                _extends({}, rest, {
                  ref: refA,
                  value: a || '',
                  onChange: function aChange(e) {
                    var newVal = _objectSpread({}, v),
                      val = e.target.value;
                    (newVal.a = val), setValue(newVal, e, 'a');
                  },
                  onBlur: function onBlur() {
                    return setTouched;
                  }
                })
              ),
              react_default.a.createElement(
                'input',
                _extends({}, rest, {
                  ref: refB,
                  value: b || '',
                  onChange: function bChange(e) {
                    var newVal = _objectSpread({}, v),
                      val = e.target.value;
                    (newVal.b = val), setValue(newVal, e, 'b');
                  },
                  onBlur: function onBlur() {
                    return setTouched();
                  }
                })
              )
            )
          );
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "## Formatted Object Input\n\nSometimes you need to make object inputs that also format per field.\n\n\x3c!-- STORY --\x3e\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport React, { useRef } from 'react';\nimport { Form, useField, useCursorPosition, utils } from 'informed';\nconst { informedFormat } = utils;\n\nconst formatter = [\n  '+',\n  '1',\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/\n];\n\nconst initialize = ({ a, b }) => {\n  return {\n    a: informedFormat(a, formatter).value,\n    b: informedFormat(b, formatter).value\n  };\n};\n\nconst FormattedObjectInput = props => {\n  const refA = useRef();\n  const refB = useRef();\n\n  const { fieldState, fieldApi, render, userProps } = useField({\n    ...props,\n    inputRefs: {\n      a: refA,\n      b: refB\n    },\n    formatter: {\n      a: formatter,\n      b: formatter\n    },\n    parser: {\n      a: parser,\n      b: parser\n    }\n  });\n\n  const { maskedValue } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { onChange, onBlur, ...rest } = userProps;\n\n  const aChange = e => {\n    const newVal = { ...v };\n\n    const val = e.target.value;\n\n    // update the \"a\" value\n    newVal.a = val;\n\n    setValue(newVal, e, 'a');\n  };\n\n  const bChange = e => {\n    const newVal = { ...v };\n\n    const val = e.target.value;\n\n    // update the \"a\" value\n    newVal.b = val;\n\n    setValue(newVal, e, 'b');\n  };\n\n  const v = maskedValue || {};\n\n  const { a, b } = v;\n\n  return render(\n    <React.Fragment>\n      <input\n        {...rest}\n        ref={refA}\n        value={a ? a : ''}\n        onChange={aChange}\n        onBlur={() => setTouched}\n      />\n      <input\n        {...rest}\n        ref={refB}\n        value={b ? b : ''}\n        onChange={bChange}\n        onBlur={() => setTouched()}\n      />\n    </React.Fragment>\n  );\n};\n\n<Form>\n  <label>\n    Double Phone\n    <FormattedObjectInput field=\"doublePhone\" />\n  </label>\n  <button type=\"submit\">Submit</button>\n  <button type=\"button\" onClick={() => formApi.reset()}>\n    Reset\n  </button>\n  <button\n    type=\"button\"\n    onClick={() =>\n      formApi.setValue('doublePhone', {\n        a: '4324324321',\n        b: '1231231234'\n      })\n    }>\n    Set Value\n  </button>\n</Form>;\n```\n",
        function Example() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(src.f, null, function(_ref) {
              var formApi = _ref.formApi,
                formState = _ref.formState;
              return react_default.a.createElement(
                react_default.a.Fragment,
                null,
                react_default.a.createElement(
                  'label',
                  null,
                  'Double Phone',
                  react_default.a.createElement(
                    FormattedObjectInput_FormattedObjectInput,
                    {
                      field: 'doublePhone',
                      initialValue: { a: '1231231234', b: '4324324321' }
                    }
                  )
                ),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                ),
                react_default.a.createElement(
                  'button',
                  {
                    type: 'button',
                    onClick: function onClick() {
                      return formApi.reset();
                    }
                  },
                  'Reset'
                ),
                react_default.a.createElement(
                  'button',
                  {
                    type: 'button',
                    onClick: function onClick() {
                      return formApi.setValue('doublePhone', {
                        a: '4324324321',
                        b: '1231231234'
                      });
                    }
                  },
                  'Set Value'
                ),
                react_default.a.createElement('label', null, 'Values:'),
                react_default.a.createElement(
                  Code.a,
                  { language: 'language-js' },
                  JSON.stringify(formState.values, null, 2)
                )
              );
            })
          );
        }
      );
    },
    995: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        Code = __webpack_require__(12),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        _excluded = ['onChange', 'onBlur'];
      function _extends() {
        return (
          (_extends =
            Object.assign ||
            function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source)
                  Object.prototype.hasOwnProperty.call(source, key) &&
                    (target[key] = source[key]);
              }
              return target;
            }),
          _extends.apply(this, arguments)
        );
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly &&
            (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })),
            keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2
            ? ownKeys(Object(source), !0).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(
                  target,
                  Object.getOwnPropertyDescriptors(source)
                )
              : ownKeys(Object(source)).forEach(function(key) {
                  Object.defineProperty(
                    target,
                    key,
                    Object.getOwnPropertyDescriptor(source, key)
                  );
                });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        return (
          key in obj
            ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
              })
            : (obj[key] = value),
          obj
        );
      }
      function _objectWithoutProperties(source, excluded) {
        if (null == source) return {};
        var key,
          i,
          target = (function _objectWithoutPropertiesLoose(source, excluded) {
            if (null == source) return {};
            var key,
              i,
              target = {},
              sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              (key = sourceKeys[i]),
                excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          })(source, excluded);
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++)
            (key = sourceSymbolKeys[i]),
              excluded.indexOf(key) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(source, key) &&
                  (target[key] = source[key]));
        }
        return target;
      }
      var ObjectInput_ObjectInput = function ObjectInput(props) {
        var _useField = Object(src.w)(props),
          fieldState = _useField.fieldState,
          fieldApi = _useField.fieldApi,
          render = _useField.render,
          userProps = _useField.userProps,
          value = fieldState.value,
          setValue = fieldApi.setValue,
          setTouched = fieldApi.setTouched,
          rest = (userProps.onChange,
          userProps.onBlur,
          _objectWithoutProperties(userProps, _excluded)),
          v = value || {},
          a = v.a,
          b = v.b;
        return render(
          react_default.a.createElement(
            react_default.a.Fragment,
            null,
            react_default.a.createElement(
              'input',
              _extends({}, rest, {
                value: a || '',
                onChange: function aChange(e) {
                  var newVal = _objectSpread({}, v);
                  (newVal.a = e.target.value), setValue(newVal);
                },
                onBlur: function onBlur() {
                  return setTouched;
                }
              })
            ),
            react_default.a.createElement(
              'input',
              _extends({}, rest, {
                value: b || '',
                onChange: function bChange(e) {
                  var newVal = _objectSpread({}, v);
                  (newVal.b = e.target.value), setValue(newVal);
                },
                onBlur: function onBlur() {
                  return setTouched();
                }
              })
            )
          )
        );
      };
      __webpack_exports__.a = Object(withDocs.a)(
        "## Object Input\n\nSometimes you need to make object input. An input whos value is an object and made up of more than one phisical input element.\n\n\x3c!-- STORY --\x3e\n\n\x3c!-- IDFK Strange issue where i need this commnet or code formatting is messed up --\x3e\n\n```jsx\nimport React from 'react';\nimport { Form, useField } from 'informed';\n\nconst ObjectInput = props => {\n  const { fieldState, fieldApi, render, userProps } = useField(props);\n\n  const { value } = fieldState;\n  const { setValue, setTouched } = fieldApi;\n  const { onChange, onBlur, ...rest } = userProps;\n\n  const v = value || {};\n\n  const aChange = e => {\n    const newVal = { ...v };\n\n    newVal.a = e.target.value;\n\n    setValue(newVal);\n  };\n\n  const bChange = e => {\n    const newVal = { ...v };\n\n    newVal.b = e.target.value;\n\n    setValue(newVal);\n  };\n\n  const { a, b } = v;\n\n  return render(\n    <React.Fragment>\n      <input\n        {...rest}\n        value={a ? a : ''}\n        onChange={aChange}\n        onBlur={() => setTouched}\n      />\n      <input\n        {...rest}\n        value={b ? b : ''}\n        onChange={bChange}\n        onBlur={() => setTouched()}\n      />\n    </React.Fragment>\n  );\n};\n\n<Form>\n  <label>\n    Double Input\n    <ObjectInput field=\"doubleInput\" />\n  </label>\n  <button type=\"submit\">Submit</button>\n</Form>;\n```\n",
        function Example() {
          return react_default.a.createElement(
            'div',
            null,
            react_default.a.createElement(src.f, null, function(_ref) {
              _ref.formApi;
              var formState = _ref.formState;
              return react_default.a.createElement(
                react_default.a.Fragment,
                null,
                react_default.a.createElement(
                  'label',
                  null,
                  'Double Input',
                  react_default.a.createElement(ObjectInput_ObjectInput, {
                    field: 'doubleInput'
                  })
                ),
                react_default.a.createElement(
                  'button',
                  { type: 'submit' },
                  'Submit'
                ),
                react_default.a.createElement('label', null, 'Values:'),
                react_default.a.createElement(
                  Code.a,
                  { language: 'language-js' },
                  JSON.stringify(formState.values, null, 2)
                )
              );
            })
          );
        }
      );
    },
    996: function(module, __webpack_exports__, __webpack_require__) {
      'use strict';
      var react = __webpack_require__(0),
        react_default = __webpack_require__.n(react),
        withDocs = __webpack_require__(2),
        src = __webpack_require__(1),
        localeOptions = [
          { value: 'af-NA', label: 'Afrikaans (Namibia)' },
          { value: 'af-ZA', label: 'Afrikaans (South Africa)' },
          { value: 'af', label: 'Afrikaans' },
          { value: 'ak-GH', label: 'Akan (Ghana)' },
          { value: 'ak', label: 'Akan' },
          { value: 'sq-AL', label: 'Albanian (Albania)' },
          { value: 'sq', label: 'Albanian' },
          { value: 'am-ET', label: 'Amharic (Ethiopia)' },
          { value: 'am', label: 'Amharic' },
          { value: 'ar-DZ', label: 'Arabic (Algeria)' },
          { value: 'ar-BH', label: 'Arabic (Bahrain)' },
          { value: 'ar-EG', label: 'Arabic (Egypt)' },
          { value: 'ar-IQ', label: 'Arabic (Iraq)' },
          { value: 'ar-JO', label: 'Arabic (Jordan)' },
          { value: 'ar-KW', label: 'Arabic (Kuwait)' },
          { value: 'ar-LB', label: 'Arabic (Lebanon)' },
          { value: 'ar-LY', label: 'Arabic (Libya)' },
          { value: 'ar-MA', label: 'Arabic (Morocco)' },
          { value: 'ar-OM', label: 'Arabic (Oman)' },
          { value: 'ar-QA', label: 'Arabic (Qatar)' },
          { value: 'ar-SA', label: 'Arabic (Saudi Arabia)' },
          { value: 'ar-SD', label: 'Arabic (Sudan)' },
          { value: 'ar-SY', label: 'Arabic (Syria)' },
          { value: 'ar-TN', label: 'Arabic (Tunisia)' },
          { value: 'ar-AE', label: 'Arabic (United Arab Emirates)' },
          { value: 'ar-YE', label: 'Arabic (Yemen)' },
          { value: 'ar', label: 'Arabic' },
          { value: 'hy-AM', label: 'Armenian (Armenia)' },
          { value: 'hy', label: 'Armenian' },
          { value: 'as-IN', label: 'Assamese (India)' },
          { value: 'as', label: 'Assamese' },
          { value: 'asa-TZ', label: 'Asu (Tanzania)' },
          { value: 'asa', label: 'Asu' },
          { value: 'az-Cyrl', label: 'Azerbaijani (Cyrillic)' },
          { value: 'az-Cyrl-AZ', label: 'Azerbaijani (Cyrillic, Azerbaijan)' },
          { value: 'az-Latn', label: 'Azerbaijani (Latin)' },
          { value: 'az-Latn-AZ', label: 'Azerbaijani (Latin, Azerbaijan)' },
          { value: 'az', label: 'Azerbaijani' },
          { value: 'bm-ML', label: 'Bambara (Mali)' },
          { value: 'bm', label: 'Bambara' },
          { value: 'eu-ES', label: 'Basque (Spain)' },
          { value: 'eu', label: 'Basque' },
          { value: 'be-BY', label: 'Belarusian (Belarus)' },
          { value: 'be', label: 'Belarusian' },
          { value: 'bem-ZM', label: 'Bemba (Zambia)' },
          { value: 'bem', label: 'Bemba' },
          { value: 'bez-TZ', label: 'Bena (Tanzania)' },
          { value: 'bez', label: 'Bena' },
          { value: 'bn-BD', label: 'Bengali (Bangladesh)' },
          { value: 'bn-IN', label: 'Bengali (India)' },
          { value: 'bn', label: 'Bengali' },
          { value: 'bs-BA', label: 'Bosnian (Bosnia and Herzegovina)' },
          { value: 'bs', label: 'Bosnian' },
          { value: 'bg-BG', label: 'Bulgarian (Bulgaria)' },
          { value: 'bg', label: 'Bulgarian' },
          { value: 'my-MM', label: 'Burmese (Myanmar [Burma])' },
          { value: 'my', label: 'Burmese' },
          {
            value: 'yue-Hant-HK',
            label: 'Cantonese (Traditional, Hong Kong SAR China)'
          },
          { value: 'ca-ES', label: 'Catalan (Spain)' },
          { value: 'ca', label: 'Catalan' },
          { value: 'tzm-Latn', label: 'Central Morocco Tamazight (Latin)' },
          {
            value: 'tzm-Latn-MA',
            label: 'Central Morocco Tamazight (Latin, Morocco)'
          },
          { value: 'tzm', label: 'Central Morocco Tamazight' },
          { value: 'chr-US', label: 'Cherokee (United States)' },
          { value: 'chr', label: 'Cherokee' },
          { value: 'cgg-UG', label: 'Chiga (Uganda)' },
          { value: 'cgg', label: 'Chiga' },
          { value: 'zh-Hans', label: 'Chinese (Simplified Han)' },
          { value: 'zh-Hans-CN', label: 'Chinese (Simplified Han, China)' },
          {
            value: 'zh-Hans-HK',
            label: 'Chinese (Simplified Han, Hong Kong SAR China)'
          },
          {
            value: 'zh-Hans-MO',
            label: 'Chinese (Simplified Han, Macau SAR China)'
          },
          { value: 'zh-Hans-SG', label: 'Chinese (Simplified Han, Singapore)' },
          { value: 'zh-Hant', label: 'Chinese (Traditional Han)' },
          {
            value: 'zh-Hant-HK',
            label: 'Chinese (Traditional Han, Hong Kong SAR China)'
          },
          {
            value: 'zh-Hant-MO',
            label: 'Chinese (Traditional Han, Macau SAR China)'
          },
          { value: 'zh-Hant-TW', label: 'Chinese (Traditional Han, Taiwan)' },
          { value: 'zh', label: 'Chinese' },
          { value: 'kw-GB', label: 'Cornish (United Kingdom)' },
          { value: 'kw', label: 'Cornish' },
          { value: 'hr-HR', label: 'Croatian (Croatia)' },
          { value: 'hr', label: 'Croatian' },
          { value: 'cs-CZ', label: 'Czech (Czech Republic)' },
          { value: 'cs', label: 'Czech' },
          { value: 'da-DK', label: 'Danish (Denmark)' },
          { value: 'da', label: 'Danish' },
          { value: 'nl-BE', label: 'Dutch (Belgium)' },
          { value: 'nl-NL', label: 'Dutch (Netherlands)' },
          { value: 'nl', label: 'Dutch' },
          { value: 'ebu-KE', label: 'Embu (Kenya)' },
          { value: 'ebu', label: 'Embu' },
          { value: 'en-AS', label: 'English (American Samoa)' },
          { value: 'en-AU', label: 'English (Australia)' },
          { value: 'en-BE', label: 'English (Belgium)' },
          { value: 'en-BZ', label: 'English (Belize)' },
          { value: 'en-BW', label: 'English (Botswana)' },
          { value: 'en-CA', label: 'English (Canada)' },
          { value: 'en-GU', label: 'English (Guam)' },
          { value: 'en-HK', label: 'English (Hong Kong SAR China)' },
          { value: 'en-IN', label: 'English (India)' },
          { value: 'en-IE', label: 'English (Ireland)' },
          { value: 'en-IL', label: 'English (Israel)' },
          { value: 'en-JM', label: 'English (Jamaica)' },
          { value: 'en-MT', label: 'English (Malta)' },
          { value: 'en-MH', label: 'English (Marshall Islands)' },
          { value: 'en-MU', label: 'English (Mauritius)' },
          { value: 'en-NA', label: 'English (Namibia)' },
          { value: 'en-NZ', label: 'English (New Zealand)' },
          { value: 'en-MP', label: 'English (Northern Mariana Islands)' },
          { value: 'en-PK', label: 'English (Pakistan)' },
          { value: 'en-PH', label: 'English (Philippines)' },
          { value: 'en-SG', label: 'English (Singapore)' },
          { value: 'en-ZA', label: 'English (South Africa)' },
          { value: 'en-TT', label: 'English (Trinidad and Tobago)' },
          { value: 'en-UM', label: 'English (U.S. Minor Outlying Islands)' },
          { value: 'en-VI', label: 'English (U.S. Virgin Islands)' },
          { value: 'en-GB', label: 'English (United Kingdom)' },
          { value: 'en-US', label: 'English (United States)' },
          { value: 'en-ZW', label: 'English (Zimbabwe)' },
          { value: 'en', label: 'English' },
          { value: 'eo', label: 'Esperanto' },
          { value: 'et-EE', label: 'Estonian (Estonia)' },
          { value: 'et', label: 'Estonian' },
          { value: 'ee-GH', label: 'Ewe (Ghana)' },
          { value: 'ee-TG', label: 'Ewe (Togo)' },
          { value: 'ee', label: 'Ewe' },
          { value: 'fo-FO', label: 'Faroese (Faroe Islands)' },
          { value: 'fo', label: 'Faroese' },
          { value: 'fil-PH', label: 'Filipino (Philippines)' },
          { value: 'fil', label: 'Filipino' },
          { value: 'fi-FI', label: 'Finnish (Finland)' },
          { value: 'fi', label: 'Finnish' },
          { value: 'fr-BE', label: 'French (Belgium)' },
          { value: 'fr-BJ', label: 'French (Benin)' },
          { value: 'fr-BF', label: 'French (Burkina Faso)' },
          { value: 'fr-BI', label: 'French (Burundi)' },
          { value: 'fr-CM', label: 'French (Cameroon)' },
          { value: 'fr-CA', label: 'French (Canada)' },
          { value: 'fr-CF', label: 'French (Central African Republic)' },
          { value: 'fr-TD', label: 'French (Chad)' },
          { value: 'fr-KM', label: 'French (Comoros)' },
          { value: 'fr-CG', label: 'French (Congo - Brazzaville)' },
          { value: 'fr-CD', label: 'French (Congo - Kinshasa)' },
          { value: 'fr-CI', label: 'French (Côte d’Ivoire)' },
          { value: 'fr-DJ', label: 'French (Djibouti)' },
          { value: 'fr-GQ', label: 'French (Equatorial Guinea)' },
          { value: 'fr-FR', label: 'French (France)' },
          { value: 'fr-GA', label: 'French (Gabon)' },
          { value: 'fr-GP', label: 'French (Guadeloupe)' },
          { value: 'fr-GN', label: 'French (Guinea)' },
          { value: 'fr-LU', label: 'French (Luxembourg)' },
          { value: 'fr-MG', label: 'French (Madagascar)' },
          { value: 'fr-ML', label: 'French (Mali)' },
          { value: 'fr-MQ', label: 'French (Martinique)' },
          { value: 'fr-MC', label: 'French (Monaco)' },
          { value: 'fr-NE', label: 'French (Niger)' },
          { value: 'fr-RW', label: 'French (Rwanda)' },
          { value: 'fr-RE', label: 'French (Réunion)' },
          { value: 'fr-BL', label: 'French (Saint Barthélemy)' },
          { value: 'fr-MF', label: 'French (Saint Martin)' },
          { value: 'fr-SN', label: 'French (Senegal)' },
          { value: 'fr-CH', label: 'French (Switzerland)' },
          { value: 'fr-TG', label: 'French (Togo)' },
          { value: 'fr', label: 'French' },
          { value: 'ff-SN', label: 'Fulah (Senegal)' },
          { value: 'ff', label: 'Fulah' },
          { value: 'gl-ES', label: 'Galician (Spain)' },
          { value: 'gl', label: 'Galician' },
          { value: 'lg-UG', label: 'Ganda (Uganda)' },
          { value: 'lg', label: 'Ganda' },
          { value: 'ka-GE', label: 'Georgian (Georgia)' },
          { value: 'ka', label: 'Georgian' },
          { value: 'de-AT', label: 'German (Austria)' },
          { value: 'de-BE', label: 'German (Belgium)' },
          { value: 'de-DE', label: 'German (Germany)' },
          { value: 'de-LI', label: 'German (Liechtenstein)' },
          { value: 'de-LU', label: 'German (Luxembourg)' },
          { value: 'de-CH', label: 'German (Switzerland)' },
          { value: 'de', label: 'German' },
          { value: 'el-CY', label: 'Greek (Cyprus)' },
          { value: 'el-GR', label: 'Greek (Greece)' },
          { value: 'el', label: 'Greek' },
          { value: 'gu-IN', label: 'Gujarati (India)' },
          { value: 'gu', label: 'Gujarati' },
          { value: 'guz-KE', label: 'Gusii (Kenya)' },
          { value: 'guz', label: 'Gusii' },
          { value: 'ha-Latn', label: 'Hausa (Latin)' },
          { value: 'ha-Latn-GH', label: 'Hausa (Latin, Ghana)' },
          { value: 'ha-Latn-NE', label: 'Hausa (Latin, Niger)' },
          { value: 'ha-Latn-NG', label: 'Hausa (Latin, Nigeria)' },
          { value: 'ha', label: 'Hausa' },
          { value: 'haw-US', label: 'Hawaiian (United States)' },
          { value: 'haw', label: 'Hawaiian' },
          { value: 'he-IL', label: 'Hebrew (Israel)' },
          { value: 'he', label: 'Hebrew' },
          { value: 'hi-IN', label: 'Hindi (India)' },
          { value: 'hi', label: 'Hindi' },
          { value: 'hu-HU', label: 'Hungarian (Hungary)' },
          { value: 'hu', label: 'Hungarian' },
          { value: 'is-IS', label: 'Icelandic (Iceland)' },
          { value: 'is', label: 'Icelandic' },
          { value: 'ig-NG', label: 'Igbo (Nigeria)' },
          { value: 'ig', label: 'Igbo' },
          { value: 'id-ID', label: 'Indonesian (Indonesia)' },
          { value: 'id', label: 'Indonesian' },
          { value: 'ga-IE', label: 'Irish (Ireland)' },
          { value: 'ga', label: 'Irish' },
          { value: 'it-IT', label: 'Italian (Italy)' },
          { value: 'it-CH', label: 'Italian (Switzerland)' },
          { value: 'it', label: 'Italian' },
          { value: 'ja-JP', label: 'Japanese (Japan)' },
          { value: 'ja', label: 'Japanese' },
          { value: 'kea-CV', label: 'Kabuverdianu (Cape Verde)' },
          { value: 'kea', label: 'Kabuverdianu' },
          { value: 'kab-DZ', label: 'Kabyle (Algeria)' },
          { value: 'kab', label: 'Kabyle' },
          { value: 'kl-GL', label: 'Kalaallisut (Greenland)' },
          { value: 'kl', label: 'Kalaallisut' },
          { value: 'kln-KE', label: 'Kalenjin (Kenya)' },
          { value: 'kln', label: 'Kalenjin' },
          { value: 'kam-KE', label: 'Kamba (Kenya)' },
          { value: 'kam', label: 'Kamba' },
          { value: 'kn-IN', label: 'Kannada (India)' },
          { value: 'kn', label: 'Kannada' },
          { value: 'kk-Cyrl', label: 'Kazakh (Cyrillic)' },
          { value: 'kk-Cyrl-KZ', label: 'Kazakh (Cyrillic, Kazakhstan)' },
          { value: 'kk', label: 'Kazakh' },
          { value: 'km-KH', label: 'Khmer (Cambodia)' },
          { value: 'km', label: 'Khmer' },
          { value: 'ki-KE', label: 'Kikuyu (Kenya)' },
          { value: 'ki', label: 'Kikuyu' },
          { value: 'rw-RW', label: 'Kinyarwanda (Rwanda)' },
          { value: 'rw', label: 'Kinyarwanda' },
          { value: 'kok-IN', label: 'Konkani (India)' },
          { value: 'kok', label: 'Konkani' },
          { value: 'ko-KR', label: 'Korean (South Korea)' },
          { value: 'ko', label: 'Korean' },
          { value: 'khq-ML', label: 'Koyra Chiini (Mali)' },
          { value: 'khq', label: 'Koyra Chiini' },
          { value: 'ses-ML', label: 'Koyraboro Senni (Mali)' },
          { value: 'ses', label: 'Koyraboro Senni' },
          { value: 'lag-TZ', label: 'Langi (Tanzania)' },
          { value: 'lag', label: 'Langi' },
          { value: 'lv-LV', label: 'Latvian (Latvia)' },
          { value: 'lv', label: 'Latvian' },
          { value: 'lt-LT', label: 'Lithuanian (Lithuania)' },
          { value: 'lt', label: 'Lithuanian' },
          { value: 'luo-KE', label: 'Luo (Kenya)' },
          { value: 'luo', label: 'Luo' },
          { value: 'luy-KE', label: 'Luyia (Kenya)' },
          { value: 'luy', label: 'Luyia' },
          { value: 'mk-MK', label: 'Macedonian (Macedonia)' },
          { value: 'mk', label: 'Macedonian' },
          { value: 'jmc-TZ', label: 'Machame (Tanzania)' },
          { value: 'jmc', label: 'Machame' },
          { value: 'kde-TZ', label: 'Makonde (Tanzania)' },
          { value: 'kde', label: 'Makonde' },
          { value: 'mg-MG', label: 'Malagasy (Madagascar)' },
          { value: 'mg', label: 'Malagasy' },
          { value: 'ms-BN', label: 'Malay (Brunei)' },
          { value: 'ms-MY', label: 'Malay (Malaysia)' },
          { value: 'ms', label: 'Malay' },
          { value: 'ml-IN', label: 'Malayalam (India)' },
          { value: 'ml', label: 'Malayalam' },
          { value: 'mt-MT', label: 'Maltese (Malta)' },
          { value: 'mt', label: 'Maltese' },
          { value: 'gv-GB', label: 'Manx (United Kingdom)' },
          { value: 'gv', label: 'Manx' },
          { value: 'mr-IN', label: 'Marathi (India)' },
          { value: 'mr', label: 'Marathi' },
          { value: 'mas-KE', label: 'Masai (Kenya)' },
          { value: 'mas-TZ', label: 'Masai (Tanzania)' },
          { value: 'mas', label: 'Masai' },
          { value: 'mer-KE', label: 'Meru (Kenya)' },
          { value: 'mer', label: 'Meru' },
          { value: 'mfe-MU', label: 'Morisyen (Mauritius)' },
          { value: 'mfe', label: 'Morisyen' },
          { value: 'naq-NA', label: 'Nama (Namibia)' },
          { value: 'naq', label: 'Nama' },
          { value: 'ne-IN', label: 'Nepali (India)' },
          { value: 'ne-NP', label: 'Nepali (Nepal)' },
          { value: 'ne', label: 'Nepali' },
          { value: 'nd-ZW', label: 'North Ndebele (Zimbabwe)' },
          { value: 'nd', label: 'North Ndebele' },
          { value: 'nb-NO', label: 'Norwegian Bokmål (Norway)' },
          { value: 'nb', label: 'Norwegian Bokmål' },
          { value: 'nn-NO', label: 'Norwegian Nynorsk (Norway)' },
          { value: 'nn', label: 'Norwegian Nynorsk' },
          { value: 'nyn-UG', label: 'Nyankole (Uganda)' },
          { value: 'nyn', label: 'Nyankole' },
          { value: 'or-IN', label: 'Oriya (India)' },
          { value: 'or', label: 'Oriya' },
          { value: 'om-ET', label: 'Oromo (Ethiopia)' },
          { value: 'om-KE', label: 'Oromo (Kenya)' },
          { value: 'om', label: 'Oromo' },
          { value: 'ps-AF', label: 'Pashto (Afghanistan)' },
          { value: 'ps', label: 'Pashto' },
          { value: 'fa-AF', label: 'Persian (Afghanistan)' },
          { value: 'fa-IR', label: 'Persian (Iran)' },
          { value: 'fa', label: 'Persian' },
          { value: 'pl-PL', label: 'Polish (Poland)' },
          { value: 'pl', label: 'Polish' },
          { value: 'pt-BR', label: 'Portuguese (Brazil)' },
          { value: 'pt-GW', label: 'Portuguese (Guinea-Bissau)' },
          { value: 'pt-MZ', label: 'Portuguese (Mozambique)' },
          { value: 'pt-PT', label: 'Portuguese (Portugal)' },
          { value: 'pt', label: 'Portuguese' },
          { value: 'pa-Arab', label: 'Punjabi (Arabic)' },
          { value: 'pa-Arab-PK', label: 'Punjabi (Arabic, Pakistan)' },
          { value: 'pa-Guru', label: 'Punjabi (Gurmukhi)' },
          { value: 'pa-Guru-IN', label: 'Punjabi (Gurmukhi, India)' },
          { value: 'pa', label: 'Punjabi' },
          { value: 'ro-MD', label: 'Romanian (Moldova)' },
          { value: 'ro-RO', label: 'Romanian (Romania)' },
          { value: 'ro', label: 'Romanian' },
          { value: 'rm-CH', label: 'Romansh (Switzerland)' },
          { value: 'rm', label: 'Romansh' },
          { value: 'rof-TZ', label: 'Rombo (Tanzania)' },
          { value: 'rof', label: 'Rombo' },
          { value: 'ru-MD', label: 'Russian (Moldova)' },
          { value: 'ru-RU', label: 'Russian (Russia)' },
          { value: 'ru-UA', label: 'Russian (Ukraine)' },
          { value: 'ru', label: 'Russian' },
          { value: 'rwk-TZ', label: 'Rwa (Tanzania)' },
          { value: 'rwk', label: 'Rwa' },
          { value: 'saq-KE', label: 'Samburu (Kenya)' },
          { value: 'saq', label: 'Samburu' },
          { value: 'sg-CF', label: 'Sango (Central African Republic)' },
          { value: 'sg', label: 'Sango' },
          { value: 'seh-MZ', label: 'Sena (Mozambique)' },
          { value: 'seh', label: 'Sena' },
          { value: 'sr-Cyrl', label: 'Serbian (Cyrillic)' },
          {
            value: 'sr-Cyrl-BA',
            label: 'Serbian (Cyrillic, Bosnia and Herzegovina)'
          },
          { value: 'sr-Cyrl-ME', label: 'Serbian (Cyrillic, Montenegro)' },
          { value: 'sr-Cyrl-RS', label: 'Serbian (Cyrillic, Serbia)' },
          { value: 'sr-Latn', label: 'Serbian (Latin)' },
          {
            value: 'sr-Latn-BA',
            label: 'Serbian (Latin, Bosnia and Herzegovina)'
          },
          { value: 'sr-Latn-ME', label: 'Serbian (Latin, Montenegro)' },
          { value: 'sr-Latn-RS', label: 'Serbian (Latin, Serbia)' },
          { value: 'sr', label: 'Serbian' },
          { value: 'sn-ZW', label: 'Shona (Zimbabwe)' },
          { value: 'sn', label: 'Shona' },
          { value: 'ii-CN', label: 'Sichuan Yi (China)' },
          { value: 'ii', label: 'Sichuan Yi' },
          { value: 'si-LK', label: 'Sinhala (Sri Lanka)' },
          { value: 'si', label: 'Sinhala' },
          { value: 'sk-SK', label: 'Slovak (Slovakia)' },
          { value: 'sk', label: 'Slovak' },
          { value: 'sl-SI', label: 'Slovenian (Slovenia)' },
          { value: 'sl', label: 'Slovenian' },
          { value: 'xog-UG', label: 'Soga (Uganda)' },
          { value: 'xog', label: 'Soga' },
          { value: 'so-DJ', label: 'Somali (Djibouti)' },
          { value: 'so-ET', label: 'Somali (Ethiopia)' },
          { value: 'so-KE', label: 'Somali (Kenya)' },
          { value: 'so-SO', label: 'Somali (Somalia)' },
          { value: 'so', label: 'Somali' },
          { value: 'es-AR', label: 'Spanish (Argentina)' },
          { value: 'es-BO', label: 'Spanish (Bolivia)' },
          { value: 'es-CL', label: 'Spanish (Chile)' },
          { value: 'es-CO', label: 'Spanish (Colombia)' },
          { value: 'es-CR', label: 'Spanish (Costa Rica)' },
          { value: 'es-DO', label: 'Spanish (Dominican Republic)' },
          { value: 'es-EC', label: 'Spanish (Ecuador)' },
          { value: 'es-SV', label: 'Spanish (El Salvador)' },
          { value: 'es-GQ', label: 'Spanish (Equatorial Guinea)' },
          { value: 'es-GT', label: 'Spanish (Guatemala)' },
          { value: 'es-HN', label: 'Spanish (Honduras)' },
          { value: 'es-419', label: 'Spanish (Latin America)' },
          { value: 'es-MX', label: 'Spanish (Mexico)' },
          { value: 'es-NI', label: 'Spanish (Nicaragua)' },
          { value: 'es-PA', label: 'Spanish (Panama)' },
          { value: 'es-PY', label: 'Spanish (Paraguay)' },
          { value: 'es-PE', label: 'Spanish (Peru)' },
          { value: 'es-PR', label: 'Spanish (Puerto Rico)' },
          { value: 'es-ES', label: 'Spanish (Spain)' },
          { value: 'es-US', label: 'Spanish (United States)' },
          { value: 'es-UY', label: 'Spanish (Uruguay)' },
          { value: 'es-VE', label: 'Spanish (Venezuela)' },
          { value: 'es', label: 'Spanish' },
          { value: 'sw-KE', label: 'Swahili (Kenya)' },
          { value: 'sw-TZ', label: 'Swahili (Tanzania)' },
          { value: 'sw', label: 'Swahili' },
          { value: 'sv-FI', label: 'Swedish (Finland)' },
          { value: 'sv-SE', label: 'Swedish (Sweden)' },
          { value: 'sv', label: 'Swedish' },
          { value: 'gsw-CH', label: 'Swiss German (Switzerland)' },
          { value: 'gsw', label: 'Swiss German' },
          { value: 'shi-Latn', label: 'Tachelhit (Latin)' },
          { value: 'shi-Latn-MA', label: 'Tachelhit (Latin, Morocco)' },
          { value: 'shi-Tfng', label: 'Tachelhit (Tifinagh)' },
          { value: 'shi-Tfng-MA', label: 'Tachelhit (Tifinagh, Morocco)' },
          { value: 'shi', label: 'Tachelhit' },
          { value: 'dav-KE', label: 'Taita (Kenya)' },
          { value: 'dav', label: 'Taita' },
          { value: 'ta-IN', label: 'Tamil (India)' },
          { value: 'ta-LK', label: 'Tamil (Sri Lanka)' },
          { value: 'ta', label: 'Tamil' },
          { value: 'te-IN', label: 'Telugu (India)' },
          { value: 'te', label: 'Telugu' },
          { value: 'teo-KE', label: 'Teso (Kenya)' },
          { value: 'teo-UG', label: 'Teso (Uganda)' },
          { value: 'teo', label: 'Teso' },
          { value: 'th-TH', label: 'Thai (Thailand)' },
          { value: 'th', label: 'Thai' },
          { value: 'bo-CN', label: 'Tibetan (China)' },
          { value: 'bo-IN', label: 'Tibetan (India)' },
          { value: 'bo', label: 'Tibetan' },
          { value: 'ti-ER', label: 'Tigrinya (Eritrea)' },
          { value: 'ti-ET', label: 'Tigrinya (Ethiopia)' },
          { value: 'ti', label: 'Tigrinya' },
          { value: 'to-TO', label: 'Tonga (Tonga)' },
          { value: 'to', label: 'Tonga' },
          { value: 'tr-TR', label: 'Turkish (Turkey)' },
          { value: 'tr', label: 'Turkish' },
          { value: 'uk-UA', label: 'Ukrainian (Ukraine)' },
          { value: 'uk', label: 'Ukrainian' },
          { value: 'ur-IN', label: 'Urdu (India)' },
          { value: 'ur-PK', label: 'Urdu (Pakistan)' },
          { value: 'ur', label: 'Urdu' },
          { value: 'uz-Arab', label: 'Uzbek (Arabic)' },
          { value: 'uz-Arab-AF', label: 'Uzbek (Arabic, Afghanistan)' },
          { value: 'uz-Cyrl', label: 'Uzbek (Cyrillic)' },
          { value: 'uz-Cyrl-UZ', label: 'Uzbek (Cyrillic, Uzbekistan)' },
          { value: 'uz-Latn', label: 'Uzbek (Latin)' },
          { value: 'uz-Latn-UZ', label: 'Uzbek (Latin, Uzbekistan)' },
          { value: 'uz', label: 'Uzbek' },
          { value: 'vi-VN', label: 'Vietnamese (Vietnam)' },
          { value: 'vi', label: 'Vietnamese' },
          { value: 'vun-TZ', label: 'Vunjo (Tanzania)' },
          { value: 'vun', label: 'Vunjo' },
          { value: 'cy-GB', label: 'Welsh (United Kingdom)' },
          { value: 'cy', label: 'Welsh' },
          { value: 'yo-NG', label: 'Yoruba (Nigeria)' },
          { value: 'yo', label: 'Yoruba' },
          { value: 'zu-ZA', label: 'Zulu (South Africa)' },
          { value: 'zu', label: 'Zulu' }
        ],
        currencyOptions = [
          { value: 'EUR', label: 'EUR' },
          { value: 'AED', label: 'AED' },
          { value: 'AFN', label: 'AFN' },
          { value: 'XCD', label: 'XCD' },
          { value: 'ALL', label: 'ALL' },
          { value: 'AMD', label: 'AMD' },
          { value: 'AOA', label: 'AOA' },
          { value: 'USD', label: 'USD' },
          { value: 'ARS', label: 'ARS' },
          { value: 'AUD', label: 'AUD' },
          { value: 'AWG', label: 'AWG' },
          { value: 'AZN', label: 'AZN' },
          { value: 'BAM', label: 'BAM' },
          { value: 'BBD', label: 'BBD' },
          { value: 'BDT', label: 'BDT' },
          { value: 'XOF', label: 'XOF' },
          { value: 'BGN', label: 'BGN' },
          { value: 'BHD', label: 'BHD' },
          { value: 'BIF', label: 'BIF' },
          { value: 'BMD', label: 'BMD' },
          { value: 'BND', label: 'BND' },
          { value: 'BOB', label: 'BOB' },
          { value: 'BRL', label: 'BRL' },
          { value: 'BSD', label: 'BSD' },
          { value: 'BTN', label: 'BTN' },
          { value: 'NOK', label: 'NOK' },
          { value: 'BWP', label: 'BWP' },
          { value: 'BYN', label: 'BYN' },
          { value: 'BZD', label: 'BZD' },
          { value: 'CAD', label: 'CAD' },
          { value: 'CDF', label: 'CDF' },
          { value: 'XAF', label: 'XAF' },
          { value: 'CHF', label: 'CHF' },
          { value: 'NZD', label: 'NZD' },
          { value: 'CLF', label: 'CLF' },
          { value: 'CNY', label: 'CNY' },
          { value: 'COP', label: 'COP' },
          { value: 'CRC', label: 'CRC' },
          { value: 'CUC', label: 'CUC' },
          { value: 'CVE', label: 'CVE' },
          { value: 'ANG', label: 'ANG' },
          { value: 'CZK', label: 'CZK' },
          { value: 'DJF', label: 'DJF' },
          { value: 'DKK', label: 'DKK' },
          { value: 'DOP', label: 'DOP' },
          { value: 'DZD', label: 'DZD' },
          { value: 'EGP', label: 'EGP' },
          { value: 'MAD', label: 'MAD' },
          { value: 'ERN', label: 'ERN' },
          { value: 'ETB', label: 'ETB' },
          { value: 'FJD', label: 'FJD' },
          { value: 'FKP', label: 'FKP' },
          { value: 'GBP', label: 'GBP' },
          { value: 'GEL', label: 'GEL' },
          { value: 'GHS', label: 'GHS' },
          { value: 'GIP', label: 'GIP' },
          { value: 'GMD', label: 'GMD' },
          { value: 'GNF', label: 'GNF' },
          { value: 'GTQ', label: 'GTQ' },
          { value: 'GYD', label: 'GYD' },
          { value: 'HKD', label: 'HKD' },
          { value: 'HNL', label: 'HNL' },
          { value: 'HRK', label: 'HRK' },
          { value: 'HTG', label: 'HTG' },
          { value: 'HUF', label: 'HUF' },
          { value: 'IDR', label: 'IDR' },
          { value: 'ILS', label: 'ILS' },
          { value: 'INR', label: 'INR' },
          { value: 'IQD', label: 'IQD' },
          { value: 'IRR', label: 'IRR' },
          { value: 'ISK', label: 'ISK' },
          { value: 'JMD', label: 'JMD' },
          { value: 'JOD', label: 'JOD' },
          { value: 'JPY', label: 'JPY' },
          { value: 'KES', label: 'KES' },
          { value: 'KGS', label: 'KGS' },
          { value: 'KHR', label: 'KHR' },
          { value: 'KMF', label: 'KMF' },
          { value: 'KPW', label: 'KPW' },
          { value: 'KRW', label: 'KRW' },
          { value: 'KWD', label: 'KWD' },
          { value: 'KYD', label: 'KYD' },
          { value: 'KZT', label: 'KZT' },
          { value: 'LAK', label: 'LAK' },
          { value: 'LBP', label: 'LBP' },
          { value: 'LKR', label: 'LKR' },
          { value: 'LRD', label: 'LRD' },
          { value: 'LSL', label: 'LSL' },
          { value: 'LYD', label: 'LYD' },
          { value: 'MDL', label: 'MDL' },
          { value: 'MGA', label: 'MGA' },
          { value: 'MKD', label: 'MKD' },
          { value: 'MMK', label: 'MMK' },
          { value: 'MNT', label: 'MNT' },
          { value: 'MRU', label: 'MRU' },
          { value: 'MUR', label: 'MUR' },
          { value: 'MVR', label: 'MVR' },
          { value: 'MWK', label: 'MWK' },
          { value: 'MXN', label: 'MXN' },
          { value: 'MYR', label: 'MYR' },
          { value: 'MZN', label: 'MZN' },
          { value: 'NAD', label: 'NAD' },
          { value: 'XPF', label: 'XPF' },
          { value: 'NGN', label: 'NGN' },
          { value: 'NIO', label: 'NIO' },
          { value: 'NPR', label: 'NPR' },
          { value: 'OMR', label: 'OMR' },
          { value: 'PAB', label: 'PAB' },
          { value: 'PEN', label: 'PEN' },
          { value: 'PGK', label: 'PGK' },
          { value: 'PHP', label: 'PHP' },
          { value: 'PKR', label: 'PKR' },
          { value: 'PLN', label: 'PLN' },
          { value: 'PYG', label: 'PYG' },
          { value: 'QAR', label: 'QAR' },
          { value: 'RON', label: 'RON' },
          { value: 'RSD', label: 'RSD' },
          { value: 'RUB', label: 'RUB' },
          { value: 'RWF', label: 'RWF' },
          { value: 'SAR', label: 'SAR' },
          { value: 'SBD', label: 'SBD' },
          { value: 'SCR', label: 'SCR' },
          { value: 'SDG', label: 'SDG' },
          { value: 'SEK', label: 'SEK' },
          { value: 'SGD', label: 'SGD' },
          { value: 'SHP', label: 'SHP' },
          { value: 'SLL', label: 'SLL' },
          { value: 'SOS', label: 'SOS' },
          { value: 'SRD', label: 'SRD' },
          { value: 'SSP', label: 'SSP' },
          { value: 'STN', label: 'STN' },
          { value: 'SVC', label: 'SVC' },
          { value: 'SYP', label: 'SYP' },
          { value: 'SZL', label: 'SZL' },
          { value: 'THB', label: 'THB' },
          { value: 'TJS', label: 'TJS' },
          { value: 'TMT', label: 'TMT' },
          { value: 'TND', label: 'TND' },
          { value: 'TOP', label: 'TOP' },
          { value: 'TRY', label: 'TRY' },
          { value: 'TTD', label: 'TTD' },
          { value: 'TWD', label: 'TWD' },
          { value: 'TZS', label: 'TZS' },
          { value: 'UAH', label: 'UAH' },
          { value: 'UGX', label: 'UGX' },
          { value: 'UYI', label: 'UYI' },
          { value: 'UZS', label: 'UZS' },
          { value: 'VES', label: 'VES' },
          { value: 'VND', label: 'VND' },
          { value: 'VUV', label: 'VUV' },
          { value: 'YER', label: 'YER' },
          { value: 'ZAR', label: 'ZAR' },
          { value: 'ZMW', label: 'ZMW' },
          { value: 'ZWL', label: 'ZWL' }
        ],
        NumberFormatter_FormattedField = function FormattedField() {
          var locale = Object(src.y)('locale').value,
            currency = Object(src.y)('currency').value,
            _useMemo = Object(react.useMemo)(
              function() {
                return locale && currency
                  ? src.E.createIntlNumberFormatter(locale, {
                      style: 'currency',
                      currency: currency
                    })
                  : {};
              },
              [currency, locale]
            ),
            formatter = _useMemo.formatter,
            parser = _useMemo.parser;
          return react_default.a.createElement(src.j, {
            field: 'localeMask',
            label: 'Locale Masked Field (EUR currency)',
            formatter: formatter,
            parser: parser,
            formatterDependencies: [locale, currency],
            initialValue: 3e3
          });
        };
      __webpack_exports__.a = Object(withDocs.a)(
        "# Format and Parse\n\n\x3c!-- STORY --\x3e\n\n```jsx\nimport { Form, Select, Text, utils, useFieldState } from 'informed';\n\nconst localeOptions = [const localeOptions = [\n  { value: 'af-NA', label: 'Afrikaans (Namibia)' },\n  { value: 'af-ZA', label: 'Afrikaans (South Africa)' },\n  { value: 'af', label: 'Afrikaans' },\n  // ...rest, shortened for readability\n];\n\nconst currencyOptions = [\n  {\n    value: 'EUR',\n    label: 'EUR',\n  },\n  {\n    value: 'AED',\n    label: 'AED',\n  },\n  // ...rest, shortened for readability\n]\n\nconst FormattedField = () => {\n  const { value: locale } = useFieldState('locale');\n  const { value: currency } = useFieldState('currency');\n\n  // Generate mask from locale and currency\n  const { formatter, parser } = useMemo(\n    () => {\n      if (locale && currency) {\n        return utils.createIntlNumberFormatter(locale, {\n          style: 'currency',\n          currency\n        });\n      }\n      return {};\n    },\n    [currency, locale]\n  );\n\n  return (\n    <Text\n      field=\"localeMask\"\n      label=\"Locale Masked Field (EUR currency)\"\n      formatter={formatter}\n      parser={parser}\n      formatterDependencies={[locale, currency]}\n      initialValue={3000}\n    />\n  );\n};\n\nconst FormatParse = () => (\n  <Form>\n    <div>\n      <Select\n        label=\"Locale\"\n        field=\"locale\"\n        options={localeOptions}\n        initialValue=\"nl-NL\"\n      />\n      <Select\n        label=\"Currency\"\n        field=\"currency\"\n        options={currencyOptions}\n        initialValue=\"EUR\"\n      />\n      <FormattedField />\n      <button type=\"submit\">Submit</button>\n      <Debug />\n    </div>\n  </Form>\n);\n```\n",
        function FormatParse() {
          return react_default.a.createElement(
            src.f,
            null,
            react_default.a.createElement(
              'div',
              null,
              react_default.a.createElement(src.r, {
                label: 'Locale',
                field: 'locale',
                options: localeOptions,
                initialValue: 'nl-NL'
              }),
              react_default.a.createElement(src.r, {
                label: 'Currency',
                field: 'currency',
                options: currencyOptions,
                initialValue: 'EUR'
              }),
              react_default.a.createElement(
                NumberFormatter_FormattedField,
                null
              ),
              react_default.a.createElement(
                'button',
                { type: 'submit' },
                'Submit'
              ),
              react_default.a.createElement(src.c, null)
            )
          );
        }
      );
    },
    998: function(module, exports, __webpack_require__) {
      __webpack_require__(999),
        __webpack_require__(1257),
        __webpack_require__(1258),
        __webpack_require__(1816),
        (module.exports = __webpack_require__(1775));
    }
  },
  [[998, 1, 2]]
]);
